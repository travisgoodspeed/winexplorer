'Crusaider Rom Reader/Writer HTR v4.1 - Official Freeware Release Version
'Released as Freeware and NEVER decrypted on August 15th 2002
'IF you didnt download this direct from the Nation, your playing Russian Roulette.
'
'We have released this version and prior versions to the public as freeware.
'This version, and its prior versions, will be the only versions we make public.
'We released these files to the public, because too many script kiddies were
'releasing various imposters, which would cause you more damage than actual good.
'
'We find it humerous that several scumgbags have attempted to alter the file and
'pass it around with the tag name of 'Decrypted' - What a joke. Its a shame that
'those scamsters have to go thru such extremes to feel better about themselves by
'duping the public into thinking that they posess something that they do not.
'
'When your tired of supporting such ignorance and idiocy, and are serious about
'learning something new, and getting what it is that you want, without all the BS,
'and the urge of the almighty buck, the Nation will be here, long after those poor
'souls have come and gone. Just as we always have, and Just as we always will.
'
'This continues to be an ongoing project still in development. IF you like this
'version, then you've not seen -anything- yet. www.dssnationforums.com
'-------------------------------------------------------------------------------------------
'This file is NOW freeware. This file is for the Public from Members of DSSNationForums.Com
'Brought to you by DSSNation - The #1 Private 3m Script Provider for Service & Support
'-------------------------------------------------------------------------------------------
'
'Important Note: Make SURE you are using an EXTERNAL POWER SOURCE and NOT the PS2 Power.
'This Script works best with a MulitSwitch Power Supply, 300ma or 500ma at 7.5 volts.
'This type power source can be obtained easily from your Local Electronics supply.
'
'------------------------------------------------------------------------------------------
'Disclaimer: I/we take NO credit for the invention of this script, Only the modifications
'that we have done to it in search of a very efficent Rom Glitch. I/we make no claims that
'this file will work for every loader/card. As with anything, you use this script at your
'own risk. This script is offered without guarantee and or warranty.
'-------------------------------------------------------------------------------------------
'Updates/Changes in this version (v4.x) include: (Updates/Mods By PrimeTime and Snapperhaed)
'-------------------------------------------------------------------------------------------
'1 - Modified the Settings Menu to reflect recent additions and newer display.
'2 - Added the Public Floating 'sr71 decrypted' Dac range as "Freeware" on ALT Crusaider.
'    Note: We do not support it nor recommend its use, but if you want it, you got it.
'3 - Have removed prior reference "SR BlackBird" so as NOT to cause confusion to others
'    So they dont mistakenly think that it is OUR version when in fact, its plainly not.
'    The Rom Glitcher is Now Herein Referred to as: THE CRUSAIDER.
'-------------------------------------------------------------------------------------------
'Updates/Changes in this version (v4.0) include: (Updates/Mods By PrimeTime and Snapperhaed)
'-------------------------------------------------------------------------------------------
'1 - Modified Check Info so display includes Decimal and Hex Values.
'    Also corrected that it wasnt checking for actual card installed.
'2 - Added a Secondary Utilities Menu (At the request of current members)
'    Includes: Clean Card, UnMarry IRD, Write Bin, and Read Bin.
'3 - Changed functionality of base Menus and appearances thereof.
'4 - Eliminated code from prior modifications for proper performance without duplication.
'5 - Added in new main screen feedbacks.
'6 - Custom settings menue now displays the final dac values again.
'-------------------------------------------------------------------------------------------
'Updates/Changes in this version (v3.2) include: (Updates/Mods By PrimeTime and Snapperhaed)
'-------------------------------------------------------------------------------------------
'1 - Added the ability to restore function to the cards that have both the Freeware and
'    Private Versions of Card Lock( The lock that loops the card when removed from the IRD.)
'    Crusaider will now allow you to Patch the dammaged areas of the eeprom to read/reuse the bin!
'    This function has been added to the Card Utilities menu.
'2 - Added a new menu, ALT Crusaider, All of the D-1 settings in this option are BELOW 200.
'    For those of you who normally unloop cards at values under 200 you will want to try this option.
'3 - Removed the main screen feebacks, I know some will hate this but it was really messing with
'    the performance of this script.
'4 - Made a MAJOR upgrade to the glitch string. This is the fastest one yet!
'------------------------------------------------------------------------------------------------
'Updates/Changes in this version (v3.0) include: (Updates/Mods by PRIMETIME and Snapperhaed)
'------------------------------------------------------------------------------------------------
'1 - Fixed problem in Menus duplicating themselves - New menuing system created
'2 - Added Utilities menu with options to Loop Card and Check card info
'3 - Added support for Sounds upon entry, menus, attention required, completed and errors
'4 - Added settings menu with information on what loaders have been reported working/settings
'5 - Removed misc code which was no longer needed during developmental stages
'6 - FIXED A PROBLEM WITH DETECTING IF THE CARD IS PRESENT WHEN WRITING.
'7 - ADDED A NEW DAC SETTING "COMMERCIAL"
'------------------------------------------------------------------------------------------
'Updates/Changes in this version (v2.a) include: (All Updates/Mods by PRIMETIME on 7-28-02)
'------------------------------------------------------------------------------------------
'1)ADDED A CHECK TO SEE IF THE CARD IS ALREADY LOOPED WHEN USING THE TEST GLICTH FUNCTION.
'2)FIXED THE BUG THAT WOULD NOT LET CRUSAIDER FINISH WRITEING THE LAST 64 BYTES OF EEPROM.
'3)ADDED IN ALL KNOWN TIMING MODS
'------------------------------------------------------------------------------------------
'Updates/Changes in this version (v2.0) include: (All Updates/Mods by PRIMETIME on 7-26-02)
'------------------------------------------------------------------------------------------
'1)FIXED A PROBLEM WITH NOT BEING ABLE TO USE A CUSTOM CONFIG FILE TO WRITE TO THE CARD.
'2)UPDATED THE TIMEING TO ALLOW FASTER ENTRY
'3)MODIFIED THE SCRIPT TO REFLECT THE DSS NATIONS EXCLUSIVE OWNERSHIP OF THIS FILE.
'4)MODIFIED THE READ FUNCTION AND THE PROGRAM INFO STATUS TO "COMMERCIAL STANDARDS"
'5)ADDED THE ABILITY TO CHANGE THE REC TIMEOUT SETTINGS. *NOTE The original settings were
'  400, the lowest that you may go is 50 before the script itself times out on you. For
'  those of you with pS2 powered loaders you may try changing this setting. ALL of you need
'  to check this setting BEFORE you use this script. (In Winexp, Config, PRG Parameters)'
'*******************************************************************************************
'CREDITS:
'PrimeTime for being the Man on the Mission.
'Adventu for fixing up the timeing mods in early pretest stage editions.
'No1B4Me for the ul4s method and flash.
'Rs Grp for there format to allow selectable glitch points 'on the fly'.
'Someone from DssIslands for parts of the script Custom_Glitcher.
'Snapperhaed for the Script Distribution and Encryption, Thanks to ALL of you.
'Thanks to Onebigload for his help in beta and in the forums.
'Thanks to BigSky2k for the creation of SR_ConfigMaker, and beta testing.
'Special thanks to ALL the Members of the Nation for their input, testing, and self help.
'*******************************************************************************************

'INSTRUCTIONS:
'You Have 4 options to choose from, Custom,Test Glitch, Read and Write.
'
'When you select one of the read or write features you will have the ability to choose which
'D1-D9 settings best suits the card you are trying to dump. You may want to experiment with this
'setting before you attempt to dump a card that has something of value to you.
'You can use the test glitch feature to try-out each dac setting to help in finding the one that
'your machine and cards like.If one of the pre-set values do not work for you then you may want to
'try the custom feature. When you use that feature you will have 3 choices, read write and make file.
'When you use these settings you will have to use a Config file. I have included 4 config files with
'this script. You will most like have to end up creating your own Config file by selecting the make file
'option. Be prepaired to give all of the UL4S d1-d9 values, both the high and the low. You can get the
'values directly from ExtremeHu settings.
'--------------------------------------------------------------------------------------------
'ONE WORD OF CAUTION, alot of the timeings have been changed and although when you get this script
'dialed in it is deadly, there is a much higher chance of looping the card. I have really seen this
'when using the abort feature, pull the card out instead.
'--------------------------------------------------------------------------------------------

Option Explicit
Const fsoError = -1
Const fsoOpenRead = 0
Const fsoOpenWrite = 1
Const fsoOpenReadWrite = 2
Const fsoSEEK_SET = 0
Const fsoSEEK_CUR = 1
Const fsoSEEK_END = 2
Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"
Const Ins = &h08
Const InsParam1 = &h00
Const InsParam2 = &h00
Const InsLen = &h34
Const dss_DefaultButton1 = 0
Const dss_DefaultButton2 = 256
Const dss_DefaultButton3 = 512
Const ConfigFileFilter = ".txt (*.txt)"
    Dim OutFile
    Dim InFile
    Dim HUBinFile
    Dim ZipCode
    Dim Guide
    Dim HexZipCode1
    Dim HexZipCode2
    Dim HexZipCode3
    Dim HexTimeZone
    Dim DefaultTZButton
    Dim DefaultDaylightButton
    Dim TimeZone
    Dim Daylight
    Dim CodeProtection
    Dim ScriptStart
    Dim ScriptEnd
    Dim ErrorString
    Dim Choice
    Dim PromptString
    Dim RetVal
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Password
    Dim XORedByte(31)
    Dim Key12byte(11)
    Dim d0,D1,D2,D3,D4,D5,D6,D7,D8,d9
    Dim DAC
    Dim DAC4C
    Dim Delaye
    Dim Delay5C
    Dim glttl,Attempts
    Dim chglch
    Dim glchs
    Dim Read
    Dim Glrngchoice
    Dim Unloopchoice
    dim news
    dim olds
    dim atr

Sub Main()
    Dim ErrorString
    Dim RetVal
    Dim RWChoice
    Dim RSChoice
    Dim WSChoice
    Dim UTILChoice
    Dim CCChoice
    Dim MenuPrompt1
    Sc.Verbose = 0


    If Sc.Version < 4.6 Then
        ErrorString = "You need version 4.6 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
    End If
do
MenuPrompt1 = "                                      DSSNations Exclusive Crusaider Rom Reader/Writer    " & vbCrLf
MenuPrompt1 = MenuPrompt1 & "                   Licensed for use to Members of the Nation by Primetime and Snapperhaed   " & vbCrLf
MenuPrompt1 = MenuPrompt1 & "                For Details on Operation, Technique, and Settings:  www.dssnationforums.com" & vbCrLf

    Choice = Sc.ButtonBox(MenuPrompt1, 0,"The Crusaider Rom Reader/Writer " ,  " The Crusaider ", " Card Utilities ", " Settings ", "Alt Crusaider", " Exit " )

    Select Case Choice

    Case "1"
        Call CrusaiderMenu()

    Case "2"
       Call utilities()
    Case "3"
       Call SettingsMenu()
    Case "4"
   call ps2menu()
    Case "5", ""
        Exit Sub
        Case Else
            MenuPrompt1 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True
End sub
'###################################################################################################################
Sub GetFileName()

    Dim FileName

    FileName = Fs.FileSaveDialog(FileFilter, "              Please select a name to save the new bin file as...", "Default.bin")
    If FileName <> "" Then
        OutFile = Fs.FileCreate(FileName)
        HUBinFile = True
    Else
        HUBinFile = False
    End If

End Sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################

Sub GetFile()

    Dim FileName
    Dim FileSize

    FileName = Fs.FileOpenDialog(FileFilter, "    Please select a valid HU Eprom (*.bin) file to write to the card", "Default.bin")
    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            InFile = Fs.FileOpen(FileName, fsoOpenRead)
        End If
    End If

    FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_END)

    If FileSize <> "8192" Then
        Sc.MsgBox("This file is NOT a valid HU bin file" & vbcr & "or the bin file you are trying to open" & vbcr & "is being used by another program")
        HUBinFile = False
        Exit Sub
    Else
        HUBinFile = True
    End If

End Sub

Sub ReadCard()

    Dim EEPROM
    Dim TByte
    Dim Address

    EEPROM = 0
    Address = 8192


    Sc.Write("A2")

    Call ExtractCardInfo()
    Call WriteViaLoader("24A4","00000000","E")    ' Clear IRD
    Call WriteViaLoader("2460","00000000","E")    ' Clear IRD

    For EEPROM = 1 to 128    ' 128 for EEPROM, 256 for ROM
        Sc.Write("06C23F" & HexString(Address,4) & "BF00")
        Sc.Delay(50)
        Sc.Read(&h02)
        Sc.Read (&h40)

        Call Sc.ProgressBox ("Reading EEPROM Memory...", EEPROM, 128, "                                Reading card...") ' For EEPROM Read
        'Call Sc.ProgressBox ("Reading ROM Memory...", EEPROM, 256, "UnLooper/Loader") ' For ROM Read

        For TByte = 0 to 63

            Call Fs.FilePutc(OutFile, Sc.GetByte(TByte))
        Next

        Address = Address + 64

        Call WDTMR()
    Next

    Fs.FileClose(OutFile)

    Call Card_Reset()

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub
Sub WriteCard(Chunk)
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Location
    Dim EPROMBytes
    Dim EPROMBytes2

    Address = 8192
    Location = 0

Sc.Write("A2")

'Call WDTMR()

'call Fs.FileSeek(InFile, 0, fsoSEEK_SET)
'EPROMBytes = ""
'For ThisByte = 20 to (22) - 1
'EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
'Next
'Sc.Write("07C4812014" & EPROMBytes & "00")
'Sc.Read(&h02)
'Sc.Print "2014: " & EPROMBytes & vbcr

Call Sc.ProgressBox ("Writing EEPROM memory..." & vbcr & "2000:  " & EPROMBytes, EPROM, 255, "DssNation's Crusaider")


call Fs.FileSeek(InFile, Location, fsoSEEK_SET)

Do

Call WDTMR()

EPROMBytes = ""
For ThisByte = Location to (Location + 16) - 1
EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
Next
EPROMBytes2 = ""
For ThisByte = (Location + 16) to (Location + 32) - 1
EPROMBytes2 = EPROMBytes2 & HexString(Fs.FileGetc(InFile), 2)
Next

Sc.Write("25E29F" & HexString(Address,4) & EPROMBytes & EPROMBytes2 & "00")
Sc.Read(&h02)
Call Sc.ProgressBox ("Writing EPROM memory..." & vbcr & HexString(Address,4) & ":  " & EPROMBytes & vbcr & HexString(Address + 16,2) & ":  " & EPROMBytes2, EPROM, 255, "DssNation's Crusaider")

EPROM = EPROM + 1
Address = Address + 32
Location = Location + 32
loop until EPROM = 256
Call WDTMR()
Fs.FileClose(InFile)
Sc.Write("A0")                ' turn the LED off
Sc.Write("020200")
Sc.Delay(100)
Sc.Read(&h02)

Call Sc.ProgressBox ("", 0, 0, "")
call Sc.PlaySound("complete.wav")
call eepromwritten

end sub


Sub WriteCard444(Chunk)

    Dim EEPROM
    Dim TByte
    Dim Address
    Dim EEPROMBytes
    Dim Multiplier

    Address = 8192

    If Chunk = 64 Then
        Multiplier = 128
    Else
        Multiplier = 256
    End If

    Sc.Write("A2")

    Call Fs.FileSeek(InFile, 0, fsoSEEK_SET)

    Call WDTMR()

    For EEPROM = 1 to Multiplier
        EEPROMBytes = ""
        For TByte = 1 to Chunk
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
        Next

        If Chunk = 64 Then
            Sc.Write("49C2BF" & HexString(Address,4) & "FF" & EEPROMBytes & "0EFF8000")
            Sc.Read(&h03)
        Else
            Sc.Write("28E29F" & HexString(Address,4) & EEPROMBytes & "0EFF8000")
            Sc.Read(&h03)
        End If

        Call Sc.ProgressBox ("Writing EEPROM Memory...", EEPROM, Multiplier, "                               Writing to card...")

        Address = Address + Chunk
    Next

    Fs.FileClose(InFile)

    Call Card_Reset()
    Call Sc.ProgressBox ("", 0, 0, "")
    call Sc.PlaySound("complete.wav")
    call eepromwritten
End sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub ExtractCardInfo()

    Dim RetValue
    Dim XByte(15)

    Call WDTMR()
    Sc.Write("06C20724C08800")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    XByte(0) = Sc.GetByte(0)
    XByte(1) = Sc.GetByte(1)
    XByte(2) = Sc.GetByte(2)
    XByte(3) = Sc.GetByte(3)
    XByte(4) = Sc.GetByte(4)
    XByte(5) = Sc.GetByte(5)
    XByte(6) = Sc.GetByte(6)
    XByte(7) = Sc.GetByte(7)

    Sc.Write("06C20726588800")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    XByte(8) = Sc.GetByte(0)
    XByte(9) = Sc.GetByte(1)
    XByte(10) = Sc.GetByte(2)
    XByte(11) = Sc.GetByte(3)
    XByte(12) = Sc.GetByte(4)
    XByte(13) = Sc.GetByte(5)
    XByte(14) = Sc.GetByte(6)
    XByte(15) = Sc.GetByte(7)

    Sc.Write("06C20B2AE48C00")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    Key12Byte(0)  = Sc.GetByte(&h0)
    Key12Byte(1)  = Sc.GetByte(&h01)
    Key12Byte(2)  = Sc.GetByte(&h02)
    Key12Byte(3)  = Sc.GetByte(&h03)
    Key12Byte(4)  = Sc.GetByte(&h04)
    Key12Byte(5)  = Sc.GetByte(&h05)
    Key12Byte(6)  = Sc.GetByte(&h06)
    Key12Byte(7)  = Sc.GetByte(&h07)
    Key12Byte(8)  = Sc.GetByte(&h08)
    Key12Byte(9)  = Sc.GetByte(&h09)
    Key12Byte(10) = Sc.GetByte(&h0A)
    Key12Byte(11) = Sc.GetByte(&h0B)

    XORedByte(0)  = HexString(XByte(0) XOR XByte(8), 2)
    XORedByte(1)  = HexString(XByte(1) XOR XByte(9), 2)
    XORedByte(2)  = HexString(XByte(2) XOR XByte(10), 2)
    XORedByte(3)  = HexString(XByte(3) XOR XByte(11), 2)
    XORedByte(4)  = HexString(XByte(4) XOR XByte(12), 2)
    XORedByte(5)  = HexString(XByte(5) XOR XByte(13), 2)
    XORedByte(6)  = HexString(XByte(6) XOR XByte(14), 2)
    XORedByte(7)  = HexString(XByte(7) XOR XByte(15), 2)
    XoredByte(8)  = XoredByte(0)
    XoredByte(9)  = XoredByte(1)
    XoredByte(10) = XoredByte(2)
    XoredByte(11) = XoredByte(3)
    XoredByte(12) = XoredByte(4)
    XoredByte(13) = XoredByte(5)
    XoredByte(14) = XoredByte(6)
    XoredByte(15) = XoredByte(7)
    XoredByte(16) = XoredByte(0)
    XoredByte(17) = XoredByte(1)
    XoredByte(18) = XoredByte(2)
    XoredByte(19) = XoredByte(3)
    XoredByte(20) = XoredByte(4)
    XoredByte(21) = XoredByte(5)
    XoredByte(22) = XoredByte(6)
    XoredByte(23) = XoredByte(7)
    XoredByte(24) = XoredByte(0)
    XoredByte(25) = XoredByte(1)
    XoredByte(26) = XoredByte(2)
    XoredByte(27) = XoredByte(3)
    XoredByte(28) = XoredByte(4)
    XoredByte(29) = XoredByte(5)
    XoredByte(30) = XoredByte(6)
    XoredByte(31) = XoredByte(7)

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub SRBD()
Dim RetValue
Dim LockByte1
Dim LockByte2
Dim LockByte3
Dim LockByte4
delay(900)
Call WDTMR()

Call Sc.ProgressBox ("Blowing The Lock Off The Card..", 30, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 2, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 4, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 6, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 8, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 30, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 12, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 14, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 16, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 18, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 20, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 22, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 23, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card..", 24, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 25, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 26, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 26, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 26, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 26, 30, "Dss Nation's Crusaider")
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 26, 30, "Dss Nation's Crusaider")



delay(900)
Sc.Write("06 C2 03 26 54 84 00") ' Read 4 bytes from 2654
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 28, 30, "Dss Nation's Crusaider")
Sc.Delay(80)
Sc.Read(2)
RetValue = Sc.GetByte(&h01)
Sc.Read(RetValue)
LockByte1 = Sc.GetByte(&h0)
LockByte2 = Sc.GetByte(&h1)
LockByte3 = Sc.GetByte(&h2)
LockByte4 = Sc.GetByte(&h2)
Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 28, 30, "Dss Nation's Crusaider")


   Call WriteThruBootStrap("28FE", "8C", "", "", "")
   Call WriteThruBootStrap("30C0", "B0", "", "", "")
   Call WriteThruBootStrap("30BF", "25", "", "", "")
   Call WriteThruBootStrap("3509", "C0", "", "", "")
   Call WriteThruBootStrap("2008", "96", "", "", "")
   Call WriteThruBootStrap("3508", "25", "", "", "")

Call Sc.ProgressBox ("Blowing The Lock Off The Card...", 28, 30, "Dss Nation's Crusaider")
 Sc.Print "---------------------------PLEASE READ!!!-------------------------------------" & vbCr
 Sc.Print "ATTENTION!!!! You may have to go and UNMARRY this card for it to work properly...." & vbCr
 Sc.Print "What I would suggest is reading the card with ExtremHu and saving the bin." & vbCr
 Sc.Print "This way you will avoid any problems, if the card happens to loop again," & vbCr
 Sc.Print "Just re-apply this patch, Thanks for your support, DSS NATION # 1 In Private Scripts!!" & vbCr
  Sc.Print "--------------------------PLEASE READ!!!--------------------------------------" & vbCr
End Sub
Sub WriteThruBootStrap(Address, Bytes, Note, CurrentNumber, TotalNumber)
'Write Thru Boot Strap routine enables easy writing to the card
'after boot strap is loaded by providing the ability to specify
'a note for ProgressBox and it's counters, address location
'and the actual bytes to write. Bytes to write must NOT
'contain spaces so that they can be automatically calculated.
'You may write up to 64 bytes at one time.
'Example with a note:
'Call WriteThruBootStrap("2080", "FFFFFFFF", "Writing to EPROM..., 1, 1)
'Example without a note:
'Call WriteThruBootStrap("2080", "FFFFFFFF", "", "", "")
    Dim DecNumberOfBytesInGlitchPacket
    Dim HexNumberOfBytesInGlitchPacket
    Dim HexNumberOfBytesToTransmit
    Dim HexNumberOfBytesToWrite

    DecNumberOfBytesInGlitchPacket = 9 + (Len(Bytes))/2
    If DecNumberOfBytesInGlitchPacket < &h10 Then
        HexNumberOfBytesInGlitchPacket = "0" & Hex(DecNumberOfBytesInGlitchPacket)
    Else
        HexNumberOfBytesInGlitchPacket = Hex(DecNumberOfBytesInGlitchPacket)
    End If
    HexNumberOfBytesToWrite = Hex(118 + DecNumberOfBytesInGlitchPacket)
    HexNumberOfBytesToTransmit = Hex(182 + DecNumberOfBytesInGlitchPacket)
    If Note <> "" or CurrentNumber <> "" or TotalNumber <> "" then
    Call Sc.ProgressBox (Note, CurrentNumber, TotalNumber, "DssNation's Crusaider")
    else
    end if
Sc.Write(HexNumberOfBytesInGlitchPacket & "C2" & HexNumberOfBytesToWrite & Address & HexNumberOfBytesToTransmit & Bytes & "0EFF8000")
Sc.Read(&h03)
End Sub

Sub WDTMR()
    Dim RetValue

Sc.Write("05150E108000")'SET WDTMR
sc.delay(70)
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
end sub

Sub WriteViaLoader(address,data,options)

    ' Write up to 32 bytes at a time

    Dim dLen
    Dim tlen
    Dim parm1
    Dim parm2
    Dim i,t
    Dim datalen
    Dim addresslow
    Dim tmp
    Dim Xored
    Dim datarray(31)
    Dim datalength

    dLen = Len(data)
    dLen = dLen / 2
    tLen = Len(data)
    tLen = tlen + 16
    tLen = tlen / 2
    tLen = HexString(tlen,2)
    parm1 = Hex(dLen + &hC2)
    parm2 = Hex(dLen + &h7F)

    If Ucase(options) = "E" Then

        'Convert and Split up data String to an array

        t = 0
        For i = 1 To Len(data) Step 2
            tmp = Mid(data, i, 2)
            datarray(t) = (HexToDec(tmp))
            t = (t + 1)
        Next

        addresslow = HexToDec(Mid(address, 3, 2))     'Get lower byte for offset
        addresslow = (addresslow And &h7)             'Strip bits for offset 0-7

        If UBound(datarray) > 32 Then
            Exit Sub
        End If

        datalength = (Len(data) / 2)

        'Encrypt
        t = 0
        For i = addresslow To datalength + addresslow - 1
                Xored = Xored & HexString(datarray(t) Xor HexToDec(XoredByte(i)), 2)
            t = (t + 1)
        Next

        data = Xored
    End if

    Sc.Write(tLen & " " & parm1 & " " & parm2 & " " & address & " " & data & " " & "0EFF8000")
    Sc.Read(&h03)

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub WDTMR()

    Dim RetValue

    Sc.Write("05150E108000")    'SET WDTMR
    Sc.Delay(80)
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub IsCardPresent()

    Dim RetValue
    Dim GotInput

    ScriptStart = Now
    Sc.Print "----------------------------------------------------------------" & vbCr
    Sc.Print "Brought To You By DSS NATION, The #1 Private 3m Provider!! " & ScriptStart & vbCr     'main screen
    Sc.Print "----------------------------------------------------------------" & vbCr

    Do
        Sc.Write("A0")                ' Turn the LED off
        Sc.Write("80")                ' Is card present?
        Sc.Delay(100)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h01)
            RetValue = Sc.GetByte(0)
        End If

        If RetValue = &h0 Then
            Call Sc.ProgressBox ("*** Please insert your card... ***", 1, 999, "                            Card is not being detected!")
            GotInput = False
        Else
            If RetValue = &hFF Then
                GotInput = True
            Else
                If RetValue <> &h0 or RetValue <> &hFF Then
                    Sc.Write("A0")                ' turn the LED off
                    Sc.Write("020200")
                    Sc.Delay(100)
                    If Sc.BytesInBuffer > 1 Then
                        Sc.Read(&h02)
                        GotInput = False
                    Else
                        GotInput = False
                    End If
                End If
            End If
        End If
    Loop Until GotInput = True

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function HexString(Number,Length)

    Dim RetVal
    Dim CurLen

    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function HexToDec(HexNumber)

    ' This function takes a string as input, assuming it to be a Hexidecimal string,
    ' and converts it to a decimal number.

    HexNumber=Replace(UCase(HexNumber)," ","")
    HexToDec=CLng("&H"+HexNumber)

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function BootStrap()
    Sc.Verbose = False
    Dim RetValue

    BootStrap = False
    Sc.Write("0915C448" & HexString(Ins,2) & HexString(InsParam1,2) & HexString(InsParam2,2) & HexString(InsLen,2) & "8000")
    Sc.Delay(80)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    If RetValue > 0 Then
        Sc.Read (RetValue)
        If Sc.GetByte(0) = &h84 Then
            Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
            Sc.Delay(80)
            Sc.Read(&h02)
            BootStrap = True
         End If
    End If
End Function

Function GetATR ()

    Dim temp

    Call Sc.ProgressBox(0,0,0,0)
    Sc.Write("06100E10019300")
    Sc.Delay(500)
    Sc.Read(&h02)
        temp = Sc.GetByte(&h01)
        Sc.Read (temp)

    If (temp <> 20) Then
        GetATR = False
    Else
        GetATR = True
    End If

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'
'Bootcard for unlooping
'
'
'###########################################################################################################
Function BootCard()
Dim cnt, b, RetVal, boot, kk, katr
Dim atrlock, cter, glcnt, mtries, kp
ScriptStart = Now
RANDOMIZE TIMER
glttl   = 0 'total glitches to card
atrlock = 0
cter    = 0
glcnt   = 0
mtries  = 0
d0      = 0
sc.verbose = False

DO
  glttl = glttl + 1
  glchs = glchs +1
  If glchs > 49 Then
    atrlock = 0
    Call Card_Reset
  End if
  katr=0
  mtries = mtries + 1
    if mtries = 5000 then
       call Card_Reset
       call RndGr()
       mtries = 0
    end if

    boot = 0
'********************************************************************************************************************
If Unloopchoice = 1 then
d1=224
D2=52
D3=8
D4=145
D5=606
D6=62
D7=30
D8=57
D9=866
end if
                                                                           glchs = 0
                                                                            chglch = 0
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
If Unloopchoice = 2 then
d1=248
D2=52
D3=9
D4=146
D5=606
D6=62
D7=30
D8=55
D9=860
                                                                                     glchs = 0
                                                                                     chglch = 0
end if
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
If Unloopchoice = 3 then
d1=251
D2=52
D3=9
D4=146
D5=606
D6=62
D7=30
D8=55
D9=860
                                                                                     glchs = 0
                                                                                     chglch = 0
end if
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
If Unloopchoice = 4 then    'Mod4 range
'vcc + last 2 glitch 4 bootloader
delay(400)
    D2 = INT(RND * &h00) + &h34      ' 52 -  52
    D3 = INT(RND * &h06) + &h06      '  6 -  12
    D4 = INT(RND * &h19) + &h86      '134 - 159
    D9 = INT(RND * &h0a) + &h35c     '860 - 869
'==========================================
' Atr glich point search range

    if atrlock = 0 then
        D7 = INT(RND * &h0)  + &h1e  ' 30 -  30
        D8 = INT(RND * &h04) + &h37  ' 55 -  59
        D1 = INT(RND * &h11) + &hd3  '211 - 228
        D5 = INT(RND * &h00) + &h25e '607 - 607
        D6 = INT(RND * &h01) + &h3e  ' 63 -  64

                                                                                     glchs = 0
                                                                                     chglch = 0
end if
End If
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 If Unloopchoice = 5 then  'Mod5 range
' ==============================================
'vcc + last 2 glitch 4 bootloader
D2 = INT(RND * &h05) + &h39 ' 57 -  61
D3 = INT(RND * &h04) + &h08 '  8 -  11
D4 = INT(RND * &h3A) + &h88 '136 - 196
D9 = INT(RND * &h06) + &h35D'861 - 866
'==========================================
' Atr glich point search range
if atrlock = 0 then
D7 = INT(RND * &h04) + &h1B  ' 27 -  30
D8 = INT(RND * &h03) + &h39  ' 57 -  59
D1 = INT(RND * &h1c) + &ha2  '160 - 189
D5 = &h25d                   '605     INT(RND * &h02) + &h25D '605 - 606
D6 = INT(RND * &h19) + &h38  ' 56 -  81
                                                                                     glchs = 0
                                                                                     chglch = 0
end if
End If
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
If Unloopchoice = 6 then 'RS1 range
D1=228
d2=52
d3=9
d4=134
d5=606
d6=62
d7=30
d8=58
d9=863

                                                                                     glchs = 0
                                                                                     chglch = 0
end if
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

If Unloopchoice = 8 then 'New FinalMod Fast
D1=228
d2=52
d3=9
d4=134
d5=606
d6=62
d7=30
d8=58
d9=863

glchs = 0
chglch = 0
        end if

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
if Unloopchoice = 9 then 'New FinalMod Medium
'==============================================
'vcc + last 2 glitch 4 bootloader
D2 = INT(RND * &h02) + &h39                   ' 57 -  58
D3 = INT(RND * &h03) + &h09                   '  9 -  11
Do
D4 = INT(RND * &h18) + &h89                   '137 - 160
Loop until D4 < &h92 or  D4 > &h97 and D4 < &hA1 '137 - 145, or 152 - 160
D9 = &h35d                    '861
'==========================================
' Atr glich point search range
if atrlock = 0 then
Do
D7 = INT(RND * &h04) + &h1B               ' 27 - 30
Loop Until D7 = &h1B or D7 = &h1E              ' 27 or 30
D8 = INT(RND * &h03) + &h39               ' 57 -  59
Do
D1 = INT(RND * &h06) + &hB7               '183 - 188
Loop Until D1 = &hB7 or D1 = &hBB or D1 = &hBC '183, or 187, or 188
D5 = &h25d '605
D6 = &h3f '63
glchs = 0
chglch = 0
end if
End If
'###################################################################################################################
'
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call ProgUpdate(kp,atrlock)
    call unlooper2settings()
Sc.Print "Stage 1,Sending Primary Packet, Please wait.............." & vbCr
    sc.verbose = 0
    sc.write("A1")
    delay(250)

    if Chk4Card() = 0 then
        BootCard=0
        Exit Function
    end if

    delay(250)

    sc.write("B0" & HexString(D1,02))
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")

    Sc.Read(&h02)

    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    if cnt = 1 then sc.read(1)
    end if

    if cter > 75 then
        glcnt = glcnt + 1
        if glcnt = 24 then
          glcnt = 0
          call RndGr()
        end if
        cter = 0
        atrlock = 0
    end if

    if cnt > 0 then
       kp=kp+1
       if kp >33 then kp = 33

         for b = 0 to 10
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         end if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
            if kk = &h38 then

               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                     ' GETBYTE(0))= &HB0
                      if(sc.getbyte(0)) = &hb0 then

                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit for
                       end if
                    end if
              end if
         end if


      next

      'sc.print VbCr & cter & VbCr
Sc.Print "Stage 1 Complete, Checking For Bootloader Activity, Please wait.............." & vbCr
    if katr = 1 then
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       'sc.delay(450)
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
       else
          cnt = 0
       end if

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c0602005A7042005590320" & HexString(D9,04) & "0d010000")
            'Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)

          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            end if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                Sc.Print "Pre-Boot was loaded, Verifying Activity, Please wait.............." & vbCr
                cnt = 0
                if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         sc.print VbCr & "Bootloader installed and active!" & VbCr
                         sc.print "After " & d0 & " tries to activate bootloader" & VbCr
                        ' Sc.Print "Final Values of D1-D9: " & HexString(D1,2) & ", " & HexString(D2,2) & ", " & HexString(D3,2) & ", " & HexString(D4,2) & ", " & HexString(D5,4) & ", " & HexString(D6,2) & ", " & HexString(D7,2) & ", " & HexString(D8,2) & ", " & HexString(D9,4) & vbCr
                         ScriptEnd = Now
                         Sc.Print "Elapsed time:  " + FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr
                         exit for
                      end if
                    end if
                 end if
             else
                exit for
          end if

         next

        if boot = 1 then
           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           BootCard=1
           Exit Function
         end if
       end if
     end if
   else
    kp=kp-1
    if kp<1 then kp=1
   end if
loop

End Function
'#####################################################################################################################



Sub UnlooperSettings()
    Wx.BaudRate=115200
    Wx.ResetBaudRate=115200
    Wx.Parity=0                  ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
    Wx.StopBits=0                ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
    Wx.DTRControl=0              ' Initial state of DTR  0 = off, 1 = on
    Wx.RTSControl=1              ' Initial state of RTS  0 = off, 1 = on
    Wx.ResetDelay=1000'9000'1200 4000          ' In microseconds
    Wx.ByteDelay=300'6000 '1200 4000           ' In microseconds
    Wx.RxByteTimeout=400         ' In milliseconds
    Wx.ResetMode=2               ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
    Wx.ResetLine=1               ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
    Wx.ByteConvention=1          ' 0 = Inverse, 1 = Direct
    Wx.FlushEchoByte=0           ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted.
    Wx.FlushBeforeWrite=0        ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes.
    Wx.IgnoreTimeouts=1          ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
    Wx.ResetAfterTimeout=0       ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout  - Not used if "IgnoreTimeouts=0"
    Wx.LogTransactions=0         ' 0 = Don't log transactions, 1 = log transactions
    Wx.DisplayUSW=0              ' Display USW after script complete 0 = no, 1 = yes
    Wx.DisplayFuse=0             ' Display Fuse after script complete 0 = no, 1 = yes
End Sub

Sub Unlooper2Settings()
    Wx.BaudRate=115200
    Wx.ResetBaudRate=115200
    Wx.Parity=0                  ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
    Wx.StopBits=0                ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
    Wx.DTRControl=0              ' Initial state of DTR  0 = off, 1 = on
    Wx.RTSControl=1              ' Initial state of RTS  0 = off, 1 = on
    Wx.ResetDelay=10'1200 4000          ' In microseconds
    Wx.ByteDelay=10 '1200 4000           ' In microseconds
    Wx.RxByteTimeout=400         ' In milliseconds
    Wx.ResetMode=2               ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
    Wx.ResetLine=1               ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
    Wx.ByteConvention=1          ' 0 = Inverse, 1 = Direct
    Wx.FlushEchoByte=0           ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted.
    Wx.FlushBeforeWrite=0        ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes.
    Wx.IgnoreTimeouts=1          ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
    Wx.ResetAfterTimeout=0       ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout  - Not used if "IgnoreTimeouts=0"
    Wx.LogTransactions=0         ' 0 = Don't log transactions, 1 = log transactions
    Wx.DisplayUSW=0              ' Display USW after script complete 0 = no, 1 = yes
    Wx.DisplayFuse=0             ' Display Fuse after script complete 0 = no, 1 = yes
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ProgUpdate(pg,atrlock)

    Dim i
    Dim Msg
    Dim ElapTime

    Msg="Responce Indicator" + vbTab + "           Elapsed Time: " + FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) + " minutes"

    if atrlock = 1 then
      Msg=Msg+VbCr+VbCr+"Accessing..stand by...."
    else
      Msg=Msg+VbCr+VbCr+"Attempting To Access Rom....Please Stand By."
    end if

    Call Sc.ProgressBox(Msg,pg,33,"The Crusaider Rom Reader/Writer")

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Chk4Card()

    Dim tmp
    sc.write("80")
    sc.delay(10)
      if sc.read(1) = 1 then
    tmp=sc.getbyte(0)
    If tmp = &h0 then
        Chk4Card=0
        sc.write("A0")
        Call Sc.ProgressBox(0,0,0,0)
        call Sc.PlaySound("error.wav")
        sc.MsgBox("Card Removed, Process Ended Prematurely")
    else
        Chk4Card=1
    end if
  end if

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function ChipVer()

    ChipVer = 1

    sc.write("90")
    delay(80)

    if sc.read(4) <> 4 then
        ChipVer = 0
        Exit Function
    end if

    if getbyte(0) <> &h55 then ChipVer = 0
    if getbyte(1) <> &h4c then ChipVer = 0
    if getbyte(2) <> &h34 then ChipVer = 0
    if getbyte(3) <> &h53 then ChipVer = 0

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function ReadInfo()

'This function taken from ATRDump by Testies
'Modified by Snap to Show the Deci and Hexi Codes instead of only one.

    Dim CAMIDHex
    Dim CAMIDDec
    Dim USWHex
    Dim USWDec
    Dim DSWHex
    Dim DSWDec
    Dim GuideHex
    Dim GuideDec
    Dim TimeHex
    Dim TimeDec
    Dim RatingHex
    Dim RatingDec
    Dim SpendingLimitHex
    Dim SpendingLimitDec
    Dim infobox
    Dim actyear
    Dim actmonth
    Dim ActDateHex
    Dim ActDateDec
    Dim PPVLimitHex
    Dim PPVLimitDec
    Dim SpentHex
    Dim SpentDec
    Dim Fuse
    Dim IRDHex
    Dim IRDDec
    Dim RetValue
    Dim ATR

    Sc.Write("0B 1A 0E10 C4 48 2A 00 00 80 BF 00")
    Sc.Delay(80)
    Sc.Read(&h02)                                       ' see if command was accepted
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)                              ' read the 0 - 63 bytes returned by Ins2A

    ' Assign important parts of returned from Ins2A data here

    USWHex = HexString(GetByte(29), 2) & HexString(GetByte(30), 2)
    USWDec = HexToDec(USWHex)
    If Len(USWDec) < 4 Then
        USWDec = "000" & USWDec
    End If

    DSWHex = HexString(GetByte(33), 2) & HexString(GetByte(34), 2)
    DSWDec = HexToDec(DSWHex)
    If Len(DSWDec) < 4 Then
        DSWDec = "000" & DSWDec
    End If

    RatingHex = HexString(GetByte(11), 2)
    RatingDec = HexToDec(RatingHex)
    If len(RatingDec) = 1 Then
        RatingDec = "0" & RatingDec
    End If

    SpendingLimitHex = HexString(GetByte(12), 2) & HexString(GetByte(13), 2)
    SpendingLimitDec = "$" & Int(HexToDec(SpendingLimitHex)/100)

    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    If ActDateHex = "0000" Then
        ActDateDec = "Not Active"
    Else
        ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
        ActYear = 2000 + Left(((GetByte(14)-95) / 12 * 100),1)
        ActMonth = Round((Right(Int((((GetByte(14) - 95)/12))*100),2)/100)*12)
        ActDateDec = ActMonth & "." & GetByte(15) & "." & ActYear
    End If

    Fuse = HexString(GetByte(1), 2) & HexString(GetByte(1) XOR &hFF,2)

    IRDHex = Hexstring(GetByte(21) XOR GetByte(25),2) & Hexstring(GetByte(22) XOR GetByte(26),2) & Hexstring(GetByte(23) XOR GetByte(27),2) & Hexstring(GetByte(24) XOR GetByte(28),2)
    If Len(IRDHex) <= 4 Then
        IRDHex = "0000" & IRDHex
    End If

    IRDDec = HexToDec(IRDHex)
    If IRDDec <= 1 Then
        IRDDec = "0000000" & IRDDec
    End If

    ' 02 = 2 bytes to follow
    ' BF = read next 64 bytes from card
    ' 00 = execute above

    Sc.Write("02BF00")
    Sc.Delay(80)
    Sc.Read(&h02)                                   ' see if command was accepted
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)                          ' read 64 - 127 more bytes of 131 returned from Ins2A

    PPVLimitHex = HexString(Sc.GetByte(23), 2) & HexString(Sc.GetByte(24), 2)
    PPVLimitDec = "$" & Int(HexToDec(PPVLimitHex)/100)
    SpentHex = HexString(Sc.GetByte(21), 2) & HexString(Sc.GetByte(22), 2)
    SpentDec = "$" & Int(HexToDec(SpentHex)/100)

    Sc.Write("028200")
    Sc.Delay(80)
    Sc.Read(&h02)                                   ' see if command was accepted
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)                          ' read the final 3 bytes 128 - 130 of Ins2A

    ' 08 = 8 bytes to follow
    ' C4 = send next 5 bytes to card
    ' 48 58 00 00 17 = Ins58 Send Card Info Command
    ' 9B = Read 28 bytes from card
    ' 00 = Execute above
    Sc.Write("08C448580000179B00")
    Sc.Delay(80)
    Sc.Read(&h02)                                   ' see if command was accepted
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)                          ' read bytes 0 - 25 bytes returned by Ins58

    CAMIDHex = HexString(GetByte(2), 2) & HexString(GetByte(3), 2) & HexString(GetByte(4), 2) & HexString(GetByte(5), 2)
    CAMIDDec = HexToDec(CAMIDHex) & "x"

    ' Assign important pieces of information from Ins58 command
    GuideHex = HexString(Sc.GetByte(13), 2)
    GuideDec = HexToDec(GuideHex)
    If GuideDec = 0 Then
        GuideDec = "00"
    End If

    TimeHex = HexString(Sc.GetByte(11), 2)
    TimeDec = HexToDec(TimeHex)

    ' Print all info here
    ATR = ShowAtr(2)
    infobox = ""
    infobox = "ATR  : " & ATR & vbCrLf & vbcrlf
    infobox = infobox & "Card Information"  & vbtab & vbtab & "Hex" & vbtab & vbtab &"Decimal" & vbCr
    infobox = infobox & "------------------------------------------------------------------------------------" & vbCr
    infobox = infobox & "Card ID(CAM)" & vbtab & vbtab & CAMIDHex & vbtab & CAMIDDec & vbCr
    infobox = infobox & "IRD ID"  & vbtab & vbtab & vbtab & IRDHex & vbtab & IRDDec & vbCr
    infobox = infobox & "Fuse Byte"  & vbtab & vbtab & vbtab & Fuse & vbtab & vbtab & HexToDec(Fuse) & vbCr
    infobox = infobox & "Guide Byte"  & vbtab & vbtab & GuideHex & vbtab & vbtab & GuideDec & vbCr
    infobox = infobox & "Time Zone"  & vbtab & vbtab & TimeHex & vbtab & vbtab & HexToDec(TimeHex) & vbCr
    infobox = infobox & "Rating"  & vbtab & vbtab & vbtab & RatingHex & vbtab & vbtab & RatingDec & vbCr
    infobox = infobox & "USW"  & vbtab & vbtab & vbtab & USWHex & vbtab & vbtab & USWDec & vbCr
    infobox = infobox & "DSW"  & vbtab & vbtab & vbtab & DSWHex & vbtab & vbtab & DSWDec & vbCr
    infobox = infobox & "Activation Date"  & vbtab & vbtab & ActDateHex & vbtab & vbtab & ActDateDec & vbCr
    infobox = infobox & "PPV Spending Limit"  & vbtab & vbtab & PPVLimitHex & vbtab & vbtab & PPVLimitDec & vbCr
    infobox = infobox & "Amount Purchased"  & vbtab & vbtab & SpentHex & vbtab & vbtab & SpentDec & vbCr
    infobox = infobox & "User Spending Limit"  & vbtab & vbtab & SpendingLimitHex & vbtab & vbtab & SpendingLimitDec & vbCr
    infobox = infobox & "-------------------------------------------------------------------------------" & vbCrLf
    Call Sc.Msgbox (infobox)
    ReadInfo = 1

End Function

'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub Unloop_Range
dim MenuPrompt3
call Sc.PlaySound("place.wav")
    Do
        MenuPrompt3 = "                          Which glitch range would you like to use to gain access to the card?" & vbCrLf & vbCrLf
        MenuPrompt3 = MenuPrompt3 & "                                               Please choose from the following choices:" & vbCrLf
        Unloopchoice = Sc.ButtonBox(MenuPrompt3, 0, "Glitch Range 1", "D1=167-190", "Commercial", "D1=248", "D1=251", "More")

        Select Case Unloopchoice
            Case "1"
            Case "2"
            Case "3"
            Case "4"
            Case "5"

            Case Else
                MenuPrompt3 = "Invalid Input!" & vbCrLf
        End Select

    Loop until Unloopchoice > 0 And Unloopchoice < 6
    If Unloopchoice = 1 then Unloopchoice = 6
    If Unloopchoice = 2 then Unloopchoice = 1
    If Unloopchoice = 3 then Unloopchoice = 2
    If Unloopchoice = 4 then Unloopchoice = 3
    If Unloopchoice = 5 then Call Unloop_Range2
    End Sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub Unloop_Range2
dim MenuPrompt4
    Do
        MenuPrompt4 = "                                Which glitch range would you like to use to gain access to the card?" & vbCrLf & vbCrLf
        MenuPrompt4 = MenuPrompt4 & "                                               Please choose from the following choices:" & vbCrLf
        Unloopchoice = Sc.ButtonBox(MenuPrompt4, 0, "Glitch Range", "Hard To Read", "Disabled", "D1=228", "RS GRP Search", "exit")

        Select Case Unloopchoice
            Case "1"
            Case "2"
            Case "3"
            Case "4"
            Case "5"

            Case Else
                MenuPrompt4 = "Invalid Input!" & vbCrLf
        End Select

    Loop until Unloopchoice > 0 And Unloopchoice < 6

    If Unloopchoice = 1 then Unloopchoice = 4
    If Unloopchoice = 2 then Unloopchoice = 5
    If Unloopchoice = 3 then Unloopchoice = 8
    If Unloopchoice = 2 then Unloopchoice = 9
    If Unloopchoice = 5 then Unloopchoice = 7
    End sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################

Sub Read_Write_Clean_Aborted()
    Sc.MsgBox("Function aborted !!!")
End Sub

Sub Card_Reset()
    Dim RetVal
    Sc.Write("A0")     ' Turn the LED off if it is on
    Sc.Write("020200") ' Power down the card
    Sc.Delay(1000)     ' Wait about 1 second
    Call Sc.Reset()    ' Power up the card
    RetVal=Sc.Flush()  ' Flush the receive buffer
End Sub


Sub UnMarryIRD()
    Sc.Write("A2")
    Call ExtractCardInfo()
    Call Sc.ProgressBox ("UnMarrying Card...", 1, 1, "REPAIR UTILITY")
    Call WriteViaLoader("24A4","00000000","E")    ' Clear IRD # From Location 1
    Call WriteViaLoader("2460","00000000","E")    ' Clear IRD # From Location 2

       Sc.Print "Card is now unmarried!!!" & VbCr
       Call Sc.ProgressBox ("", 0, 0, "")
End Sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'######THE FOLLOWING WAS USED FROM A SCRIPT CALLED CUSTOM GLITCHER#################################################
'#I THINK IT WAS WRITTEN BY SOME DUDE FROM DSSISLANDS##############################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
sub custom()

    Const dss_DefaultButton1 = 0
    Const dss_DefaultButton2 = 256
    Const dss_DefaultButton3 = 512
    Const fsoError = -1
    Const fsoOpenRead = 0
    Const fsoOpenWrite = 1
    Const fsoOpenReadWrite = 2
    Const fsoSEEK_SET = 0
    Const fsoSEEK_CUR = 1
    Const fsoSEEK_END = 2
    Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"
    Const ConfigFileFilter = ".txt (*.txt)"

    Dim OutFile
    Dim InFile
    Dim HUBinFile
    Dim ZipCode
    Dim Guide
    Dim HexZipCode1
    Dim HexZipCode2
    Dim HexZipCode3
    Dim HexTimeZone
    Dim DefaultTZButton
    Dim DefaultDaylightButton
    Dim TimeZone
    Dim Daylight
    Dim CodeProtection
    Dim ScriptStart
    Dim ScriptEnd
    Dim ErrorString
    Dim Choice
    Dim PromptString
    Dim RetVal
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Password

    Sc.Verbose = 0

    If Sc.Version < 4.5 Then
        ErrorString = "You need version 4.5 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
        End If

    if ChipVer <> 1 then
        sc.MsgBox("You need chip version UL4S to run this script" & VbCr & "Flash your chip with the Included UL4S code")
        Exit Sub
     end if
dim MenuPrompt5
Do
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################

MenuPrompt5 = "WARNING!!!PLEASE READ AND UNDERSTAND BEFORE YOU CONTINUE!!" & vbCrLf & vbCrLf & "Both Read/Write functions will attempt to gain entry by way of ROM Glitch" & vbCrLf & "When you select either of these options you will HAVE to select a config file." & vbCrLf & "This config file contains all of the information needed to try and gain entry into the card." & vbCrLf & "You have been sent 4 premade config files with this script" & vbCrLf & "These settings are based on the Original UL4S Mods ie. Standard, Alt 1, 2, 3." & vbCrLf & "DO NOT USE THESE SETTINGS UNLESS YOU KNOW THEY WORK FOR YOUR CARD!!" & vbCrLf & vbCrLf & "It is advised that you make your own custom file." & vbCrLf & "To do this use the make file function." & vbCrLf & "You will have to enter in your own D1 - D9 values." & vbCrLf & "You will be expected to enter these values in HEX Value." & vbCrLf & "You must also be prepared to give BOTH of them for each setting, the high and the low!" & vbCrLf & vbCrLf & "Please choose from the following Custom choices:" & vbCrLf

    Choice = Sc.ButtonBox(MenuPrompt5, 0,"Dss Nation's Crusaider Custom DAC Functions" ,  "Read", "Write", "Make File", "Exit")

    Select Case Choice

    Case "1"
        Call Script1()'READ CARD

    Case "2"
        Call Script2()'WRITE(UNLOOP)
    Case "3"
        call script3()'MAKE A CUSTOM SETTINGS FILE

    Case "4", ""
        Exit Sub
        Case Else
            MenuPrompt5 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True

End sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################

Sub Script1
    Dim ErrorString
    Dim MenuPrompt6
    Dim Choice
    Dim PromptString
    Dim RetVal
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Password

    Sc.Verbose = 0

    If Sc.Version < 4.5 Then
        ErrorString = "You need version 4.5 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
        End If

    if ChipVer <> 1 then
        sc.MsgBox("You need chip version UL4S to run this script" & VbCr & "Flash your chip with the Included UL4S code")
        Exit Sub
     end if


     RetVal = 3
     call IsCardPresent()

    if(BootCardCUSTOM())= 1 then
            call Sc.PlaySound("trumpet1.wav")
            Call GetFileName()
            Call ReadCard()

          else
            Fs.FileClose(InFile)
          end if
END SUB
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub Script3()

 dim ConfigFileName2
 dim ConfigOutFile
 dim DValues, test, test2
 dim ZD1L,ZD1R,ZD2L,ZD2R,ZD3L,ZD3R,ZD4L,ZD4R,ZD5L,ZD5R,ZD6L,ZD6R,ZD7L,ZD7R,ZD8L,ZD8R,ZD9L,ZD9R

    ConfigFileName2 = Fs.FileSaveDialog(ConfigFileFilter, "Please select a name for the new config file", "Default.txt")
    If ConfigFileName2 <> "" Then
        ConfigOutFile = Fs.FileCreate(ConfigFileName2)

    ZD1L = Sc.InputBox("Enter D1 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD1R = Sc.InputBox("Enter D1 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD2L = Sc.InputBox("Enter D2 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD2R = Sc.InputBox("Enter D2 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD3L = Sc.InputBox("Enter D3 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD3R = Sc.InputBox("Enter D3 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD4L = Sc.InputBox("Enter D4 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD4R = Sc.InputBox("Enter D4 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD5L = Sc.InputBox("Enter D5 Low - 4 bytes", "Enter Custom Glitch Values","")
    ZD5R =Sc.InputBox("Enter D5 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD6L = Sc.InputBox("Enter D6 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD6R =Sc.InputBox("Enter D6 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD7L =Sc.InputBox("Enter D7 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD7R = Sc.InputBox("Enter D7 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD8L =Sc.InputBox("Enter D8 Low - 2 bytes", "Enter Custom Glitch Values","")
    ZD8R =Sc.InputBox("Enter D8 Range - 2 bytes", "Enter Custom Glitch Values","")
    ZD9L = Sc.InputBox("Enter D9 Low - 4 bytes", "Enter Custom Glitch Values","")
    ZD9R = Sc.InputBox("Enter D9 Range - 2 bytes", "Enter Custom Glitch Values","")

    DValues = ZD1L & ZD1R & ZD2L & ZD2R & ZD3L & ZD3R & ZD4L & ZD4R & ZD5L & ZD5R & ZD6L & ZD6R & ZD7L & ZD7R & ZD8L & ZD8R & ZD9L & ZD9R

    for test = 1 to 40
        test2=mid(DValues,test,1)
        sc.print test2
      '  sc.print Convert2(test2)
       call  Fs.FilePutc(ConfigOutFile,Convert2(test2))
    next
    sc.print vbCrLf
    End if
 Fs.FileClose(ConfigOutFile)
end sub

Sub GetFileName()
    Dim FileName

    FileName = Fs.FileSaveDialog(FileFilter, "Please select a name for the new bin file", "Default.bin")
    If FileName <> "" Then
        OutFile = Fs.FileCreate(FileName)
    end if
end sub

Sub GetConfigFile()
    Dim ConfigFileName3
    DIM ConfigInFile

    ConfigFileName3 = Fs.FileOpenDialog(ConfigFileFilter, "Please select a valid HU Glitching Configuration file", "Default.txt")
    If ConfigFileName3 <> "" Then
        If Fs.FileExists(ConfigFileName3) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            ConfigInFile = Fs.FileOpen(ConfigFileName3, fsoOpenRead)
        End If
    End If

end sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Function Convert(ConvertVar)
    If ConvertVar >47 and ConvertVar <58 then
        Convert = Convertvar - 48
    Else
        If ConvertVar = 65 then Convert = "A"
        If ConvertVar = 66 then Convert = "B"
        If ConvertVar = 67 then Convert = "C"
        If ConvertVar = 68 then Convert = "D"
        If ConvertVar = 69 then Convert = "E"
        If ConvertVar = 70 then Convert = "F"
    End if
End Function

Function Convert2(ConvertVar2)
    If ConvertVar2 = "1" then Convert2 = 49
    If ConvertVar2 = "2" then Convert2 = 50
    If ConvertVar2 = "3" then Convert2 = 51
    If ConvertVar2 = "4" then Convert2 = 52
    If ConvertVar2 = "5" then Convert2 = 53
    If ConvertVar2 = "6" then Convert2 = 54
    If ConvertVar2 = "7" then Convert2 = 55
    If ConvertVar2 = "8" then Convert2 = 56
    If ConvertVar2 = "9" then Convert2 = 57
    If ConvertVar2 = "0" then Convert2 = 48
    If ConvertVar2 = "A" then Convert2 = 65
    If ConvertVar2 = "B" then Convert2 = 66
    If ConvertVar2 = "C" then Convert2 = 67
    If ConvertVar2 = "D" then Convert2 = 68
    If ConvertVar2 = "E" then Convert2 = 69
    If ConvertVar2 = "F" then Convert2 = 70
END FUNCTION
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub Script2()
    Dim ErrorString
    Dim MenuPrompt7
    Dim Choice
    Dim PromptString
    Dim RetVal
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Password

    Sc.Verbose = 0

    If Sc.Version < 4.5 Then
        ErrorString = "You need version 4.5 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
        End If



    if ChipVer <> 1 then
        sc.MsgBox("You need chip version UL4S to run this script" & VbCr & "Flash your chip with the Included UL4S code")
        Exit Sub
     end if


     RetVal = 3
     call IsCardPresent()

    if(BootCardCUSTOM())= 1 then
            call Sc.PlaySound("trumpet1.wav")
            Call GetFile()
            Call WriteCard(32)

          else
            Fs.FileClose(InFile)
          end if
END SUB


Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function

Function Hex2Dec(HexNumber)

    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'THIS IS THE BOOT CARD WITH CUSTOM SETTINGS SCRIPT
Function BootCardCUSTOM()

    Dim d0,D1,D2,D3,D4,D5,D6,D7,D8,d9
    Dim D1L,D1R,D2L,D2R,D3L,D3R,D4L,D4R,D5L,D5R,D6L,D6R,D7L,D7R,D8L,D8R,D9L,D9R
    Dim cnt,b, RetVal, boot, kk,katr
    Dim atrlock,cter, glcnt, mtries,kp
    Dim ConfigFileName
    Dim ConfigInFile

    D1L=0
    D1R=0

    RANDOMIZE TIMER

    atrlock=0
    cter=0
    glcnt=0
    mtries = 0
    d0 = 0
    sc.verbose = False

'==============Get Config File===============
    ConfigFileName = Fs.FileOpenDialog(ConfigFileFilter, "Please select a Config File", "Default.txt")
    If ConfigFileName <> "" Then
        If Fs.FileExists(ConfigFileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            ConfigInFile = Fs.FileOpen(ConfigFileName, fsoOpenRead)
        End If
    End If

    D1L = Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D1R = Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D2L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D2R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D3L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D3R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D4L = Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D4R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D5L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D5R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D6L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D6R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D7L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D7R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D8L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D8R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D9L =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))
    D9R =  Hex2Dec(Convert(Fs.FileGetc(ConfigInFile)) & Convert(Fs.FileGetc(ConfigInFile)))

    Fs.FileClose(ConfigInFile)

DO
  katr=0
  mtries = mtries + 1
    if mtries = 5000 then
       call RndGr()
       mtries = 0
    end if
'delay(400)
    boot = 0
'==============================================
    D2 = INT(RND * D2R) + D2L
    D3 = INT(RND * D3R) +D3L
    D4 = INT(RND * D4R) + D4L
    D9 = INT(RND * D9R) + D9L
'==========================================
' Atr glich point search range

    if atrlock = 0 then
        D7 = INT(RND * D7R) + D7L
        D8 = INT(RND * D8R) + D8L
        D1 = INT(RND * D1R) + D1L
        D5 = INT(RND * D5R) + D5L
        D6 = INT(RND * D6R) + D6L
    end if


'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call ProgUpdate(kp,atrlock)
    call unlooper2settings()
Sc.Print "Stage 1,Sending Primary Packet, Please wait.............." & vbCr
    sc.verbose = 0
    sc.write("A1")
    delay(250)

    if Chk4Card() = 0 then
        BootCardcustom=0
        Exit Function
    end if

    delay(250)

    sc.write("B0" & HexString(D1,02))
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")

    Sc.Read(&h02)

    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    if cnt = 1 then sc.read(1)
    end if

    if cter > 75 then
        glcnt = glcnt + 1
        if glcnt = 24 then
          glcnt = 0
          call RndGr()
        end if
        cter = 0
        atrlock = 0
    end if

    if cnt > 0 then
       kp=kp+1
       if kp >33 then kp = 33

         for b = 0 to 10
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         end if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
            if kk = &h38 then

               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                     ' GETBYTE(0))= &HB0
                      if(sc.getbyte(0)) = &hb0 then

                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit for
                       end if
                    end if
              end if
         end if


      next

      'sc.print VbCr & cter & VbCr
Sc.Print "Stage 1 Complete, Checking For Bootloader Activity, Please wait.............." & vbCr
    if katr = 1 then
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       'sc.delay(450)
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
       else
          cnt = 0
       end if

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c0602005A7042005590320" & HexString(D9,04) & "0d010000")
            'Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)

          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            end if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                Sc.Print "Pre-Boot was loaded, Verifying Activity, Please wait.............." & vbCr
                cnt = 0
                if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         sc.print VbCr & "Bootloader installed and active!" & VbCr
                         sc.print "After " & d0 & " tries to activate bootloader" & VbCr
                         Sc.Print "Final Values of D1-D9: " & HexString(D1,2) & ", " & HexString(D2,2) & ", " & HexString(D3,2) & ", " & HexString(D4,2) & ", " & HexString(D5,4) & ", " & HexString(D6,2) & ", " & HexString(D7,2) & ", " & HexString(D8,2) & ", " & HexString(D9,4) & vbCr

                         ScriptEnd = Now
                         Sc.Print "Elapsed time:  " + FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr
                         exit for
                      end if
                    end if
                 end if
             else
                exit for
          end if

         next

        if boot = 1 then
           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           BootCardcustom=1
           Exit Function
         end if
       end if
     end if
   else
    kp=kp-1
    if kp<1 then kp=1
   end if
loop

End Function
'#####################################################################################################################

'#####################################################################################################################

Sub CardIsLooped ()
call Sc.PlaySound("error.wav")
Sc.MsgBox("Card is not returning an ATR." &VbCr & "The card may not be fully Inserted" & VbCr &" or the card contacts may be dirty." & VbCr & "If everything is ok then the card is looped"&VbCr& "You must Unloop the card before using this option ")

End Sub
'
'----------------------------
'Main Original Menu from vb1
'----------------------------
sub CrusaiderMenu()
dim MenuPrompt2
call Sc.PlaySound("openmenu.wav")
Do
MenuPrompt2 = "When using these functions you will be allowed to choose from a selection of D1-D9 values." & vbCrLf & "These values have been selected to be as flexable as possible" & vbCrLf & "But as always no two settings work best for different cards." & vbCrLf &  vbCrLf & "You can use the TEST GLITCH function to determine what settings work best with your Loader." & vbCrLf & "If you find that these pre-selected values do not work well for you, you will have to use the Custom Menu." & vbCrLf & vbCrLf & "When you select the custom function you will be able to create you own Custom Config file." & vbCrLf & "Then you will be able to use that file to Read/Write to your cards." & vbCrLf & "Please see the Custom menu function for more details." & vbCrLf & vbCrLf & "Please choose from the following menu choices:" & vbCrLf & vbCrLf
Choice = Sc.ButtonBox(MenuPrompt2, 0, "                                  DssNation's Crusaider Rom Reader/Writer", "Custom", "Read", "Write", "Test Glitch", "Exit")
Select Case Choice
'####################################################################################################################################################################################################################
Case "1"            'JUMP TO THE CUSTOM SETTINGS MENUE
call custom()
'####################################################################################################################################################################################################################
'#####################################################################################################################
'####################################################################################################################
Case "2"   'READ CARD
RetVal = 1
Call IsCardPresent()
If (GetATR = False) Then
RetVal=Sc.ButtonBox("This Card Is Already Looped!!!!"& VbCr &" Do You Want To Attempt To Read It Anyway?",  vbDefaultButton2 + vbQuestion, "                  ", "Yes", "No")
If RetVal = 3 then RetVal = 1
End if
If RetVal = 1 Then
HUBinfile = False
Call Unloop_Range
If Unloopchoice = 7 Then Exit Sub
If (BootCard())= 1 Then
call Sc.PlaySound("trumpet1.wav")
Call GetFileName()
Call unloopersettings()
Call ReadCard()
Else
Fs.FileClose(InFile)
exit sub
End If
End If
'#############################################################################################################################
Case "3", ""' Write Card

RetVal = 1
Call IsCardPresent()

HUBinfile = False
 Call Unloop_Range
 If Unloopchoice = 7 Then Exit Sub
 If (BootCard())= 1 Then
 call Sc.PlaySound("trumpet1.wav")
 Sc.Print VbCr & "Select a good eeprom bin to write to the card" & VbCr
 Call GetFile()
 If HUBinFile = True Then
 Call WriteCard(32)
 Else
 Fs.FileClose(InFile)
 exit sub
 End If
 End If
'###################################################################################################################
Case "4", ""      'Test Glitch
 Call IsCardPresent()
RetVal = 1
Call IsCardPresent()
If (GetATR = False) Then
RetVal=Sc.ButtonBox("This Card Is Already Looped!!!!"& VbCr &" Do You Want To Attempt To Test It Anyway?",  vbDefaultButton2 + vbQuestion, "                  ", "Yes", "No")
If RetVal = 3 then RetVal = 1
End if
If RetVal = 1 Then
 HUBinfile = False
 'call unloopersettings()
 Call Unloop_Range
 If Unloopchoice = 7 Then Exit Sub
 If (BootCard())= 1 Then
 Fs.FileClose(InFile)
 exit sub
 End If
 end if
'#############################################################################################################################

Case "5", ""       'Exit program
Exit Sub
Case Else
MenuPrompt2 = "Invalid Input!" & vbCrLf
End Select
Loop While True = True
End Sub


'**************************************************
'This is the Utilities Menu and Commands
'**************************************************
sub Utilities()
dim MenuPrompt8
call Sc.PlaySound("openmenu.wav")
Do
MenuPrompt8 = "                  Crusaider Card Utilities " & vbCrLf & vbCrLf
MenuPrompt8 = "Crusaider HU Card Utilities: (Make your choice from the Following):" & vbCrLf & vbCrLf & "UNLOCK CARD" & vbtab & "- Feature will unlock the 'Looped in ird' Dealer Locks (Only to be used on Known 'Looped in IRD' Cards)" & vbCrLf & "LOOP CARD" & vbtab & "- Feature will purposefully Loop your Card (Good for Stubborn Cards)" & vbCrLf & "CARD INFO" & vbtab & "- Feature will Display the ATR and it's Vital Statistics in Hex and Decimal Format" & vbCrLf & "MORE" & vbtab & vbtab & "- Feature for display of More HU Card Utilities" & vbCrLf & "EXIT" & vbtab & vbtab & "- Feature will Return you to the Main Crusaider Menu" & vbCrLf & vbCrLf & "Note about the unlock: Crusaider will attempt to go in and repair the EEProm of the Locked card. This will not disable the" & vbCrLf & "Lock, but once it is applied, you can Read/Write to the card using normal glitching with Crusaider or Extreme HU." & vbCrLf & "The current freeware locks only block the INS 4C. Use this ONLY on cards that have Been Locked/Looped in IRD."
MenuPrompt8 = MenuPrompt8 & "                      " & vbCrLf
    Choice = Sc.ButtonBox(MenuPrompt8, 0, "Crusaider HU Card Utilities Menu - Options Page #1 ", "Unlock Card", "LOOP Card", "Card Info", "More", "Exit")

'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Select Case Choice
    Case "1"
RetVal = 1
Call IsCardPresent()
If (GetATR = False) Then
RetVal=Sc.ButtonBox("This Card Is Acting If It Is LOOPED, Which It May Very Well Be, OR Just FAKING IT!!!!"& VbCr &" Do You Want To Attempt To Unlock It?",  vbDefaultButton2 + vbQuestion, "                  ", "Yes", "No")
If RetVal = 3 then RetVal = 1
End if
If RetVal = 1 Then
HUBinfile = False
Call Unloop_Range
If Unloopchoice = 7 Then Exit Sub
If (BootCard())= 1 Then
call Sc.PlaySound("trumpet1.wav")
Call unloopersettings()
call srbd()
Else
end if
end if
Case "2"

    RetVal =3
    call IsCardPresent()
    Call Loopcard()

    Case "3"
    call IsCardPresent()
    If (GetATR = False) Then
    Call CardIsLooped()
    Else
    Call ReadInfo()
    End If

    Case "4"
    Call Utilities2()

    Case "5", ""
        Exit Sub
        Case Else
            MenuPrompt8 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True

end sub

'*************************************************
'Modified and Working Show ATR Routines
'*************************************************
Function ShowAtr(displaytype)

    Dim cnt,tmp,b,Msg

    Msg="                                Unlooping results!!!!!"
    tmp=""

    sc.write("0610010E109300")

    if Sc.Read(&h02) > 1 then
        cnt = sc.getbyte(1)
    else
        cnt = 0
    end if

    if displaytype = 1 then
        tmp = "Card Unlooped Successfully after " & glttl & " total glitches to the card." & VbCr & VbCr & d0 & " bootload attempts were made to the card." & VbCr & VbCr & "Successfull D1 - D9 values used: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & VbCr & VbCr & VbCr & "Total time to write HU bin: " & FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr & VbCr & "ATR Returned:" & VbCr
    end if

    if cnt > 0 then
        cnt = sc.read(cnt)

    for b = 0 to cnt -1
      tmp=tmp & HexString(sc.getbyte(b),2) & " "
    next

    if displaytype = 1 then
      sc.print VbCr & tmp & VbCr
      cnt  = Sc.ButtonBox(tmp, 0, Msg, "Ok")
    else
    ShowAtr = tmp
    end if

    else
    tmp=""
    tmp=tmp+"Card did not return an ATR"+VbCr+"Try to unloop the card again"+VbCr
    tmp=tmp+"This happens sometimes when the card"+VbCr
    tmp=tmp+"doesn't take the eeprom write"
    cnt = Sc.ButtonBox(tmp, 0,Msg , "Ok")

    end if

End Function

'*************************************************
'Modified and Working LOOP Card Routines
'*************************************************
Sub LoopCard()
        Dim I
        Sc.Write("B0 80")
        For I = &hA0 To &hD0
        Call Sc.ProgressBox("Looping The Card", I-&h9F, &h30, "Please wait ...")
        Sc.Write("0a 01 20 04 94 09 20 00 " + Hex(I) + " 09 00")'
        Sc.Read(2)
        Sc.Delay (100)

        Next
        Call Sc.ProgressBox("",0,80,"")
end sub

'**************************************************
'This is the Settings Menu - Made for help/details
'**************************************************
sub SettingsMenu()
dim MenuPrompt9
call Sc.PlaySound("openmenu.wav")
Do
MenuPrompt9 = "The DSSNation Crusaider  will work with most every available Loader on the Market. The key is customization." & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Some Loaders require little to no modifications, while some require tweaking and tuning. Once you have configured your" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "loader to function properly, the DSS Nation Crusaider will find its way into even the Most Stubborn of cards. Based off of" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "current members reports, we have compiled this listing of known loaders and its best success Settings:" & vbCrLf & vbCrLf

MenuPrompt9 = MenuPrompt9 & "Loader Name" & vbtab & vbtab & vbtab & "DAC Setting" & vbtab & vbtab & vbtab & "Dip Settings" & vbtab & vbtab & vbtab & "Power Used" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "----------------------" & vbtab & vbtab & vbtab & "----------------------" & vbtab & vbtab & vbtab & "------------------------" & vbtab & vbtab & vbtab & "--------------------" & vbCrLf

MenuPrompt9 = MenuPrompt9 & "Three in One" & vbtab & vbtab & vbtab & "248/SEARCH" & vbtab & vbtab & vbtab & "2, 5, Down" & vbtab & vbtab & vbtab & "7.5 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Elvis T6" & vbtab & vbtab & vbtab & vbtab & "167 - 190" & vbtab & vbtab & vbtab & "2, 5, Down" & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Easybuy Loader" & vbtab & vbtab & vbtab & "251" & vbtab & vbtab & vbtab & vbtab & "No Dips Avail" & vbtab & vbtab & vbtab & "9  V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Absolute One" & vbtab & vbtab & vbtab & "167 - 190" & vbtab & vbtab & vbtab & "Dip 5 on" & vbtab & vbtab & vbtab & "7.5 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Detonator 2" & vbtab & vbtab & vbtab & "228" & vbtab & vbtab & vbtab & vbtab & "1, 2, 5, on" & vbtab & vbtab & vbtab & "9  V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Cobra Venom" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Kits Central 4" & vbtab & vbtab & vbtab & "248" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Barracuda USRT" & vbtab & vbtab & "248/167/190" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Ultimate Repair" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "HUPro Loader" & vbtab & vbtab & vbtab & "167 - 190" & vbtab & vbtab & vbtab & "2, 5, 6, Up" & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Omega 2" & vbtab & vbtab & vbtab & "167 - 190" & vbtab & vbtab & vbtab & "Dip 1 On" & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "USCT v2.90" & vbtab & vbtab & vbtab & "167/190/224" & vbtab & vbtab & vbtab & "2, 3, 4, Off" & vbtab & vbtab & vbtab & "7.5 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "500I Decryptor" & vbtab & vbtab & vbtab & "248" & vbtab & vbtab & vbtab & vbtab & "Dip 3 On" & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "T911 Loader" & vbtab & vbtab & vbtab & "248" & vbtab & vbtab & vbtab & vbtab & "2, 5, On" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "T7 Loader" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "1,2,5,6 On" & vbtab & vbtab & vbtab & "N/A" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Detonator UL" & vbtab & vbtab & vbtab & "ALL" & vbtab & vbtab & vbtab & vbtab & "All Down" & vbtab & vbtab & vbtab & "7.5 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Detonator XP" & vbtab & vbtab & vbtab & "248" & vbtab & vbtab & vbtab & vbtab & "2, 5, Down" & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Mikobu KAC" & vbtab & vbtab & vbtab & "Commercial" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt9 = MenuPrompt9 & "Generic T6" & vbtab & vbtab & vbtab & "Commercial" & vbtab & vbtab & vbtab & "2, 5, Down" & vbtab & vbtab & vbtab & "9 V" & vbCrLf &vbCrLf
MenuPrompt9 = MenuPrompt9 & "Make sure you check the forums for the Latest posted Results - www.dssnationforums.com"

Choice = Sc.ButtonBox(MenuPrompt9, 0, "Crusaider Settings - Details - Information - Page 1", "Page 2", "Exit to Menu")
Select Case Choice
    Case "1"
    Call SettingsMenu2()

    Case "2", ""
    Exit Sub
    Case Else
    MenuPrompt9 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True

end sub

'------------
'Leave Write Menu
'------------
Sub LeaveWriteMenu()
dim MenuPrompt11
do
MenuPrompt11 = "                                       DSSNations Exclusive Crusaider Rom Reader/Writer    " & vbCrLf
MenuPrompt11 = MenuPrompt11 & "                   Licensed for use to Members of the Nation by Primetime and Snapperhaed   " & vbCrLf
MenuPrompt11 = MenuPrompt11 & "                For Details on Operation, Technique, and Settings:  www.dssnationforums.com" & vbCrLf

    Choice = Sc.ButtonBox(MenuPrompt11, 0,"The Crusaider Rom Reader/Writer" ,  " The Crusaider ", " Card Utilities ", " Settings ", "Alt Crusaider", " Exit " )

    Select Case Choice

    Case "1"
        Call CrusaiderMenu()

    Case "2"
       Call utilities()
    Case "3"
       Call SettingsMenu()
    Case "4"
       'Exit Sub
       call ps2menu()
    Case "5", ""
        Exit Sub
        Case Else
            MenuPrompt11 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True
End sub
'----------------
'EEProm Done Menu
'----------------

'------------
'Leave Write Menu
'------------
Sub eepromwritten()
dim MenuPrompt12
do
MenuPrompt12 = "EEprom has been Successfully Written." & vbCrLf & vbCrLf

    Choice = Sc.ButtonBox(MenuPrompt12, 0,"EEprom Write has been Completed." ,  " Return " )

    Select Case Choice

    Case "1", ""
        Exit Sub
        Case Else
            MenuPrompt11 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True
End sub
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Function ps2BootCard()
Dim cnt, b, RetVal, boot, kk, katr
Dim atrlock, cter, glcnt, mtries, kp
ScriptStart = Now
RANDOMIZE TIMER
glttl   = 0 'total glitches to card
atrlock = 0
cter    = 0
glcnt   = 0
mtries  = 0
d0      = 0
sc.verbose = False

DO
  glttl = glttl + 1
  glchs = glchs +1
  If glchs > 49 Then
    atrlock = 0
    Call Card_Reset
  End if
  katr=0
  mtries = mtries + 1
    if mtries = 5000 then
       call Card_Reset
       call RndGr()
       mtries = 0
    end if

    boot = 0
'********************************************************************************************************************
  If Unloopchoice = 1 then       'RS2 range
D1 = 169
D2 = 57
D3 = 10
D4 = 162
D5 = 605
D6 = 66
D7 = 30
D8 = 59
D9 = 866' { 0.17 minutes }


                                                                            glchs = 0
                                                                            chglch = 0
        end if



    If Unloopchoice = 2 then      'RS3 range
D1 = 172
D2 = 58
D3 = 9
D4 = 140
D5 = 605
D6 = 66
D7 = 30
D8 = 59
D9 = 864 '{ 0.57 minutes }


                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 3 then    'RS4 range
D1 = 178
D2 = 58
D3 = 11
D4 = 150
D5 = 605
D6 = 66
D7 = 30
D8 = 58
D9 = 862 '{ 0.82 minutes }


                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 4 then    'Mod4 range
D1 = 182
D2 = 58
D3 = 10
D4 = 145
D5 = 605
D6 = 67
D7 = 30
D8 = 58
D9 = 861 '{ 0.22 minutes }
                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 5 then  'Mod5 range
D1 = 185
D2 = 57
D3 = 10
D4 = 155
D5 = 605
D6 = 65
D7 = 30
D8 = 57
D9 = 863 '{ 5.25 minutes }

                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 6 then 'RS1 range 169
D1 = 169
D2 = 58
D3 = 9
D4 = 148
D5 = 605
D6 = 66
D7 = 30
D8 = 57
D9 = 863 '{ 0.25 minutes }


                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 8 then 'New FinalMod Fast
D1 = 185
D2 = 57
D3 = 10
D4 = 155
D5 = 605
D6 = 65
D7 = 30
D8 = 57
D9 = 863 '{ 5.25 minutes }
                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


    If Unloopchoice = 9 then 'New FinalMod Medium
D1 = 189
D2 = 57
D3 = 10
D4 = 155
D5 = 605
D6 = 65
D7 = 30
D8 = 57
D9 = 863 '{ 5.25 minutes }
                                                                                     glchs = 0
                                                                                     chglch = 0
        end if


'###################################################################################################################
'
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
call ProgUpdate(kp,atrlock)
    call unlooper2settings()
Sc.Print "Stage 1,Sending Primary Packet, Please wait.............." & vbCr
    sc.verbose = 0
    sc.write("A1")
    delay(250)

    if Chk4Card() = 0 then
        ps2BootCard=0
        Exit Function
    end if

    delay(250)

    sc.write("B0" & HexString(D1,02))
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")

    Sc.Read(&h02)

    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    if cnt = 1 then sc.read(1)
    end if

    if cter > 75 then
        glcnt = glcnt + 1
        if glcnt = 24 then
          glcnt = 0
          call RndGr()
        end if
        cter = 0
        atrlock = 0
    end if

    if cnt > 0 then
       kp=kp+1
       if kp >33 then kp = 33

         for b = 0 to 10
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         end if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
            if kk = &h38 then

               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                     ' GETBYTE(0))= &HB0
                      if(sc.getbyte(0)) = &hb0 then

                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit for
                       end if
                    end if
              end if
         end if


      next

      'sc.print VbCr & cter & VbCr
Sc.Print "Stage 1 Complete, Checking For Bootloader Activity, Please wait.............." & vbCr
    if katr = 1 then
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       'sc.delay(450)
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
       else
          cnt = 0
       end if

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c0602005A7042005590320" & HexString(D9,04) & "0d010000")
            'Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)

          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            end if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                Sc.Print "Pre-Boot was loaded, Verifying Activity, Please wait.............." & vbCr
                cnt = 0
                if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         sc.print VbCr & "Bootloader installed and active!" & VbCr
                         ScriptEnd = Now
                         sc.print "After " & d0 & " tries to activate bootloader" & VbCr
                       '  Sc.Print "Final Values of D1-D9: " & HexString(D1,2) & ", " & HexString(D2,2) & ", " & HexString(D3,2) & ", " & HexString(D4,2) & ", " & HexString(D5,4) & ", " & HexString(D6,2) & ", " & HexString(D7,2) & ", " & HexString(D8,2) & ", " & HexString(D9,4) & vbCr
                         Sc.Print "Elapsed time:  " + FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr
                         exit for
                      end if
                    end if
                 end if
             else
                exit for
          end if

         next

        if boot = 1 then
           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           ps2BootCard=1
           Exit Function
         end if
       end if
     end if
   else
    kp=kp-1
    if kp<1 then kp=1
   end if
loop

End Function
'#####################################################################################################################


'#####################################################################################################################
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub ps2Range
dim menupromptz
call Sc.PlaySound("place.wav")
    Do
        MenuPromptz = "                          Which glitch range would you like to use to gain access to the card?" & vbCrLf & vbCrLf
        MenuPromptz = MenuPromptz & "                                               Please choose from the following choices:" & vbCrLf
        Unloopchoice = Sc.ButtonBox(MenuPromptz, 0, "Crusaider Alternate Glitch Ranges", "1", "2", "3", "4", "More")

        Select Case Unloopchoice
            Case "1"
            Case "2"
            Case "3"
            Case "4"
            Case "5"

            Case Else
                MenuPromptz = "Invalid Input!" & vbCrLf
        End Select

    Loop until Unloopchoice > 0 And Unloopchoice < 6
    If Unloopchoice = 1 then Unloopchoice = 6
    If Unloopchoice = 2 then Unloopchoice = 1
    If Unloopchoice = 3 then Unloopchoice = 2
    If Unloopchoice = 4 then Unloopchoice = 3
    If Unloopchoice = 5 then Call ps2Range2
    End Sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
Sub ps2Range2
dim menupromptX
    Do
        MenuPromptX = "                                Which glitch range would you like to use to gain access to the card?" & vbCrLf & vbCrLf
        MenuPromptx = MenuPromptx & "                                               Please choose from the following choices:" & vbCrLf
        Unloopchoice = Sc.ButtonBox(MenuPromptx, 0, "S R Crusaider Alternate Glitch Ranges", "5", "Disabled", "6", "7", "exit")

        Select Case Unloopchoice
            Case "1"
            Case "2"
            Case "3"
            Case "4"
            Case "5"

            Case Else
                MenuPromptx = "Invalid Input!" & vbCrLf
        End Select

    Loop until Unloopchoice > 0 And Unloopchoice < 6

    If Unloopchoice = 1 then Unloopchoice = 4
    If Unloopchoice = 2 then Unloopchoice = 5
    If Unloopchoice = 3 then Unloopchoice = 8
    If Unloopchoice = 2 then Unloopchoice = 9
    If Unloopchoice = 5 then Unloopchoice = 7
    End sub
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
'##################################################################################################################
sub ps2Menu()
call Sc.PlaySound("openmenu.wav")
dim MenuPrompt100
dim MenuPrompt100a
Do
MenuPrompt100 = "When using these settings the dac values that will be used are randomly selected from different cards with different loaders" & vbCrLf & "They were used as a first step in making a Rom Reader that is more compatable with a wider variety of loaders." & vbCrLf & "All of the D1 settings used in this menu will never exceed 200, so if the normal D1 of your cards range falls below 200 this script is for you.." & vbCrLf & "Option 1 has the lowest D1 setting with Option 7 being the highest(200)." & vbCrLf & "" & vbCrLf & vbCrLf & "This Menu will most likely be expanded in the future." & vbCrLf & "With detailed feedback from our members we hope to have this perfected shortly." & vbCrLf & "Until then use EXTREME caution when using this feature." & vbCrLf & vbCrLf & "The Freeware Option is the Recently released 'SR71 Decrypted' for your review and or testing." & vbCrLf & vbCrLf & "Please choose from the following menu choices:" & vbCrLf & vbCrLf
Choice = Sc.ButtonBox(MenuPrompt100, 0, "DssNation's Crusaider Alternate Rom Reader/Writer", "Freeware", "Read", "Write", "Test Glitch", "Exit")
Select Case Choice
'####################################################################################################################################################################################################################
Case "1"            'JUMP TO THE CUSTOM SETTINGS MENUE
call LeakWareMain()
'####################################################################################################################################################################################################################
'#####################################################################################################################
'####################################################################################################################
Case "2"   'READ CARD
RetVal = 1
Call IsCardPresent()
If (GetATR = False) Then
RetVal=Sc.ButtonBox("This Card Is Already Looped!!!!"& VbCr &" Do You Want To Attempt To Read It Anyway?",  vbDefaultButton2 + vbQuestion, "                  ", "Yes", "No")
If RetVal = 3 then RetVal = 1
End if
If RetVal = 1 Then
HUBinfile = False
'call unloopersettings()
Call ps2Range
If Unloopchoice = 7 Then Exit Sub
If (ps2BootCard())= 1 Then
call Sc.PlaySound("trumpet1.wav")
Call GetFileName()
Call unloopersettings()
Call ReadCard()
Else
Fs.FileClose(InFile)
exit sub
End If
End If
'#############################################################################################################################
Case "3", ""' Write Card

RetVal = 1
Call IsCardPresent()

HUBinfile = False
 Call ps2Range
 If Unloopchoice = 7 Then Exit Sub
 If (ps2BootCard())= 1 Then
 call Sc.PlaySound("trumpet1.wav")
 Sc.Print VbCr & "Select a good eeprom bin to write to the card" & VbCr
 Call GetFile()
 If HUBinFile = True Then
 Call WriteCard(32)
 Else
 Fs.FileClose(InFile)
 exit sub
 End If
 End If
'###################################################################################################################
Case "4", ""      'Test Glitch
 Call IsCardPresent()
RetVal = 1
Call IsCardPresent()
If (GetATR = False) Then
RetVal=Sc.ButtonBox("This Card Is Already Looped!!!!"& VbCr &" Do You Want To Attempt To Test It Anyway?",  vbDefaultButton2 + vbQuestion, "                  ", "Yes", "No")
If RetVal = 3 then RetVal = 1
End if
If RetVal = 1 Then
 HUBinfile = False
 'call unloopersettings()
 Call ps2Range
 If Unloopchoice = 7 Then Exit Sub
 If (ps2BootCard())= 1 Then
 Fs.FileClose(InFile)
 exit sub
 End If
 end if
'#############################################################################################################################

Case "5", ""       'Exit program
Exit Sub
Case Else
MenuPrompt2 = "Invalid Input!" & vbCrLf
End Select
Loop While True = True
End Sub

'----------------------------------------
'New Mods from 8-09-2002 by Snapperhaed
'----------------------------------------
'----------------------------------------
'Load BootStrap (Normal Glitch Routines)
'----------------------------------------
Sub LoadBootStrap()

    Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter
    Dim Attempts

    Counter = 0
    Attempts = 1
    DAC4C = &h85

    Call IsCardPresent()

    Do
        Sc.Write("A1")
        GotInput = False

        If Counter = 12 Then
            Counter = 0
        End If

        If Counter = 1 Then
            DAC4C = &h85
        End If

        If Counter = 4 Then
            DAC4C = &h82
        End If

        If Counter = 8 Then
            DAC4C = &h80
        End If

        If Counter = 11 Then
            DAC4C = &h71
        End If

        Call Sc.ProgressBox ("Accessing the Card ....               Attempts:        " & Attempts & vbcr & "                                 DAC4C:        " & HexString(DAC4C,2), 1, 999, "DSSNations Crusaider Card Utilities")

        Sc.Write("06100E10019300")
        Sc.Delay(80)
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))
        'INS 4C
        Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
        Sc.Delay(80)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
                RetValue = Sc.GetByte(&h01)
                Sc.Read (RetValue)
        End If

    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF523FFD2284E172400772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1

    Loop Until GotInput = True

    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub

'---------------------------------------
'Clean Card Routine via Normal Glitching
'---------------------------------------

Sub CleanCard()

    Sc.Write("A2")

    Call ExtractCardInfo()

    Call Sc.ProgressBox ("Cleaning Main Code...", 1, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2014","20DF","D")                                ' Fuse
    Call WriteViaLoader("2406","03E80000000000000000","E")                ' Limit, Act Date, Password
    Call WriteViaLoader("2410","00000000000000000000000000010000","E")    ' Zip, PPV Act
    Call WriteViaLoader("2420","00000000000000000000000100000000","E")    ' PPV Act
    Call WriteViaLoader("2430","00000000000000000001000000000000","E")    ' Sub
    Call WriteViaLoader("2440","00000000000000010000000000000000","E")    ' Sub
    Call WriteViaLoader("2450","00000000000000000000000000000000","E")    ' Sub
    Call Sc.ProgressBox ("Cleaning Main Code...", 2, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2460","00000000","E")                            ' Ird Slot 1
    Call WriteViaLoader("2464","090000","E")                              ' Rating
    Call WriteViaLoader("24A4","00000001","E")                            ' Ird Slot 2
    Call WriteViaLoader("24E0","A601","E")                                ' Time Zone
    Call WriteViaLoader("24E6","0000","E")                                ' DSW Counter
    Call WriteViaLoader("2500","00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","E")    ' Guide
    Call WriteViaLoader("2510","FFFF0000000000000000000000000000","E")    ' Guide
    Call WriteViaLoader("2520","00000000000000000000000000000000","E")
    Call WriteViaLoader("2530","00000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Main Code...", 3, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("22F2","2210E37702270C8EE2B67610280575FC67D56A8CDCE712608EDB7E7D0029020B","D")
    Call WriteViaLoader("2312","982A30EF1D6102038CD4B5F97D40BE060375FED28CD15C40010017C5AA0060AB","D")
    Call WriteViaLoader("2332","0101C33D170FF5748028F98800603088003B327202068EE5ADF9726015882ACE","D")
    Call WriteViaLoader("2352","2A720204E700098A2ACFB34D006102EAF912088E3C96F9C5AA2AF8D024AA3F50","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 4, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2372","13248E3C96C35D080FEEF900","D")
    Call WriteViaLoader("23B3","982A30EF70012A8E3C96C704EDD70904E0D5088827052A8ED1B0F98ED21D8E","D")
    Call WriteViaLoader("23D2","3C96F9C58E23F5F4CC2E2A0F0C8E23F5F4CC2A2E0F07223FE6D32CD32CC35D0C","D")
    Call WriteViaLoader("23F2","0FE2F99A2CD02DD32C9A2CD02ED32CF9FFFFFFFF","D")
    Call WriteViaLoader("2690","0000000000000000B3B8BDC2C7C7C7C7C7C7C7C7C7B3B3B3B3B3CCD1D1D1D1D1","D")
    Call WriteViaLoader("26B0","D1D6DB06C9DC3E1306C9DC3E2B08C9DC3E4306C9DC3E6301C9DC3E7B04C9DC3E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 5, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("26D0","7F01C9DC3E8F01C9DC3E9303C9DC3E97FFC8A0CE0D16F082AC8602C081580703","D")
    Call WriteViaLoader("26F0","0000FF40000000000000000000000000DFE1F01A00DFE1003800DF83043800D5","D")
    Call WriteViaLoader("2710","13011800D912031800D597001820D59B001820DAE50B1800D8B1812820D7AF82","D")
    Call WriteViaLoader("2730","3800385003D000289E051C00DFE1023800DABE122860D7B30328E0D6A1012860","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 6, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2750","DFE2002860D7F3822860D4110828E0D883003800DF7F00380028C50D28E0DEBA","D")
    Call WriteViaLoader("2770","0228E0D834042860D8B8082860D8DE003800D8D7043800D90B033800D93B2338","D")
    Call WriteViaLoader("2790","00D9CEF03800DAB7003860DAD0003820DAD4023860DB16043800D42A052860DB","D")
    Call WriteViaLoader("27B0","2800181022F2F01800DFF0042860DD808D28E0D9CEF03800DB4C853860DFE101","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 7, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("27D0","180028A1883C002308E12860D5E7821800D667842860DB9FD52860E002822860","D")
    Call WriteViaLoader("27F0","DBD0813800D809D29000DFE1F09000383003F000D9608628E02FC79028A02F10","D")
    Call WriteViaLoader("2810","8028A02ABF89D000DB4C8528E02F088428E0DE458C28E0DE548628E05507AA24","D")
    Call WriteViaLoader("2830","B843000EAA2650130EF9D1FEFEAAFFFD8E3F3D2DF78C2F5C8E3F5812399B3012","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 8, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2850","3AF4EB0130F9B8C8D829D82AC5AA2AF0D007AA3F481307AB00DDC35D080FEE22","D")
    Call WriteViaLoader("2870","A064AB00DDC35D100FF5C59A30AB00ED700130C33D060FF38C3039008CC2988C","D")
    Call WriteViaLoader("2890","C0EC8C3EEB8C3B068C3B348C38198C39788CC27A8C3C968C393A8CE0748C2F43","D")
    Call WriteViaLoader("28B0","8C37008CE30E8C3D128C37808C37708CE0438C3C968C3D568CD6B28C29C48C2F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 9, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("28D0","568C31818C3F378C2AC58C3B558C3B798C36EA8CC4308C33B78C2F9D8CD6F68C","D")
    Call WriteViaLoader("28F0","31038CD3438C36F58C231E8C37738C3ED08C305C8CEC9C8C37728C377220203F","D")
    Call WriteViaLoader("2910","EF00000000000000000000000000000000000000000000000000000000000000","D")
    Call WriteViaLoader("2930","000000000000000000000000005CDA5EFA8F6152EA1CFED0C6043DA97745BB98","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 10, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2950","231803ECF766BD3570C1DF224A8EA4599B94A5B8FF490C27663B80DE52CD7AE1","D")
    Call WriteViaLoader("2970","134DAAF79438C92552BC617F8016EE03DB01298401005C0A3C7D919AC5AA24B8","D")
    Call WriteViaLoader("2990","AB00EDAA2650AB00F5C35D080FEFC522A064AB00DDC35D100FF58800ED2A8800","D")
    Call WriteViaLoader("29B0","DD2C7210FD8E3EB272DD158824B02A721004E7F9C877202703757F2775EF2742","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 11, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("29D0","2A0275F727751F02731F02D3024D04020F034204024C0204F750113215D80298","D")
    Call WriteViaLoader("29F0","2A347780270DD105D50E322A8E283A3205000A77202703B50003AA0000764027","D")
    Call WriteViaLoader("2A10","0ED0039A2AB81303D40315030206B99B2A740827C370012ADA02C7D402770827","D")
    Call WriteViaLoader("2A30","07882AA72A8E2A9575F7273215F75011762027277780270DD105D50E32348E28","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 12, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2A50","3A32050003AA00007640270AD0039A341303150302059B34740827C3700134DA","D")
    Call WriteViaLoader("2A70","02CED11577082707882AB32A8E2A9598342A7D0004020389FF45757F2775DF27","D")
    Call WriteViaLoader("2A90","75BF27C4F9C59A2AAB00ED70012AC35D0C0FF38E00EDF9F76011F761118EE7AE","D")
    Call WriteViaLoader("2AB0","8CE799F76211F763118EE7AE8CE7998EDCBB8CD5537702120225FE8CC89E0000","D")
    Call WriteViaLoader("2EF8","A5A5A5A5A5A5A5A5A5A5A5A500FFFFFF7601D001F98CDE3A720504882ACE2A8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 13, 44,"DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2F18","E6A0720C048824F42A8EE6A02202E377022701F9D5D08EE02F8824662E882406","D")
    Call WriteViaLoader("2F38","2C8EC5078822F22E8CD8992D00F406E0938EE0F3771026034224938CE0D47223","D")
    Call WriteViaLoader("2F58","038CC0C1062FAAFFFC2DD80628B4B4C4D50BF4D9002A0EC8322A8E2F8FC4D00E","D")
    Call WriteViaLoader("2F78","AA006043000E440E0BC3D32A3D070FE2B4B4120BF932FE5507AA24C043000EAA","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 14, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2F98","2658130EF97DFF6002038CD9E51217021D7202078EDA993260CD5D030B10AA2A","D")
    Call WriteViaLoader("2FB8","D01D6102060FE6770160E27480D3F98EDC9977022745C5AA0064AB00EDC35D0C","D")
    Call WriteViaLoader("2FD8","0FF5AA297CAB00EDC35D100FF58829412A8800ED2C7210FD8E3EB2C5AA00EDD0","D")
    Call WriteViaLoader("2FF8","0BAA0064130BAB0064C35D0C0FEE8824F42A720C047264158CDC54F9E2880100","D")
    Call WriteViaLoader("3018","30E9D50BC5AA24F4D009AA2AE4130944000BC35D0C0FEE120B02032205E68CD0","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 15, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3038","0D225064AB00EDC35D100FF58800DD2A8800ED2C7206FD8E3EB298EE3AD42AD4","D")
    Call WriteViaLoader("3058","29C4B4F975BFCF32BEAA3073D029AA3074D02A8EC37A9E2A8C3404C358CE77C7","D")
    Call WriteViaLoader("3078","ECCFF8C358C358C358C358C358C7FBC358C358C358C358C358C358C358C358C3","D")
    Call WriteViaLoader("3098","58C358C7F5CF56C806C6A4CCC43EDCC358CF08C983C358C358C358D0EED0EE30","D")
    Call WriteViaLoader("30B8","143F20CE3F3710C6E4C358C358CEAD3BA1C9A0CEB83722C8A0C5498E311C9A2A","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 16, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("30D8","D02B70012A9A2AD02C9E2C8ED27812088ED310D517120802088E23CED0178ED3","D")
    Call WriteViaLoader("30F8","108CD25A7D87080FD200057D80080BF48A2ACE2D02020AF4CA2A270506032240","D")
    Call WriteViaLoader("3118","E68CD242320855075A0788312F2A4B012A4900298CD1B03190F0382023693280","D")
    Call WriteViaLoader("3138","CF382023632329D23810237C233D823800237CDFE1F038202369DFE1823800","D")
    Call WriteViaLoader("3159","235982386023698E311C7D82080B258ED3AE770227058ED4079E194B17388C","D")
    Call WriteViaLoader("3178","D3807D87080FE1000C7610B6032241E67D80080BED8CD36C220F8E32718824C8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 17, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3198","3088009E32720206EB4D609E060A4261244C9F2402020314D39E4D609E060C4D","D")
    Call WriteViaLoader("31B8","629F0607426124D3240001F9C5AA0063AB0090C35D0C0FF5C5AA0090AB0070C3","D")
    Call WriteViaLoader("31D8","5D0C0FF5AA2931AB0090C35D100FF58829712A8800902C7210FD8E3EB2C5AA00","D")
    Call WriteViaLoader("31F8","70D00EAA0090130EAB0090C35D100FEED72404C4D50BC5AA2EECD00EAA009043","D")
    Call WriteViaLoader("3218","000E440E0BC35D0C0FED120B0202009B726315882EEC2A720C04E78800603088","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 18, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3238","24C832720206ED1217028022038E32714261FD98622A753F291260B7B7D0048E","D")
    Call WriteViaLoader("3258","32717780FD0D88006030982A32420406ED00D4726015E700CE42170BD0178ED3","D")
    Call WriteViaLoader("3278","D54C170B420B17F97440CF22038E3271126202042D040F01F98824E63088009E","D")
    Call WriteViaLoader("3298","32720206EBF4CC9F610A057D0162021206E68824CA30EFB002DE2507B34D0062","D")
    Call WriteViaLoader("32B8","06D698619F3262224CC702072231C7020222401D1706C1720C04882EF82A8EE6","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 19, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("32D8","A03262D1FFC70658220C8E3271C5AA0060AB00DDC35D0C0FF5AA297CAB00DDC3","D")
    Call WriteViaLoader("32F8","5D100FF58829412A8800DD2C7208FD8E3EB2C5AA0060D00EAA00DD130EAB00DD","D")
    Call WriteViaLoader("3318","C35D0C0FEE72DD15882EE02A720C04E7882DE02A8E337C882E002A8E337C002B","D")
    Call WriteViaLoader("3338","C7061A22118E327188006030882AD332721106ED882E202A8E337C000E882E40","D")
    Call WriteViaLoader("3358","2A8E337C882E602A8E337C88009E308824E632720206ED12FF8824CA30EA75BF","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 20, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3378","CF89FF1422208E327188006030982A32722006EDF98824CA30EF2507F9B87260","D")
    Call WriteViaLoader("3398","BE8E3537D4BE002512BE2D5C0BEF7640CFEB0019D7D78E338D2D030BEB000EC5","D")
    Call WriteViaLoader("33B8","B5AB00DAC35D260FF812D706E722908CC38F52FF8E351F120B0239002C300100","D")
    Call WriteViaLoader("33D8","60C5AA0101AB0061C33D600FF58824E63088009E32720206EBF4CC9F6202D300","D")
    Call WriteViaLoader("33F8","088824CA30EFB002D48900AE768028F1F98CC27A5D0C06F9C5AA2951AB0100C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 21, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3418","5D100FF5882AD330EFD00BC5AA0063AB0100C33D0B0FF5C5AA0100AB0140C35D","D")
    Call WriteViaLoader("3438","100FF58829612A8801002C7204FD8E3EB2223C8E3ECBD5DB32DBC2A801002C8E","D")
    Call WriteViaLoader("3458","ECA58EECA5C59A2CD009AA014013099B2CF4EB102CAB0140D32CC35D100FE7D3","D")
    Call WriteViaLoader("3478","DB7D04DB0FD28801402C8EECA58EECA5226A8E3ECBD509C5AA0140D00BAA0148","D")
    Call WriteViaLoader("3498","130BAB0140D00BA82ADC30EF130B440009C35D080FE21209020D8EDED97701B8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 22, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("34B8","037217C689FF49C5AA0100D00BA82DE030EF130BAB0100C35D400FECC5A82AD4","D")
    Call WriteViaLoader("34D8","30EFAB00DDC35D080FF3882AD330EFC01260B7B76CD0248800632A4B012AC53D","D")
    Call WriteViaLoader("34F8","240B059A2AAB00DDD32AC35D080FF08E0100C5AA00DDD00BAA00A0130BAB00A0","D")
    Call WriteViaLoader("3518","C35D080FEE009DD50BC5AA2EE0D00EAA2EF8130E44000BC35D0C0FEE120BF98E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 23, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3538","3ED68A288B0207882F042A8EE68E8824CA30EFD01625072D03061C8E36A17260","D")
    Call WriteViaLoader("3558","0C7202128EE4098EE41A882E802A8E36C18E36A18901212D04061E8E36A1882E","D")
    Call WriteViaLoader("3578","803088010032726006EB72600C7202128EE41A8E36BD8900FF2D070259D5E926","D")
    Call WriteViaLoader("3598","0102D9E98E36A18829812A8EC4AEC542E9EA5D060B02D9EAAA2EE015EAAB00DD","D")
    Call WriteViaLoader("35B8","C35D0C0FEA222D8E3ECB8800DD2A22608EEBEF226A8E3ECBC5AA0100AB0060C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 24, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("35D8","5D200FF572600C7202128EE4098EE41A8E36BD8C36907248948EED82D5DB32DB","D")
    Call WriteViaLoader("35F8","5D400B06A82DE02A00225D480B06A82A942A00185D500B06A82A942A000E5D51","D")
    Call WriteViaLoader("3618","0B06A82A832A0004A82DCF2A982A30EF8EEDA4C3129502095DB10FC4C88EEE89","D")
    Call WriteViaLoader("3638","C4129606B9D1DB5DB10FB3C5AA0088AB00DDC35D0C0FF5AA297CAB00DDC35D10","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 25, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3658","0FF58829412A8800DD2C7208FD8E3EB2C5AA0088D00EAA00DD130EAB00DDC35D","D")
    Call WriteViaLoader("3678","0C0FEE72DD15882EF82A720C04E78E351F020852028E3EA31216B38824CA30EA","D")
    Call WriteViaLoader("3698","B5882F042A8EE68EF9882E202A726004C5982A349A34AB0100700134C33D040F","D")
    Call WriteViaLoader("36B8","F38E36C4F9882E202A7260048801002C420422C59A2CAB006070012CC35D200F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 26, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("36D8","F388006030982A32722006ED7C202204E2F92D080604C58E3EA38CC3A3D002A6","D")
    Call WriteViaLoader("36F8","013DFC80351302F97D54BE06087D400902032200E68CC1C9E2D0C18ED06A7260","D")
    Call WriteViaLoader("3718","157240048826102AE7F9760112178ED06A770125058ECEFF00288ED04D882610","D")
    Call WriteViaLoader("3738","2A7701101172400C8EE4098EE41A8801002A7601120DC59A2AE170012AC35D40","D")
    Call WriteViaLoader("3758","0FF5F998C3AB8837D22A8E379BC5AA0088E1C35D080FF7F9D50BF93203AB0164","D")
    Call WriteViaLoader("3778","B81202AB016CB4F92240522DAB0100C35D3F0FF81210AB01008826902A8E379F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 27, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3798","8C376576011014C59A2A7D5ABE0601B2AB00A4C370012A5D080FED7248948EED","D")
    Call WriteViaLoader("37B8","827D44BE020D7D56BE02088E37DA8E37DA00068E37F38E37F3F9E44425024554","D")
    Call WriteViaLoader("37D8","14D4C5AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5F9C5A8010030","D")
    Call WriteViaLoader("37F8","EE8EEDA4C35D2D0FF3AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5","D")
    Call WriteViaLoader("3818","F9D513D50B7D36BE0201F972041E8E386622368E3CA000F28EDC0A88006230EE","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 28, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3838","272004302987D78A2ACE27010776401E03223EE68E3866F9302987D78A2ACE27","D")
    Call WriteViaLoader("3858","0203223DE6D51E74801E8E3866F97201D977801E037200D98E39168E38B18838","D")
    Call WriteViaLoader("3878","912A77801E048838A12AC59A2AAB00A0C370012A5D100FF3F950E75FA407240E","D")
    Call WriteViaLoader("3898","C5A87738C1CBE7B663B3029E192FC4CF365AB16C722D1DB1BEF70038F7003AF7","D")
    Call WriteViaLoader("38B8","803DFF5207F7083D8E38D9C704FA8839012C77801E0488390A2C8E38EE8E38D9","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 29, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("38D8","F99A2AD0059A2E1305A6013DFC213070012A70012EF99A2C213270012C9A2C21","D")
    Call WriteViaLoader("38F8","3470012C9A2C213DF902622C02403402442601642D01603401422F03403C121E","D")
    Call WriteViaLoader("3918","25072704022504B2BC8826602A4B002A790029883F582E4B002E79002DF97410","D")
    Call WriteViaLoader("3938","B6F9","D")
    Call WriteViaLoader("393D","2240AB0100C35D400FF88E3ED6C5AA2688D024AA3F801324AB00A4","D")
    Call WriteViaLoader("3958","C35D080FEE8E37B3C5D509E2D002AA00881302440009C35D080FF0120902BFF9","D")
    Call WriteViaLoader("3978","8E3ED67D40BE061A8824503088009032720406EB129014910208720206880090","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 30, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3998","30E58E3A8375EFB68E3AE48E3F8872970A920A8EE7D1726A0A920A520C8E3AFC","D")
    Call WriteViaLoader("39B8","7D67080601E25208A6013DFC80358E3CA0C704F4C5AA00A02DFB0F022CFBAB00","D")
    Call WriteViaLoader("39D8","7CC35D080FEF12D988E91F30B0020488EA3F3098302A72A30A920A12D98EE89F","D")
    Call WriteViaLoader("39F8","726A0A920AC5E2D007A8015C30EE1307AB0060C35D08020D7D670802E95D050F","D")
    Call WriteViaLoader("3A18","E5D50700E4F7803DFFC5F7083DAA0060A6013DFC2130C35D070FF28839072C77","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 31, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3A38","801E048839102C8E38EE1267A6013DFC2130C5A6013DFC8035AB007CC35D080F","D")
    Call WriteViaLoader("3A58","F2982A3072A30A920A12D9D5038EE8D5726A0A920A7D0803F406C27AB0021B77","D")
    Call WriteViaLoader("3A78","021E0552018E3EA38CDCDF5208A6013DFC80358E3C96C704F4F97410B68800B0","D")
    Call WriteViaLoader("3A98","2A88003B2E7202078EDBD87D40BE06D8F7803D88390A2CF7083D8E38EEF7283D","D")
    Call WriteViaLoader("3AB8","C5AA00A0A6013DFC2130C35D070605F7243D00EDF7283D5D0F0FE68839132C8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 32, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3AD8","38EE12AFA6013DFC2130009C8839042C77801E0488390D2C8E38EE12D8A6013D","D")
    Call WriteViaLoader("3AF8","FC2130F9B58E3CA012D8C704F8F932117D60BE06068EFFBC2317F912BE250F2D","D")
    Call WriteViaLoader("3B18","0A061112D402038CFFB67620C1038CFF9E8CFFAE7D56BE02F58CFFA67D60BE06","D")
    Call WriteViaLoader("3B38","05882E202AF912D402058825D02AF97620C1058825502AF98825902AF97D60BE","D")
    Call WriteViaLoader("3B58","061A8E338D2D030605882E7F2CF92D040605882E4F2CF988007F2CF988264F2C","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 33, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3B78","F97D60BE061D8E338D2D030606F4CA2C2E4FF92D040606F4CA2C2E1FF9F4CA2C","D")
    Call WriteViaLoader("3B98","005FF9F4CA2C260FF98E3ED67710B82FD508D5B87708D0087216087404B80051","D")
    Call WriteViaLoader("3BB8","7640B54D880176308800A0327208068EE5B7D5A8D5A97401B88E3C74890096C5","D")
    Call WriteViaLoader("3BD8","AA24F4D00BAA00A043000BAA2AE4130BAB00A0C35D0C0FE88EDED98EDF617D17","D")
    Call WriteViaLoader("3BF8","C606037204B87708B8037402D17601B80FC5B5AB00A0AB0088C35D0A0FF50037","D")
    Call WriteViaLoader("3C18","C58801762CA6013DFC80358E3CA0A8017630EE13D89B2C70012CC35D0A0FE688","D")
    Call WriteViaLoader("3C38","01762CC59A2CAB00A0AB0088B59B2CC370012C5D0A0FED7740B7038E3D907601","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 34, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3C58","B604D5A8D5A98E3C74C5AA0088AB00A0C35D080FF598D6C398A7D6F942B5AA12","D")
    Call WriteViaLoader("3C78","B82507D0AB32C734C802057401D2D5084208ACC5AA00A0E1C35D0D0FF7F9A601","D")
    Call WriteViaLoader("3C98","3DFC21308E3CA0F9B8C8D5DBD5DCD0D87B05DC32DBAA00A81BD8AB00A8D0DAAA","D")
    Call WriteViaLoader("3CB8","00A013DAAB00A013DC251FC0AA3CF2D0DA32DB5306AA00A813DAAB00A8B0BDD0","D")
    Call WriteViaLoader("3CD8","DA32DB5305AA00A01CDAAB00A04300D8D3DB7D08DB0FB9C4B4F9BF12939242AF","D")
    Call WriteViaLoader("3CF8","E7E3B2C6B89180B4E8739EF75DFDA082F96F25177D0B55970C8022678EE06F74","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 35, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3D18","042522088EE06F8E3A838E3AE48E3F8872970A920A8EE7D1726A0A920A520A8E","D")
    Call WriteViaLoader("3D38","3AFC8839012C8E38EEC5A6013DFC80358E3C9612D88EE06FC35D080FEDF98EFA","D")
    Call WriteViaLoader("3D58","27B006F98800683088245832720406EDC5AA2688D007AA3F80430007AA006013","D")
    Call WriteViaLoader("3D78","07AB0060C35D080FE87260158826902A720804E77420D1F9882460308800ED32","D")
    Call WriteViaLoader("3D98","720406EB720407D5063206AA00A0D0045503AA00EDD0053206C35507AA00A04B","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 36, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3DB8","0005C85503AA00EDD00932043C00553F8E3E0843000512041309BDB0BDC08E3E","D")
    Call WriteViaLoader("3DD8","08BE1B05C4AB00A0C5D8F0AA00EDD002B0BFD003B4D8022580BE1403AB00EDC3","D")
    Call WriteViaLoader("3DF8","770401E7B4D3067708069ED7070498F98EFFB67D00D406F78CFF9E0012010125","D")
    Call WriteViaLoader("3E18","002008001E010124100808001A0101240602080013010125202008002D010124","D")
    Call WriteViaLoader("3E38","08040800D0010124650108002E010124682008004E0101245C04080058010124","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 37, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3E58","E0010800F3010124A40408001901012464010800FE0101240C04080041010121","D")
    Call WriteViaLoader("3E78","060408C9F400000045010124881C0800F8010120240908CA360000CA750000CA","D")
    Call WriteViaLoader("3E98","B100000044010124E80C08B8A82AD02A9A2AB302038EE68EB4F9223C8E3ECB42","D")
    Call WriteViaLoader("3EB8","04FED50E8EECA5D30E4DFD0E0FF642FE04226AD00A920AF98E3ED68CC1A47202","D")
    Call WriteViaLoader("3ED8","058CC204E2C07604D10375BFD375F7CF8CC9597601CF1B2D7F06178E298C8EC2","D")
    Call WriteViaLoader("3EF8","4C8A2F04020A882E202A72C0048EE6A0227F7D5EBE060E7D01120609D31D7D08","D")
    Call WriteViaLoader("3F18","1D060222018CC00B770212108ED0EE8EDED97608B80375BFB48CCC4E8CCC3675","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 38, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("3F38","FBB48CD59FF4CA2CCBB90603728646F9","D")
    Call WriteViaLoader("3F58","12937D04060603751F938E2856D093F9","D")
    Call WriteViaLoader("3F88","727B0252058E3FB8722902000A520FAA00A0BCF008D0028E3FB3AA00A0823FDF","D")
    Call WriteViaLoader("3FA8","C522C72306724B024B02005203A40220AA00AA1B02AB00AAAA009FCAF3F91E72","D")
    Call WriteViaLoader("3FC8","CB250299A866F0DA234B00F8F5A0ABA70005009FCAB9F95203AA00A0D002AA","D")
    Call WriteViaLoader("3FE8","AC4B0002AA3F9413022B5ABE236BAB00ACCAE6A3FD20F9","D")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 39, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2024","000000000000000000000000","E")
    Call WriteViaLoader("2030","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2050","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2070","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2090","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 40, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("20D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2110","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2130","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 41, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2150","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2170","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2190","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 42, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("2210","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2230","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2250","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2270","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2290","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 43, 44, "DSSNations Crusaider Card Utilities")
    Call WriteViaLoader("22D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22F0","0000","E")
    Call WriteViaLoader("2DC0","01172F15FFFF01FF07FF504C45415345205354414E4420425900000000000000","E")
    Call WriteViaLoader("2DE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call InstallUpdates()        ' Clean USW portion of code
    Call Sc.ProgressBox ("Cleaning Complete...", 44, 44, "DSSNations Crusaider Card Utilities")
    Call ShutdownCard()
    Call Sc.ProgressBox ("", 0, 0, "")

End Sub

'----------------------------
'Install USW Update Routines
'----------------------------

Sub InstallUpdates()

    Dim USWH
    Dim USWL
    Dim USW
    Dim Updates(8)
    Sc.Write("06C20124C88200")
    Sc.Read(&h02)
    Sc.Read(&h03)
            USWH = Sc.GetByte(0)
            USWL = Sc.GetByte(1)

    USWH = HexString(USWH Xor HexToDec(XORedByte(0)),2)
    USWL = HexString(USWL Xor HexToDec(XORedByte(1)),2)
    USW = USWH & USWL
    USW = HexToDec(USW)

    If USW = &h0000 OR USW = &h0001 Then
        Call WriteViaLoader("2B00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2DA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    End If

    If USW => &h0100 Then
        Call WriteViaLoader("2CE8","7D40BE0652F7803DFFFFC5F7083DAA2CE0A6013DFC2130C35D070FF28839072C","D")
        Call WriteViaLoader("2D08","8E38EEAA2CE0A6013DFC2130","D")
    End If

    If USW => &h0200 Then
        Call WriteViaLoader("2D14","D524C5AA24D8D002AA24C0430002AA2658430002A6013DFC80351302440024C3","D")
        Call WriteViaLoader("2D34","5D030FDF122406037404288CC1C9","D")
    End If

    If USW => &h0300 Then
        Call WriteViaLoader("2D42","760428038CD5138C2024","D")
        Call WriteViaLoader("2CE0","21513C515063DE1E","D")
    End If

    If USW => &h0400 Then
        Call WriteViaLoader("370E","2CE8","D")
        Call WriteViaLoader("270F","2D42","D")
        Call WriteViaLoader("2D4C","22F2008B23D50031","D")
    End If

    If USW => &h0500 Then
        Call WriteViaLoader("2D54","2698007A271103BD2CD000102CE800642D4C00402D8C002B","D")
        Call WriteViaLoader("2D6C","2F0801323039011E315907E1393D060B3F5800103F8800773FFF00013FFF0001","D")
    End if

    If USW => &h0600 Then
        Call WriteViaLoader("2D8C","7D08E3060342DEDD7D10E3021DD3E370042EDEDD07EAC59A2EAB002970012EC3","D")
        Call WriteViaLoader("2DAC","5704F470FF2C70FC2EC3F9","D")
        Call WriteViaLoader("2CD0","5503AA013AD0DBD524882D482ED5E3F9","D")
    End If

    If USW = &h0700 Then
        Call WriteViaLoader("2902","2932","D")
        Call WriteViaLoader("2932","22C2B8227AB888305C43F9","D")
        Call WriteViaLoader("2CEB","00","D")
        Call WriteViaLoader("2D4A","C27A","D")
    End If

End Sub

'-------------------------
'Shutdown the Card Routine
'-------------------------
Sub ShutdownCard()

    Sc.Write("A0")              ' Turn the LED off
    Sc.Write("020200")             ' Shutdown card
    Sc.Delay(100)
    Sc.Read(&h02)

End Sub

'**************************************************
'This is the additional Utilities Menu and Commands
'**************************************************
sub Utilities2()
dim MenuPrompt8
call Sc.PlaySound("openmenu.wav")
Do
MenuPrompt8 = "Crusaider HU Card Utilities: (Make your choice from the Following):" & vbCrLf & vbCrLf & "Note: ALL of these Features use Standard Glitching and NOT Rom Entry." & vbCrLf & "These features were added at the Request of you - Our Members." & vbCrLf & vbCrLf & "CLEAN CARD" & vbtab & "- Feature will Clean the Card via Normal Glitching Methods" & vbCrLf & "UNMARRY IRD" & vbtab & "- Feature will Unmarry the IRD via Normal Glitching Methods" & vbCrLf & "WRITE BIN" & vbtab & "- Feature will write your Bin via Normal Glitching Methods" & vbCrLf & "READ BIN" & vbtab & "- Feature will read your Bin via Normal Glitching Methods" & vbCrLf & "EXIT" & vbtab & vbtab & "- Feature will Return you to the Main Utilities Menu"

MenuPrompt8 = MenuPrompt8 & "                      " & vbCrLf
    Choice = Sc.ButtonBox(MenuPrompt8, 0, "Crusaider HU Card Utilities Menu - Options Page #2", "Clean Card", "UnMarry IRD", "Write Bin", "Read Bin", "Exit")

'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Select Case Choice

    Case "1"
    Call IsCardPresent()
    If (GetATR = False) Then
    Call CardIsLooped()
    Else
    Call LoadBootStrap()
    Call CleanCard()
    End If

    Case "2"
    Call IsCardPresent()
    If (GetATR = False) Then
    Call CardIsLooped()
    Else
    Call LoadBootStrap()
    Call UnMarryIRD()
    End If

    Case "3"
    Call IsCardPresent()
    If (GetATR = False) Then
    Call CardIsLooped()
    Else
    HUBinfile = False
    Call GetFile()
    If HUBinFile = True Then
    Call LoadBootStrap()
    Call WriteCard(64)
    End If
    End If

    Case "4"
    Call IsCardPresent()
    If (GetATR = False) Then
    Call CardIsLooped()
    Else
    Call GetFileName()
    Call LoadBootStrap()
    Call ReadCard()
    End If


    Case "5", ""
        Exit Sub
        Case Else
            MenuPrompt8 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True

end sub

'----------------------------------------------------------------
'Addition of the Leakware Jean Crap for those who find it usefull
'You know there will be some fuckers who say that it works better
'So we can disclaim that crap right away by the inclusion thereof
'I ripped alot of the guts out to try and eliminate any duplicate
'entires along the way - Short of that, it is 100% their shit.
'----------------------------------------------------------------

    Sub LeakWareMain
    Dim MenuPrompt99
    call Sc.PlaySound("openmenu.wav")

    Do
    MenuPrompt99 = "     SUPER ROM READER (aka) 'SR71 Decrypted' - Freeware/Leakware version Released on August 9th 2002" & vbCrLf & vbCrLf & "While the facts are distorted in the Public, this was an Early Development version which was never encrypted, thus" & vbCrLf & "it was never decrypted. This release was made available to dupe the public into being something that it is not, in a" & vbCrLf & "piss poor attempt at being the Hero of the day. Most have reported having very poor results in using this product." & vbCrLf & "We have included it for those who may wish to see/use it while having the most Complete Product on the Market." & vbCrLf & vbCrLf & "      We do not Recommend and or Support the use of this Particular DAC Entry - You do so at your own Risk!"
    Choice = Sc.ButtonBox(MenuPrompt99, 0, "Jeans Freeware/Leakware 'Rom' Reader", "Read Card", "Write Card", "Exit")
    Select Case Choice
    Case "1"
    RetVal = 3
    call IsCardPresent()
    if RetVal = 3 then
    if(LeakBootCard())= 1 then
    Call GetFileName()
    Call unloopersettings()
    Call LeakReadCard()
    else
    Fs.FileClose(InFile)
    end if
    Sc.Print "You will need to unmarry the bin after reading.  This will be corrected soon"
    end if

    Case "2"
    RetVal =3
    call IsCardPresent()
    if RetVal = 3 then
    if(LeakBootCard()) = 1 then
    HUBinfile = False
    Call GetFile()
    If HUBinFile = True then
    Call LeakWriteCard()
    else
    Fs.FileClose(InFile)
    end if
    end if
    end if

Case "3", ""       'Exit program
Exit Sub
Case Else
MenuPrompt2 = "Invalid Input!" & vbCrLf
End Select
Loop While True = True
End Sub


Sub LeakReadCard()
    Dim Byte1A
    Dim Byte2A
    Dim Byte3A
    Dim Byte4A
    Dim Byte5A
    Dim Byte6A
    Dim Byte7A
    Dim Byte8A
    Dim Byte1B
    Dim Byte2B
    Dim Byte3B
    Dim Byte4B
    Dim Byte5B
    Dim Byte6B
    Dim Byte7B
    Dim Byte8B
    Dim XORedByte1
    Dim XORedByte2
    Dim XORedByte3
    Dim XORedByte4
    Dim XORedByte5
    Dim XORedByte6
    Dim XORedByte7
    Dim XORedByte8
    Dim EPROMKey
    Dim IRDKey
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue

    Address = 8192 ' For EPROM Read

Sc.Write("A2")



Call WDTMR()
Call Sc.ProgressBox ("Extracting EPROM Keys...", 4, 13, "SUPER ROM READER")

Sc.Write("06C20724C08800")

Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
        Byte1A = Sc.GetByte(0)
        Byte2A = Sc.GetByte(1)
        Byte3A = Sc.GetByte(2)
        Byte4A = Sc.GetByte(3)
        Byte5A = Sc.GetByte(4)
        Byte6A = Sc.GetByte(5)
        Byte7A = Sc.GetByte(6)
        Byte8A = Sc.GetByte(7)

Call Sc.ProgressBox ("Extracting EPROM Keys...", 5, 13, "SUPER ROM READER")
Sc.Write("06C20726588800")
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
        Byte1B = Sc.GetByte(0)
        Byte2B = Sc.GetByte(1)
        Byte3B = Sc.GetByte(2)
        Byte4B = Sc.GetByte(3)
        Byte5B = Sc.GetByte(4)
        Byte6B = Sc.GetByte(5)
        Byte7B = Sc.GetByte(6)
        Byte8B = Sc.GetByte(7)

XORedByte1 = HexString(Byte1A XOR Byte1B, 2)
XORedByte2 = HexString(Byte2A XOR Byte2B, 2)
XORedByte3 = HexString(Byte3A XOR Byte3B, 2)
XORedByte4 = HexString(Byte4A XOR Byte4B, 2)
XORedByte5 = HexString(Byte5A XOR Byte5B, 2)
XORedByte6 = HexString(Byte6A XOR Byte6B, 2)
XORedByte7 = HexString(Byte7A XOR Byte7B, 2)
XORedByte8 = HexString(Byte8A XOR Byte8B, 2)

IRDKey = XORedByte5 & XORedByte6 & XORedByte7 & XORedByte8

Call Sc.ProgressBox ("Cleaning IRD...", 1, 999, "SUPER ROM READER")
Sc.Write("09C68324A4" & IRDKey & "00")
Sc.Read(&h02)

Do

Call WDTMR()

Sc.Write("06C23F" & HexString(Address,4) & "BF00")
Sc.Read(&h02)
Sc.Read (&h40)
Call Sc.ProgressBox ("Reading EPROM memory...", EPROM, 128, "SUPER ROM READER") ' For EPROM Read
EPROM = EPROM + 1
Address = Address + 64
ThisByte = ""
For ThisByte = 0 to 63
            call Fs.FilePutc(OutFile, Sc.GetByte(ThisByte))
            next
loop until EPROM = 128
Fs.FileClose(OutFile)
Sc.Write("A0")
Sc.Write("020200")
Sc.Delay(100)
Sc.Read(&h02)

Call Sc.ProgressBox ("", 0, 0, "")

End Sub

Function ReceiveATR
Dim i
Dim RetValue

    ' 06 = 6 bytes to follow
    ' 10 = set 9600 baud ATR
    ' 0E 10 = set timeout timer
    ' 01 = RESET CARD
    ' 93 = read 20 bytes from card
    ' 00 = execute above ins
    Sc.Write("06100E10019300")                        ' this command receives the ATR of an HU card
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)                        ' read the 20 bytes
ATR = ""
    For i = 0 to RetValue-1
        ATR = ATR &  HexString(Sc.GetByte(i), 2) & " "        ' 20 bytes of ATR

    Next

    If(RetValue < 20) Then
        ReceiveATR = 0
    Else
        ReceiveATR = 1
    End If

End Function

Sub LeakWriteCard()
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Location
    Dim EPROMBytes
    Dim EPROMBytes2

    Address = 8192
    Location = 0

Sc.Write("A2")



Call Sc.ProgressBox ("Writing EEPROM memory..." & vbcr & "2000:  " & EPROMBytes, EPROM, 255, "Super ROM Reader")


call Fs.FileSeek(InFile, Location, fsoSEEK_SET)

Do

Call WDTMR()

EPROMBytes = ""
For ThisByte = Location to (Location + 16) - 1
EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
Next
EPROMBytes2 = ""
For ThisByte = (Location + 16) to (Location + 32) - 1
EPROMBytes2 = EPROMBytes2 & HexString(Fs.FileGetc(InFile), 2)
Next

Sc.Write("25E29F" & HexString(Address,4) & EPROMBytes & EPROMBytes2 & "00")
Sc.Read(&h02)
Call Sc.ProgressBox ("Writing EPROM memory..." & vbcr & HexString(Address,4) & ":  " & EPROMBytes & vbcr & HexString(Address + 16,2) & ":  " & EPROMBytes2, EPROM, 255, "Super ROM Reader")

EPROM = EPROM + 1
Address = Address + 32
Location = Location + 32
loop until EPROM = 256
Call WDTMR()
Fs.FileClose(InFile)
Sc.Write("A0")                ' turn the LED off
Sc.Write("020200")
Sc.Delay(100)
Sc.Read(&h02)

Call Sc.ProgressBox ("", 0, 0, "")

end sub

Function LeakBootCard()

    Dim d0,D1,D2,D3,D4,D5,D6,D7,D8,d9
    Dim cnt,b, RetVal, boot, kk,katr
    Dim atrlock,cter, glcnt, mtries,kp

    RANDOMIZE TIMER

    atrlock=0
    cter=0
    glcnt=0
    mtries = 0
    d0 = 0
    sc.verbose = False

DO
  katr=0
  mtries = mtries + 1
    if mtries = 5000 then
       call RndGr()
       mtries = 0
    end if

    boot = 0

d1=224
D2=52
D3=8
D4=145
D5=606
D6=62
D7=30
D8=57
D9=864


    call ProgUpdate(kp,atrlock)
    call unlooper2settings()

    sc.verbose = 0
    sc.write("A1")
    delay(250)

    if Chk4Card() = 0 then
        LeakBootCard=0
        Exit Function
    end if

    delay(250)

    sc.write("B0" & HexString(D1,02))
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")

    Sc.Read(&h02)

    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    if cnt = 1 then sc.read(1)
    end if

    if cter > 75 then
        glcnt = glcnt + 1
        if glcnt = 24 then
          glcnt = 0
          call RndGr()
        end if
        cter = 0
        atrlock = 0
    end if

    if cnt > 0 then
       kp=kp+1
       if kp >33 then kp = 33

         for b = 0 to 10
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         end if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
            if kk = &h38 then

               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                     ' GETBYTE(0))= &HB0
                      if(sc.getbyte(0)) = &hb0 then

                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit for
                       end if
                    end if
              end if
         end if


      next

      'sc.print VbCr & cter & VbCr

    if katr = 1 then
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       sc.delay(450)
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
       else
          cnt = 0
       end if

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c0602004d7042005590320" & HexString(D9,04) & "0d010000")
             'Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)

          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            end if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                cnt = 0
                if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         sc.print VbCr & "Bootloader installed and active!" & VbCr
                         ScriptEnd = Now
                         Sc.Print "Elapsed time:  " + FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr
                         exit for
                      end if
                    end if
                 end if
             else
                exit for
          end if

         next

        if boot = 1 then
           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           LeakBootCard=1
           Exit Function
         end if
       end if
     end if
   else
    kp=kp-1
    if kp<1 then kp=1
   end if
loop

End Function
'**************************************************
'This is the Settings Menu - Made for help/details
'**************************************************
sub SettingsMenu2()
dim MenuPrompt91
call Sc.PlaySound("openmenu.wav")
Do
MenuPrompt91 = "The DSSNations Crusaider  will work with most every available Loader on the Market. The key is customization." & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Some Loaders require little to no modifications, while some require tweaking and tuning. Once you have configured your" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "loader to function properly, the DSSNations Crusaider will find its way into even the Most Stubborn of cards. Based off of" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "current members reports, we have compiled this listing of known loaders and its best success Settings:" & vbCrLf & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Loader Name" & vbtab & vbtab & vbtab & "DAC Setting" & vbtab & vbtab & vbtab & "Dip Settings" & vbtab & vbtab & vbtab & "Power Used" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "----------------------" & vbtab & vbtab & vbtab & "----------------------" & vbtab & vbtab & vbtab & "------------------------" & vbtab & vbtab & vbtab & "--------------------" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Scorpion 1.2" & vbtab & vbtab & vbtab & "248" & vbtab & vbtab & vbtab & vbtab & "1,2 Off 3,4 On" & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Scorpion Pro" & vbtab & vbtab & vbtab & "167/190" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Venom Dual Atmel" & vbtab & vbtab & "167/190" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "AfterShock" & vbtab & vbtab & vbtab & "167/190" & vbtab & vbtab & vbtab & "2, 5 On" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "T6 Wave 2" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "2, 5 On" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Professional Series" & vbtab & vbtab & "228" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Sure Shot" & vbtab & vbtab & vbtab & "167/190" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Satans 6 in 1" & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "N/A" & vbtab & vbtab & vbtab & vbtab & "9 V" & vbCrLf & vbCrLf
MenuPrompt91 = MenuPrompt91 & "Make sure you check the forums for the Latest posted Results - www.dssnationforums.com"

Choice = Sc.ButtonBox(MenuPrompt91, 0, "Crusaider Settings - Details - Information - Page 2", "Return Back")
Select Case Choice
    Case "1", ""
    Exit Sub
    Case Else
    MenuPrompt9 = "Invalid Input!" & vbCrLf
    End Select
    Loop While True = True

end sub