'***** BEGIN DEFAULT LOADER SETTINGS SECTION *****
'For DefaultD1 - DA, You can place value of 0 to allow normal processing of that param
'If you have params from ExtremeHU, you can also set these to those values by prefixing
'the value with &h to specify hex value.
    Const UseDefGP =       0 'Default D1 - D9 Glitch Paramaters: 0 = Random, 1 = defaults here, 2 = ask
    Const UseDefBG =       0 'Broad Glitching: 0 = normal glitching, 1 = broader, 2 = ask
    Const UseDefFF =       1 'FF on Unloop: 0 = never, 1 = always, 2 =ask
    Const DefFF =          3 'Number of times to run FF routine on Unloop
    Const DefChk2K =       2 'Check 2000 area: 0 = never, 1 = always, 2 = ask
    Const DefChkATR =      1 'Check ATR before unloop: 0 = Never, 1 = Always
    Const DefUnInt =       1 'Uninterrupted unloop: 0 = Never, 1 = Always
    Const DefAltEEPROM =   1 'Repair Alternat EEPROM after Unloop, 0 = Never, 1 = Always, 2 = Ask
    Const DefCrdTyp =    " " 'Valid types are "5B/6B", "4B" or "Stubborn", " " will prompt for each card
    Const DefSCDel =      10 'Default delay after smart card operations when used
    Const DefMinDel =     10 'Minimum Card Delay used for Unlooping
    Const DefaultD1 =      0 'D1 = 148 - 227 setting to 0 will randomize
    Const DefaultD2 =      0 'D2 =  40 -  60 setting to 0 will randomize
    Const DefaultD3 =      8 'D3 =   6 -  11 setting to 0 will randomize
    Const DefaultD4 =    145 'D4 = 128 - 196 setting to 0 will randomize
    Const DefaultD5 =    606 'D5 = 605 - 609 setting to 0 will randomize
    Const DefaultD6 =     62 'D6 =  54 -  70 setting to 0 will randomize
    Const DefaultD7 =     30 'D7 =  23 -  37 setting to 0 will randomize
    Const DefaultD8 =     57 'D8 =  54 -  70 setting to 0 will randomize
    Const DefaultD9 =    864 'D9 = 858 - 866 setting to 0 will randomize
    Const DefaultDA =   &h00 'DA = &h40-&h4F Setting out of range will randomize
    Const DefMinDel4B =   50 'Minimum Card Delay used for Unlooping
    Const Default4BD1 =  198 'D1 = 148 - 227 setting to 0 will randomize
    Const Default4BD2 =   52 'D2 =  40 -  60 setting to 0 will randomize
    Const Default4BD3 =   10 'D3 =   6 -  11 setting to 0 will randomize
    Const Default4BD4 =  141 'D4 = 128 - 196 setting to 0 will randomize
    Const Default4BD5 =  606 'D5 = 605 - 609 setting to 0 will randomize
    Const Default4BD6 =   72 'D6 =  54 -  70 setting to 0 will randomize
    Const Default4BD7 =   29 'D7 =  23 -  37 setting to 0 will randomize
    Const Default4BD8 =   60 'D8 =  54 -  70 setting to 0 will randomize
    Const Default4BD9 =  864 'D9 = 858 - 866 setting to 0 will randomize
    Const Default4BDA = &h00 'DA = &h40-&h4F Setting out of range will randomize
    Const UseDefINS =      0 'INS Glitching Parameters: 0 =  Don't use (Random), 1 = Use, 2 = Ask
    Const INSGlitch =   "48" 'INS Glitch type, valid types: "5C", "2E", "4C", "48", " "  will randomize
    Const InsGlDAC =    &h88 '&h80 - &h8D, setting to &h00 will randomize
    Const InsGlDAC4C =  &h81 '&h71 - &h86, setting to &h00 will randomize
    Const InsGlDel =    &h0B '&h0A - &h0C, setting to &h00 will randomize
    Const InsGlDel5C =  &h05 '04 - 06, setting to &h00 will randomize
'***** END DEFAULT UNLOOPER SETTINGS SECTION *****

'***** BEGIN DEFAULT LOCAL AREA INFO SECTION *****
    Const UseDefaultAreaInfo =  1  '1 = Always write default area info before changing area info writing hex (PromptAreaInfoHex will override)
    Const PromptAreaInfo =      0  '1 = Prompt for area info before writing hex, 0 = Don't
    Const DefaultZip =    "64999"  'Replace with your zip code
    Const DefaultTZ  =       "A4"  'Replace with your time zone
    Const DefaultMarket =    "21"  'Replace with your locals bytes
    Const DefaultGuide =     "01"  'Replace with the guide bytes for your locals
    Const DefaultFuse =    "25DA"  'Replace with whatever fuse bytes you wish to use
    Const DefaultDTVSpend = "600"  'Replace with Total DTV spending limit you wish
    Const DefaultUSRSpend = "150"  'Replace with Per Event spending limit you wish
    Const DefaultBuyOpt =    "6C"  'Replace with the Buy Option you wish
    Const DefaultRating =  "NC17"  'NC17, NRM, R, NRC, PG13, PG, G, NR, LA (Lock All)
    Const DefaultUnMarry =      1  '1 = UnMarry, 0 = don't
'***** END DEFAULT LOCAL AREA INFO SECTION *****
    Const fsoError = -1
    Const fsoOpenRead = 0
    Const fsoOpenWrite = 1
    Const fsoOpenReadWrite = 2
    Const fsoSEEK_SET = 0
    Const fsoSEEK_CUR = 1
    Const fsoSEEK_END = 2
    Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"
    Const Ins = &h08
    Const InsParam1 = &h00
    Const InsParam2 = &h00
    Const InsLen = &h34

    Dim InFile, OutFile, HUBinFile, FileName
    Dim XORedByte(31), Key12byte(11), XByte(15), EPROMKey
    Dim ScriptStart, ScriptEnd, EH, EM, ES, Tmr
    Dim RetVal, ErrorString, DefaultButton, Mode, DSWInst
    Dim FuseBytes, ZipCodeHex, TimeZoneHex, LocalByteHex, GuideByteHex, DTVSpendHex, USRSpendHex, BuyOptHex, RatingHex
    Dim UnMarry, Booted, BootCard, Chk2k, Tool, Changed
    Dim FCard, Looped, SCDel, ModChoice, AltEEGL
    Dim DAC, DAC4C, INSDelay, Delay5C, Read, CrdTyp

    If Sc.Version < 4.6 Then
        ErrorString = "You need version 4.6 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
    End If

' Unlooper Settings
' This code uses WinExplorer 4.6's new Wx. object to automatically
' configure all the WinExplorer settings for the user.
    Wx.BaudRate=     115200
    Wx.ResetBaudRate=115200
    Wx.Parity=            0      ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
    Wx.StopBits=          0      ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
    Wx.DTRControl=        0      ' Initial state of DTR  0 = off, 1 = on
    Wx.RTSControl=        1      ' Initial state of RTS  0 = off, 1 = on
    Wx.ResetDelay=        0      ' In microseconds
    Wx.ByteDelay=         0      ' In microseconds
    Wx.RxByteTimeout=  1000      ' In milliseconds
    Wx.ResetMode=         2      ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
    Wx.ResetLine=         1      ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
    Wx.ByteConvention=    1      ' 0 = Inverse, 1 = Direct
    Wx.FlushEchoByte=     0      ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted.
    Wx.FlushBeforeWrite=  0      ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes.
    Wx.IgnoreTimeouts=    1      ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
    Wx.ResetAfterTimeout= 0      ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout  - Not used if "IgnoreTimeouts=0"
    Wx.LogTransactions=   0      ' 0 = Don't log transactions, 1 = log transactions
    Wx.DisplayUSW=        0      ' Display USW after script complete 0 = no, 1 = yes
    Wx.DisplayFuse=       0      ' Display Fuse after script complete 0 = no, 1 = yes

Sub Main()
    Sc.Verbose = False
    Sc.Print "Start Time: " & now & VbCr
    Dim MenuPrompt
    Dim Choice
    Dim PromptString
    Dim GotInput
    Mode = UCase(False)
    EPROMKey = "*"
Do
Call Sc.ProgressBox("",0,80,"")
     Do
     If Atmel() <> "UL4S" Then
         If Atmel() = "" then
             RetVal = Sc.ButtonBox("Unable to locate a Loader/Unlooper, Please correct this first.", ,"Atmel Version", "Fixed","Quit")
             If RetVal <> 1 Then Exit Sub
         End If
         If Atmel <> "" and Atmel <> "UL4S" Then
         Sc.MsgBox vbtab & "Current atmel version: " & Atmel & vbCrLf & vbCrLf & "         You need the UL4S atmel code to run this script." & VbCr & "Please locate UL4S flash and apply to your Loader/Unlooper", vbCritical
         Exit Sub
    End If
    End If
    Loop while Atmel <> "UL4S"
    SCDel = DefSCDel
    If SCDel = "0" or SCDel = " " then SCDel = "10"
    FileName = "Default.bin"
'Main Menu
    MenuPrompt = VbTab & VbTab & "               DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
    MenuPrompt = MenuPrompt & VbTab & VbTab & "                Please choose from the following menu choices:" & vbCrLf
    If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & VbTab & "  CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
    Choice = Sc.ButtonBox(MenuPrompt, 0, "HU UnLooper and Glitch Loader/Cleaner", "Unloop", "Read/Write", "Clean Card", "Utilities", "Test Menu")
    Select Case Choice
'UNLOOP
    Case "1"
        Call Unloop()
'READ/WRITE
    Case "2"
        MenuPrompt = VbTab & "           DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
        MenuPrompt = MenuPrompt & VbTab & "            Please choose from the following menu choices:" & vbCrLf
        If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & "CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
        Choice = Sc.ButtonBox(MenuPrompt, 0, "Read / Write Options", "Read card", "Write Card", "3M", "Main")', "FF Card")
        Select Case Choice
'READ Card
            Case "1"
                MenuPrompt = "           DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
                MenuPrompt = MenuPrompt & "            Please choose from the following menu choices:" & vbCrLf
                If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & "CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
                Choice = Sc.ButtonBox(MenuPrompt, 0, "Read Options", "Read to BIN", "Special Read", "Main")
                Select Case Choice
'Read to BIN
                    Case "1"
                        If PrepCard = UCase(True) Then
                            Call GetFileName()
                            Call ReadCard()
                        End If
                            If Mode <> UCase(True) then Call ShutDownCard()
'Read Special
                    Case "2"
                        If PrepCard() = UCase(True) then Call ReadSpecial()
                        If Mode = UCase(False) Then Call ShutDownCard()
'Main
                    Case "3"
                        If Mode = UCase(False) then Call ShutDownCard()
'Exit
                    Case Else
                        Call ShutDownCard()
                        Sc.Print VbCr & "End Time:   " & now
                        Exit Sub
                End Select
'Write Card
            Case "2"
                Choice = Sc.ButtonBox(MenuPrompt, 0, "Write Options", "Write BIN", "Write HEX", "Special Write", "Main")
                Select Case Choice
'Write Bin
                    Case "1"
                        If PrepCard() = UCase(True) Then
                            Call GetFile()
                            Call WriteCard()
                            Call Check2000()
                        End If
                        If Mode = UCase(False) then Call ShutDownCard()
'Write Hex
                    Case "2"
                        If PrepCard() = UCase(True) Then Call WriteHex()
                        If Mode = UCase(False) Then Call ShutDownCard()
'Write Special
                    Case "3"
                        If PrepCard() = UCase(True) Then Call WriteSpecial()
                        If Mode = UCase(False) Then Call ShutDownCard()
'Main
                    Case "4"
                        If Mode <> UCase(True) then Call ShutDownCard()
'Exit
                    Case Else
                        Call ShutDownCard()
                        Sc.Print VbCr & "End Time:   " & now
                        Exit Sub
                    End Select
'3M
            Case "3"
                If PrepCard() = UCase(True) Then
                    Tool = "3M"
                    Call MMM()
                    If Mode <> UCase(True) then Call ShutDownCard()
                        End If
                'If Tool = "" Then Exit Sub
'Main
            Case "4"
                If Mode <> UCase(True) then Call ShutDownCard()
'Exit
            Case Else
                Call ShutDownCard()
                Sc.Print VbCr & "End Time:   " & now
                Exit Sub
            End Select
'Clean Card
    Case "3"
        MenuPrompt = VbTab & "           DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
        MenuPrompt = MenuPrompt & VbTab & "            Please choose from the following menu choices:" & vbCrLf
        If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & "CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
        Choice = Sc.ButtonBox(MenuPrompt, 0, "Clean Options", "Without DSW6", "With DSW6", "Clean PPV", "Main")
        Select Case Choice
'Without DSW6
            Case "1"
                If PrepCard = UCase(True) Then Call CleanCard()
                If Mode <> UCase(True) then Call ShutDownCard()
'DSW6
            Case "2"
                If PrepCard = UCase(True) Then
                    DSWInst = UCase(True)
                    Call CleanCard()
                End If
                If Mode <> UCase(True) then Call ShutDownCard()
'Clean PPV
            Case "3"
                If PrepCard() = UCase(True) Then Call CleanPPV()
                If Mode <> UCase(True) Then Call ShutDownCard()
'Main
            Case "4"
                If Mode <> UCase(True) then Call ShutDownCard()
'Exit
            Case Else
                Call ShutDownCard()
                Sc.Print VbCr & "End Time:   " & now
                Exit Sub
            End Select

'Utilities
    Case "4"
        MenuPrompt = VbTab & VbTab & "               DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
        MenuPrompt = MenuPrompt & VbTab & VbTab & "                Please choose from the following menu choices:" & vbCrLf
        If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & VbTab & "  CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
        Choice = Sc.ButtonBox(MenuPrompt, 0, "Utilities", "Area Info", "Fix 4th byte", "UnMarry", "Alt EEPROM", "Main")
        Select Case Choice
'Area Info
            Case "1"
                If PromptAreaInfo = 1 and UseDefaultAreaInfo = 1 then
                    PromptString = "Would you like to use the defaults?"
                    RetVal = Sc.ButtonBox(PromptString, DefaultButton + vbQuestion, "Area Info", "Yes", "No")
                    If RetVal = 1 then Call AreaInfo()
                    If RetVal = 2 then Call GetAreaInfo()
                End If
                    If PromptAreaInfo = 1 and UseDefaultAreaInfo = 0 then Call GetAreaInfo()
                    If PromptAreaInfo = 0 and UseDefaultAreaInfo = 1 then Call AreaInfo()
                    If PrepCard() = UCase(True) then Call WriteAreaInfo()
                    If Mode <> UCase(True) then Call ShutdownCard()
'4th Byte
            Case "2"
                If PrepCard() = UCase(True) then Call Fix4thByte()
                If Mode <> UCase(True) then Call ShutDownCard()
'UnMarry
            Case "3"
                If PrepCard() = UCase(True) then Call UnMarryIRD()
        If Mode <> UCase(True) then Call ShutDownCard()
'Alt EEPROM
            Case "4"
        MenuPrompt = VbTab & VbTab & VbTab & "Alternate EEPROM Utilities" & vbCrLf & vbCrLf
        MenuPrompt = MenuPrompt & VbTab & VbTab & "Please choose from the following menu choices:" & vbCrLf
        If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & VbTab & "  CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
        Choice = Sc.ButtonBox(MenuPrompt, 0, "Alternate EEPROM", "Fix EEPROM", "Check EEPROM", "IRD EEPROM", "Exit")
        Select Case Choice
            Case "1"
                AltEEGL = UCase(True)
                If PrepCard() = UCase(True) Then Call FixAltEEPROM()
                AltEEGL = UCase(False)
            Case "2"
                AltEEGL = UCase(True)
                If PrepCard() = UCase(True) Then Call ReadAltEEPROM()
                AltEEGL = UCase(False)
            Case "3"
                ModChoice = Sc.ButtonBox("NOTE: This process will cause all further card I/O to be misrepresentative..." & VbCr & "I strongly encourage you to not attempt any further operations with this" & VbCr & "card until it has been in the IRD following completion of this process.",vbQuestion, "ALTERNATE EEPROM", "OK", "Back")
                If ModChoice = 1 Then
                    ModChoice = "AltEEPROM"
                    If PrepCard = UCase(True) Then Call IRDAltEEPROM()
                    Call ShutDownCard()
                End If
'Main
            Case "4"
                If Mode <> UCase(True) then Call ShutDownCard()
'Exit
            Case Else
                Call ShutDownCard()
                Sc.Print VbCr & "End Time:   " & now
                Exit Sub
            End Select
'Main
            Case "5"
                If Mode <> UCase(True) then Call ShutDownCard()
'Exit
            Case Else
                Call ShutDownCard()
                Sc.Print VbCr & "End Time:   " & now
                Exit Sub
            End Select
'TEST
    Case "5"
        MenuPrompt = VbTab & VbTab & "               DizzyDen's UnLooper and Glitch Loader/Cleaner" & vbCrLf & vbCrLf
        MenuPrompt = MenuPrompt & VbTab & VbTab & "                Please choose from the following menu choices:" & vbCrLf
        If EPROMKey <> "*" Then MenuPrompt = MenuPrompt & VbCr & VbTab & "  CARD IS BOOTED...DON'T FORGET TO SHUT IT DOWN...CARD IS BOOTED"
        Choice = Sc.ButtonBox(MenuPrompt, 0, "DizzyDen's HU UnLooper and Glitch Testing Menu", "Card Info", "Check 2000", "Boot Card", "Shutdown Card", "Main")
        Select Case Choice
'Card Info
            Case "1"
                If GetATR() = True Then Call ReadInfo()
                If GetATR() = False Then Call CardIsLooped()
                If Mode = UCase(False) Then Call ShutDownCard()
'Check 2000
            Case "2"
                If PrepCard() = UCase(True) Then Call Check2000()
                If len(Bytes) < 8 and RetVal = 4 Then Call Check2000()
                If Mode = UCase (False) Then Call ShutDownCard()
'Boot Card
            Case "3"
                Mode = UCase(False)
                Call ShutDownCard()
                If PrepCard() = UCase(True) Then
                    Mode = UCase(True)
                    tmp = Sc.MsgBox("IT IS IMPORTANT YOU COME BACK TO THE TEST MENU" & VbCr & "AND SHUTDOWN THE CARD BEFORE FINISHING WITH IT!!!",0,"CARD IS BOOTED")
                End If
'Shutdown Card
            Case "4"
                Call ShutDownCard()
                Mode = UCase(False)
'Main
            Case "5"
                If Mode <> UCase(True) then Call ShutDownCard()
'Exit
        Case Else
            Call ShutDownCard()
            Sc.Print VbCr & "End Time:   " & now
            Exit Sub
        End Select
'EXIT
    Case Else
        Call ShutDownCard()
        Sc.Print VbCr & "End Time:   " & now
        Exit Sub
    End Select
    Loop While True = True
End Sub

Sub Unloop()
    FCard = UCase(False)
    Sc.Verbose = False
    RetVal = 1
    Looped = 1
    Call ShutDownCard()
    Call IsCardPresent()
    If DefChkATR = 1 and GetATR() = True then RetVal=Sc.ButtonBox("This card appears to have a good ATR"& VbCr & VbTab & "Unloop anyway?",  vbDefaultButton1 + vbQuestion, "Unlooper", "Yes", "No")
    If RetVal = 1 Then
        If CrdTyp = " " then CrdTyp = Sc.ButtonBox("It helps to know which card you are attempting to glitch into,if you are unsure, I "&VbCr&"recommend looking on the card or selecting the 5B/6B since it will start narrow "&VbCr&"and the others are slower. The utils will use the broad glitches if needed.",vbQuestion, "Which Glitch", "5B/6B", "4B", "Stubborn")
        If CrdTyp = "0" then Exit Sub
        If CrdTyp = "1" then CrdTyp = "5B/6B"
        If CrdTyp = "2" then CrdTyp = "4B"
        If CrdTyp = "3" then CrdTyp = "Stubborn"
        Call FFCard()
        HUBinfile = False
        ScriptStart = Now
        If BootROM() = 1 then
            Call GetFile()
            If HUBinFile = True then
                Call WriteCard()
                call ShowAtr(2)
                Call ShutDownCard()
                If Looped = 0 or Looped = 2 Then Exit Sub
                If DefChk2K = 0 then
                    If DefAltEEPROM = 2 Then ModChoice = Sc.ButtonBox("Do you want to use INS Glitching to repair the Alternate EEPROM?" &VbCr & "SELECT NO IF YOU HAVE WRITTEN A BIN WITH GLITCH BLOCKING",vbQuestion, "FIX ALT EEPROM", "OK", "Skip")
                    If DefAltEEPROM = 1 or ModChoice = 1 Then
                        AltEEGL = UCase(True)
                        If PrepCard() = UCase(True) Then Call FixAltEEPROM()
                        AltEEGL = UCase(False)
                    End If
                    Call ShutDownCard()
                    Exit Sub
                End If
                If DefAltEEPROM = 2 Then RetVal = Sc.ButtonBox("Do you want to use INS Glitching to repair the Alternate EEPROM?",vbQuestion, "ALTERNATE EEPROM", "OK", "Skip")
                If DefAltEEPROM = 1 or (DefAltEEPROM = 2 and RetVal = 1) Then
                    AltEEGL = UCase(True)
                    If PrepCard() = UCase(True) Then Call FixAltEEPROM()
                    AltEEGL = UCase(False)
                End If
                If DefChk2K = 2 then RetVal=Sc.ButtonBox("   Do you want to use INS glitching to ensure no 2000 area corruption?" &VbCr & "SELECT NO IF YOU HAVE WRITTEN A BIN WITH GLITCH BLOCKING",  vbDefaultButton2 + vbQuestion, "Check 2000", "Yes", "No")
                If DefChk2K = 1 or (DefChk2K = 2 and RetVal = 1) then
                    If PrepCard() = Ucase(True) then
                        InFile = Fs.FileOpen(FileName, fsoOpenRead)
                        Call Write2000()
                        Call Check2000()
                        Fs.FileClose(InFile)
                        Call ShutDownCard()
                        Exit Sub
                    End If
                Else
                    Call ShutDownCard()
                End if
            End if
        End if
        Call ShutDownCard()
    End If
end sub

Sub GetFileName()
    Sc.Verbose = False

    If FileName = "" Then FileName = "Default.bin"
    FileName = Fs.FileSaveDialog(FileFilter, "Please select a name for the new bin file", FileName)
    If FileName <> "" Then OutFile = Fs.FileCreate(FileName)
end sub

Sub GetFile()
    Sc.Verbose = False
    Dim FileSize

Do
    FileName = Fs.FileOpenDialog(FileFilter, "Please select a valid HU Eprom (*.bin) file", "Default.bin")
    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            InFile = Fs.FileOpen(FileName, fsoOpenRead)
        End If
    End If
    FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_END)
    if FileSize <> "8192" then
        Sc.MsgBox("This file is NOT a valid HU bin file" & vbcr & "or the bin file you are trying to open" & vbcr & "is being used by another program")
        HUBinFile = False
        Fs.FileClose(InFile)
    else
        HUBinFile = True
    end if
Loop Until HUBinFile = True
end sub

Sub FFCard()
    If UseDefFF = 0 or DefFF = 0 then Exit Sub
    If UseDefFF = 1 then FCard = UCase(True)
    If FCard <> UCase(True) then
        RetVal = Sc.ButtonBox("Do you want to FF the card before unlooping?",  vbDefaultButton1 + vbQuestion, "FF'er", "Yes", "No")
        If RetVal = 1 then FCard = UCase(True)
        If RetVal <> 1 then Exit Sub
    End If
    Sc.Verbose = False
    Dim RetValue
    Dim I
    Dim L

    Sc.Verbose = False
    for L = 1 to DefFF
        Sc.Write("B0 80")
        For I = &hA0 To &hD0
            if Chk4Card() = 0 then
                CrdTyp = "Removed"
                Exit Sub
            End If
            sc.write("A1")
            Call Sc.ProgressBox("Lets FF the card....", I-&h9F, &h30, "Let's REALLY FF up The Card....")
            Sc.Write("0a 01 20 04 94 09 20 00 " + Hex(I) + " 09 00")'
            Sc.Read(2)
            RetValue = Sc.GetByte(1)
            sc.write("A0")
        Next
    Next
    Call Sc.ProgressBox("",0,80,"")
    sc.write("A0")
End Sub

Sub IsCardPresent()
    Sc.Verbose = False
    Dim RetValue
    Dim GotInput

    ScriptStart = Now
Do
    Sc.Write("A0")                ' turn the LED off
    Sc.Write("80")                'Is card present?
    Sc.Delay(SCDel)
    If Sc.BytesInBuffer > 0 then
        Sc.Read(&h01)
        RetValue = Sc.GetByte(0)
    end if
    If RetValue = &h0 then
        Call Sc.ProgressBox ("*** Please insert your card... ***", 1, 999, "Checking for card....")
        GotInput = False
    else
        If RetValue = &hFF then
            GotInput = True
            Call Sc.ProgressBox ("",0,0,"")
        else
            If RetValue <> &h0 or RetValue <> &hFF then
                Sc.Write("A0")                ' turn the LED off
                If Sc.BytesInBuffer > 1 then
                    Sc.Read(&h02)
                    GotInput = False
                else
                    GotInput = False
                end if
            end if
        End if
    End if
Loop Until GotInput = True
end sub

Function GetATR ()
    Sc.Verbose = False
    Dim temp

    Sc.Write("06100E10019300") 'reset
    Sc.Delay(SCDel)
    Sc.Read(&h02)
    temp = Sc.GetByte(&h01)
    Sc.Read (temp)
    if(temp <> 20) then
        GetATR = False
    else
        GetATR = True
    end if
End Function

Function Chk4Card()
    Sc.Verbose = False
    Dim tmp

    sc.write("80")
    Sc.Delay(SCDel)
    if sc.read(1) = 1 then
        tmp=sc.getbyte(0)
        If tmp = &h0 then
            Chk4Card=0
            sc.write("A0")
            Call Sc.ProgressBox(0,0,0,0)
            sc.MsgBox("Card removed, process ended prematurely")
            Call ShutdownCard()
            Exit Function
        else
            Chk4Card=1
        end if
    end if
End Function

Sub CardIsLooped ()
    Sc.MsgBox("Card is not returning an ATR." &VbCr & "The card may not be fully Inserted" & VbCr &" or the card contacts may be dirty." & VbCr & "If everything is ok then the card is looped"&VbCr& "You must Unloop the card before using this option ")
    Looped=Sc.ButtonBox("This card is not returning a valid ATR"& VbCr & "Do you want to Unloop this card?", vbDefaultButton1 + vbQuestion, "Unloop? INVALID ATR....", "Unloop","Back")
    If Looped = 1 then call Unloop()
    If Looped = 2 or Looped = 0 then Exit Sub
End Sub

Function ShowAtr(DisplayType)
    Sc.Verbose = False
    Dim cnt,tmp,b,Msg

    Msg="ShowATR"
    tmp=""
    sc.write("0610010E109300")'reset
    if Sc.Read(&h02) > 1 then
        cnt = sc.getbyte(1)
    else
        cnt = 0
    end if
    tmp=VbCr+"Card Unlooped Successfully... ATR Returned:"+VbCr
    if cnt > 0 then
        cnt = sc.read(cnt)
        for b = 0 to cnt -1
            tmp=tmp & HexString(sc.getbyte(b),2) & " "
            If b = 0 and HexString(sc.getbyte(b),2) = "FF" Then
                tmp = ""
                Call CardIsLooped()
                Exit Function
            End If
        next
        sc.print (tmp) & VbCr
    else
        tmp="Card did not return an ATR"+VbCr+"Try to unloop the card again"+VbCr
        tmp=tmp+"This happens sometimes when the card"+VbCr
        tmp=tmp+"doesn't take the eeprom write"
        cnt = Sc.ButtonBox(tmp, 0,Msg , "Ok")
    end if
End Function

Sub ProgUpdate(pg,atrlock,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,CrdDel)
    Sc.Verbose = False
    Dim i,Msg

    EH = int(FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 24, 2, True, True, True))
    EM = int(FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 1440, 2, True, True, True))
    ES = int(FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 86400, 0, True, True, True))

    If ES => 60 then
        sec = false
        do
            ES = ES - 60
            if ES < 60 then sec = true
        loop while sec = false
    End If
    If EM => 60 then
        min = false
        do
            EM = EM - 60
            if EM < 60 then min = true
        loop while min = false
    End If
    ES = Hex2Dec(HexString(ES,2))
    EM = Hex2Dec(HexString(EM,2))
    EH = Hex2Dec(HexString(EH,2))
    If len(ES) < 2 then ES = "0" & ES
    If len(EM) < 2 then EM = "0" & EM
    If len(EH) < 2 then EH = "0" & EH

    Msg="Card Delay: " & CrdDel & VbTab & VbTab & VbTab & VbTab & "Elapsed Time: " & EH & ":" & EM & ":" & ES
    Msg=Msg+VbCr & VbTab & "D1-DA: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & ", " & DA
    if atrlock = 1 then
        Msg=Msg & VbCr & "ATR is locked." & VbTab & VbTab & VbTab & "ATR Responce Indicator:"
    else
        Msg=Msg & VbCr & VbTab & VbTab & "Attempting to lock onto ATR..."
    end if
    Call Sc.ProgressBox(Msg,pg,50,"DizUtils")
End Sub

Function HexString(Number,Length)
' This function takes 2 arguments, a number and a length.  It converts the decimal
' number given by the first argument to a Hexidecimal string with its length
' equal to the number of digits given by the second argument
    Sc.Verbose = False
    Dim RetVal
    Dim CurLen

    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then RetVal=String(Length-CurLen,"0") & RetVal
    HexString=RetVal
End Function

Function Hex2Dec(HexNumber)
' This function takes 1 argument, a string containing a hex value of any digit length
' and returns the decimal equivalent
    Sc.Verbose = False
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)
    For Digit = 1 To DigitCount
        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next
End Function

Sub WriteViaLoader(address,data,options) ' Write up to 32 bytes at a time
    Dim dLen
    Dim tlen
    Dim parm1
    Dim parm2
    Dim i,t
    Dim datalen
    Dim addresslow
    Dim tmp
    Dim Xored
    Dim datarray(31)
    Dim datalength

    dLen = (Len(data)/2)
    tLen = HexString(((Len(data)+16)/2),2)
    parm1 = Hex(dLen + &hC2)
    parm2 = Hex(dLen + &h7F)
    If Ucase(options) = "E" Then
        'Convert and Split up data String to an array
        t = 0
        For i = 1 To Len(data) Step 2
            tmp = Mid(data, i, 2)
            datarray(t) = (Hex2Dec(tmp))
            t = (t + 1)
        Next
        addresslow = Hex2Dec(Mid(address, 3, 2))     'Get lower byte for offset
        addresslow = (addresslow And &h7)             'Strip bits for offset 0-7
        If UBound(datarray) > 32 Then
            Exit Sub
        End If
        datalength = (Len(data) / 2)
        'Encrypt
        t = 0
        For i = addresslow To datalength + addresslow - 1
                Xored = Xored & HexString(datarray(t) Xor Hex2Dec(XoredByte(i)), 2)
            t = (t + 1)
        Next
        data = Xored
    End if
    Sc.Write("A1")
    Sc.Write(tLen & " " & parm1 & " " & parm2 & " " & address & " " & data & " " & "0EFF8000")
    Sc.Read(&h03)
    Sc.Write("A0")
End Sub

Sub WDTMR()
    Sc.Verbose = False
    Dim RetValue

    Sc.Write("05150E108000")'SET WDTMR
    Sc.Delay(SCDel * 4)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read(RetValue)
end sub

Function BootINS()
    Sc.Verbose = False
    Dim RetValue
    Dim GotInput
    Dim Counter
    Dim RNDNUM
    Dim Cycle
    Dim DefINS,DefINSGlCnt

    If BootStrap() = True Then Exit Function
    DefINS = UseDefINS
    If DefINS = 2 then DefINS = Sc.ButtonBox("Do you want to use Default INS Glitching parameters?", DefaultButton1 + vbQuestion, "INS Glitch", "Yes", "No")
    DefINSGlCnt = 0
Do
    If DefINS = 1 then DefINSGlCnt = DefINSGlCnt + 1
    If GetATR() = False Then
        Call Sc.ProgressBox("",0,0,"")
        Call CardIsLooped()
        Exit Function
    End If
    RNDNUM = RND()
    Sc.Write("020200")
    Sc.Read(&h02)
    If Cycle <= 4 Then
        Counter = Counter + 1
        Sc.Write("A1")
        GotInput = False
        If Counter = 1 Then Read = "48"
        If Counter = 24 Then Read = "4C"
        If Counter = 48 Then Read = "2E"
        If Counter = 72 Then Read = "5C"
        If Counter = 96 Then
            Counter = 0
            Cycle = Cycle + 1
        End If

        If DefINS = 1 and DefINSGlCnt <= 50 Then
            Call Sc.ProgressBox ("Glitching..." & vbtab & "DAC:"& vbtab & HexString(DAC,2) & vbtab & vbtab & "DAC4C: " & vbtab &  HexString(DAC4C,2) & vbcr & Read & vbtab & vbtab & "Delay:" &vbtab & HexString(INSDelay,2) & vbtab & vbtab & "Delay5C:" & VbTab & HexString(Delay5C,2), DefINSGlCnt, 50, "Tryin to get in...")
            If INSGlitch <> " " then Read = INSGlitch
            If InsGlDAC <> &h00 then DAC = InsGlDAC
            If InsGlDAC4C <> &h00 then DAC4C = InsGlDAC4C
            If InsGlDel <> &h00  then InsDelay = InsGlDel
            If InsGlDel5C <> &h00 then Delay5C = InsGlDel5C
            If DAC < &h80 or DAC > &h8D then DAC = INT(RNDNUM *&h0D) + &h80
            If INSDelay < &h0A or INSDelay > &h0C then INSDelay = INT(RNDNUM *&h02) + &h0A
            If DAC4C < &h71 or DAC4C > &h86 then DAC4C = INT(RNDNUM *&h15) + &h71
            If Delay5C < &h04 or Delay5C > &h06 then Delay5C = INT(RNDNUM *&h02) + &h04
        End If
        If DefINS <> 1 Then
            DAC = INT(RNDNUM *&h0D) + &h80      '80 - 8D
            INSDelay = INT(RNDNUM *&h02) + &h0A '0A - 0C
            DAC4C = INT(RNDNUM *&h15) + &h71    '71 - 86
            Delay5C = INT(RNDNUM *&h02) + &h04  '04 - 06
        End If
        If DefINS <> 1 Then Call Sc.ProgressBox ("Glitching..." & vbtab & "DAC:"& vbtab & HexString(DAC,2) & vbtab & vbtab & "DAC4C: " & vbtab &  HexString(DAC4C,2) & vbcr & Read & vbtab & vbtab & "Delay:" &vbtab & HexString(INSDelay,2) & vbtab & vbtab & "Delay5C:" & VbTab & HexString(Delay5C,2), Counter + 1, 97, "Tryin to get in...")
        Sc.Write("06100E10019300")
        Sc.Delay(SCDel * 2.5)
        Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)
        Sc.Write("B0" & HexString(DAC4C,2))
        If Read = "48" then Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
        If Read = "4C" then Sc.Write("0B 15 C4 48 4C FF 56 B9 70 C9 08 00")
        If Read = "2E" then Sc.Write("0B 15 C4 48 2E FF 56 B9 70 CA 08 00")
        If Read = "5C" then Sc.Write("12 1A C4 48 5C 00 00 04 80 20 00 3F 09 83 0B" & HexString(Delay5C,2) & HexString(INSDelay,2) & "8100")
        If Read <> "5C" Then Sc.Delay(SCDel * 2.5)
        If Read = "5C" Then Sc.Delay(SCDel * 5)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)
        End If
        Sc.Write("32EF0000000069FFFFFFFF523FFD2284E172400772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000")
        Sc.Delay(SCDel * 2.5)
        Sc.Read(&h02)
        Sc.Write("B0" & HexString(DAC,2) & "09 15 C0 00 20 00 " & INSDelay & " 09 80 00")
        Sc.Delay(SCDel * 2.5)
        Sc.Read(&h02)
        If Sc.GetByte(&h0) = &h09 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If
    Else
        If DefUnInt = 0 And Cycle = 5 then
            Call Sc.ProgressBox ("", 0, 0, "")
            RetVal = Sc.ButtonBox("Would you like to continue glitching?", vbQuestion, "Continue", "Yes", "No")
            If RetVal = 2 then
                Call Sc.ProgressBox ("", 0, 0, "")
                Exit Function
            End If
            Cycle = 0
        End If
        Read = "48"
    End If
    If Chk4Card() = 0 Then
        Call Sc.ProgressBox("",0,0,"")
        Exit Function
    End If
    If DefINSGlCnt = 50 then DefINS = 0
Loop Until GotInput = True
    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Delay(SCDel * 2.5)
    Sc.Read(&h02)
    Call Sc.ProgressBox ("", 0, 0, "")
    Call ExtractCardInfo()
    BootINS = UCase(True)
    Booted = UCase(True)
    Sc.Print "INS Glitching: " & Read & VbTab & "DAC: " & HexString(DAC,2) & VbTab & "DAC4C: " & HexString(DAC4C,2) & VbTab & "Delay: " & HexString(INSDelay,2) & VbTab & "Delay5C: " & HexString(Delay5C,2) & VbCr
End Function

Function BootStrap()
    Sc.Verbose = False
    Dim RetValue

    BootStrap = False
    Sc.Write("0915C448" & HexString(Ins,2) & HexString(InsParam1,2) & HexString(InsParam2,2) & HexString(InsLen,2) & "8000")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    If RetValue > 0 Then
        Sc.Read (RetValue)
        If Sc.GetByte(0) = &h84 Then
            Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
            Sc.Delay(SCDel * 8)
            Sc.Read(&h02)
            BootStrap = True
         End If
    End If
End Function

Sub ReadCard()
    Sc.Verbose = False
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Data

    Address = 8192
    Eprom = 0
    Sc.Write("A2")
Do
    If Chk4Card() = 0 then Exit Sub
    Sc.Write("06C23F" & HexString(Address,4) & "BF00")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)
    Sc.Read (&h40)
    Call Sc.ProgressBox ("Reading EEPROM memory...", EPROM, 128, "Reading...Patience please...") ' For EPROM Read
    ThisByte = ""
    For ThisByte = 0 to 63
        sc.write("A1")
        call Fs.FilePutc(OutFile, Sc.GetByte(ThisByte))
        sc.write("A0")
    Next
    EPROM = EPROM + 1
    Address = Address + 64
    Call WDTMR()
loop until EPROM = 128
    Call Sc.ProgressBox ("", 0, 0, "")
    call Fs.FileSeek(OutFile, 0, fsoSEEK_SET)
    ThisByte = 0
    Data = ""
    For ThisByte = 0 to 3
        Data = Data & HexString(Fs.FileGetc(OutFile), 2)
    Next
    Fs.FileClose(OutFile)
        If Data = "00000000" Then
            Sc.MsgBox("There appears to be corrupted data in the 2000 area."  & VbCr & VbCr & "While this has never been used as a hash check before," &VbCr & "it could easily be used as a target." & VbCr & VbTab & "       Data: " & Data), vbCritical
            Exit Sub
        End If
        If Data = "FFFFFFFF" Then
            Call CardIsLooped()
            Exit Sub
        End If
        Sc.MsgBox("The 2000 - 2003 area appears to be free of corrupted data." & VbCr & VbTab & VbTab & "Data: " & Data)
End Sub

Sub WriteCard()
    Sc.Verbose = False
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Location
    Dim EPROMBytes
    Dim EPROMBytes2

    Address = 8192
    Location = 0
    Sc.Write("A2")
    call Fs.FileSeek(InFile, Location, fsoSEEK_SET)
Do
    If Chk4Card = 0 then Exit Sub
    EPROMBytes = ""
    For ThisByte = Location to (Location + 15)
        EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
    Next
    EPROMBytes2 = ""
    For ThisByte = (Location + 16) to (Location + 31)
        EPROMBytes2 = EPROMBytes2 & HexString(Fs.FileGetc(InFile), 2)
    Next
    EPROM = EPROM + 1
    If BootCard = 1 then
        Call WDTMR()
        Sc.Write("A1")
        Sc.Write("25E29F" & HexString(Address,4) & EPROMBytes & EPROMBytes2 & "00")
        Sc.Read(&h02)
        Sc.Write("A0")
    Else
        If Booted = UCase(True) then Call WriteViaLoader(HexString(Address,2), EPROMBytes & EPROMBytes2,"D")
    End If
    Call Sc.ProgressBox ("Writing EPROM memory..." & vbcr & HexString(Address,4) & ":  " & EPROMBytes & vbcr & HexString(Address + 16,2) & ":  " & EPROMBytes2, EPROM, 255, "Writing Card")
    Address = Address + 32
    Location = Location + 32
loop until EPROM = 256
    Call Sc.ProgressBox ("", 0, 0, "")
end sub

Sub CleanCard()
    Sc.Verbose = False
    Sc.Write("A2")
    If EPROMKey = "*" Then Call ExtractCardInfo()
    Call Sc.ProgressBox ("Cleaning Main Code...", 1, 44,"Cleaning Card")
    Call WriteViaLoader("2014","20DF","D")                                ' Fuse
    Call WriteViaLoader("2406","03E80000000000000000","E")                ' Limit, Act Date, Password
    Call WriteViaLoader("2410","00000000000000000000000000010000","E")    ' Zip, PPV Act
    Call WriteViaLoader("2420","00000000000000000000000100000000","E")    ' PPV Act
    Call WriteViaLoader("2430","00000000000000000001000000000000","E")    ' Sub
    Call WriteViaLoader("2440","00000000000000010000000000000000","E")    ' Sub
    Call WriteViaLoader("2450","00000000000000000000000000000000","E")    ' Sub
    Call Sc.ProgressBox ("Cleaning Main Code...", 2, 44,"Cleaning Card")
    Call WriteViaLoader("2460","00000000","E")                            ' Ird Slot 1
    Call WriteViaLoader("2464","090000","E")                              ' Rating
    Call WriteViaLoader("24A4","00000001","E")                            ' Ird Slot 2
    Call WriteViaLoader("24E0","A601","E")                                ' Time Zone
    Call WriteViaLoader("24E6","0000","E")                                ' DSW Counter
    Call WriteViaLoader("2500","00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","E")    ' Guide
    Call WriteViaLoader("2510","FFFF0000000000000000000000000000","E")    ' Guide
    Call WriteViaLoader("2520","00000000000000000000000000000000","E")
    Call WriteViaLoader("2530","00000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Main Code...", 3, 44,"Cleaning Card")
    Call WriteViaLoader("22F2","2210E37702270C8EE2B67610280575FC67D56A8CDCE712608EDB7E7D0029020B","D")
    Call WriteViaLoader("2312","982A30EF1D6102038CD4B5F97D40BE060375FED28CD15C40010017C5AA0060AB","D")
    Call WriteViaLoader("2332","0101C33D170FF5748028F98800603088003B327202068EE5ADF9726015882ACE","D")
    Call WriteViaLoader("2352","2A720204E700098A2ACFB34D006102EAF912088E3C96F9C5AA2AF8D024AA3F50","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 4, 44,"Cleaning Card")
    Call WriteViaLoader("2372","13248E3C96C35D080FEEF900","D")
    Call WriteViaLoader("23B3","982A30EF70012A8E3C96C704EDD70904E0D5088827052A8ED1B0F98ED21D8E","D")
    Call WriteViaLoader("23D2","3C96F9C58E23F5F4CC2E2A0F0C8E23F5F4CC2A2E0F07223FE6D32CD32CC35D0C","D")
    Call WriteViaLoader("23F2","0FE2F99A2CD02DD32C9A2CD02ED32CF9FFFFFFFF","D")
    Call WriteViaLoader("2690","0000000000000000B3B8BDC2C7C7C7C7C7C7C7C7C7B3B3B3B3B3CCD1D1D1D1D1","D")
    Call WriteViaLoader("26B0","D1D6DB06C9DC3E1306C9DC3E2B08C9DC3E4306C9DC3E6301C9DC3E7B04C9DC3E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 5, 44,"Cleaning Card")
    Call WriteViaLoader("26D0","7F01C9DC3E8F01C9DC3E9303C9DC3E97FFC8A0CE0D16F082AC8602C081580703","D")
    Call WriteViaLoader("26F0","0000FF40000000000000000000000000DFE1F01A00DFE1003800DF83043800D5","D")
    Call WriteViaLoader("2710","13011800D912031800D597001820D59B001820DAE50B1800D8B1812820D7AF82","D")
    Call WriteViaLoader("2730","3800385003D000289E051C00DFE1023800DABE122860D7B30328E0D6A1012860","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 6, 44,"Cleaning Card")
    Call WriteViaLoader("2750","DFE2002860D7F3822860D4110828E0D883003800DF7F00380028C50D28E0DEBA","D")
    Call WriteViaLoader("2770","0228E0D834042860D8B8082860D8DE003800D8D7043800D90B033800D93B2338","D")
    Call WriteViaLoader("2790","00D9CEF03800DAB7003860DAD0003820DAD4023860DB16043800D42A052860DB","D")
    Call WriteViaLoader("27B0","2800181022F2F01800DFF0042860DD808D28E0D9CEF03800DB4C853860DFE101","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 7, 44,"Cleaning Card")
    Call WriteViaLoader("27D0","180028A1883C002308E12860D5E7821800D667842860DB9FD52860E002822860","D")
    Call WriteViaLoader("27F0","DBD0813800D809D29000DFE1F09000383003F000D9608628E02FC79028A02F10","D")
    Call WriteViaLoader("2810","8028A02ABF89D000DB4C8528E02F088428E0DE458C28E0DE548628E05507AA24","D")
    Call WriteViaLoader("2830","B843000EAA2650130EF9D1FEFEAAFFFD8E3F3D2DF78C2F5C8E3F5812399B3012","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 8, 44,"Cleaning Card")
    Call WriteViaLoader("2850","3AF4EB0130F9B8C8D829D82AC5AA2AF0D007AA3F481307AB00DDC35D080FEE22","D")
    Call WriteViaLoader("2870","A064AB00DDC35D100FF5C59A30AB00ED700130C33D060FF38C3039008CC2988C","D")
    Call WriteViaLoader("2890","C0EC8C3EEB8C3B068C3B348C38198C39788CC27A8C3C968C393A8CE0748C2F43","D")
    Call WriteViaLoader("28B0","8C37008CE30E8C3D128C37808C37708CE0438C3C968C3D568CD6B28C29C48C2F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 9, 44,"Cleaning Card")
    Call WriteViaLoader("28D0","568C31818C3F378C2AC58C3B558C3B798C36EA8CC4308C33B78C2F9D8CD6F68C","D")
    Call WriteViaLoader("28F0","31038CD3438C36F58C231E8C37738C3ED08C305C8CEC9C8C37728C377220203F","D")
    Call WriteViaLoader("2910","EF00000000000000000000000000000000000000000000000000000000000000","D")
    Call WriteViaLoader("2930","000000000000000000000000005CDA5EFA8F6152EA1CFED0C6043DA97745BB98","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 10, 44,"Cleaning Card")
    Call WriteViaLoader("2950","231803ECF766BD3570C1DF224A8EA4599B94A5B8FF490C27663B80DE52CD7AE1","D")
    Call WriteViaLoader("2970","134DAAF79438C92552BC617F8016EE03DB01298401005C0A3C7D919AC5AA24B8","D")
    Call WriteViaLoader("2990","AB00EDAA2650AB00F5C35D080FEFC522A064AB00DDC35D100FF58800ED2A8800","D")
    Call WriteViaLoader("29B0","DD2C7210FD8E3EB272DD158824B02A721004E7F9C877202703757F2775EF2742","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 11, 44,"Cleaning Card")
    Call WriteViaLoader("29D0","2A0275F727751F02731F02D3024D04020F034204024C0204F750113215D80298","D")
    Call WriteViaLoader("29F0","2A347780270DD105D50E322A8E283A3205000A77202703B50003AA0000764027","D")
    Call WriteViaLoader("2A10","0ED0039A2AB81303D40315030206B99B2A740827C370012ADA02C7D402770827","D")
    Call WriteViaLoader("2A30","07882AA72A8E2A9575F7273215F75011762027277780270DD105D50E32348E28","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 12, 44,"Cleaning Card")
    Call WriteViaLoader("2A50","3A32050003AA00007640270AD0039A341303150302059B34740827C3700134DA","D")
    Call WriteViaLoader("2A70","02CED11577082707882AB32A8E2A9598342A7D0004020389FF45757F2775DF27","D")
    Call WriteViaLoader("2A90","75BF27C4F9C59A2AAB00ED70012AC35D0C0FF38E00EDF9F76011F761118EE7AE","D")
    Call WriteViaLoader("2AB0","8CE799F76211F763118EE7AE8CE7998EDCBB8CD5537702120225FE8CC89E0000","D")
    Call WriteViaLoader("2EF8","A5A5A5A5A5A5A5A5A5A5A5A500FFFFFF7601D001F98CDE3A720504882ACE2A8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 13, 44,"Cleaning Card")
    Call WriteViaLoader("2F18","E6A0720C048824F42A8EE6A02202E377022701F9D5D08EE02F8824662E882406","D")
    Call WriteViaLoader("2F38","2C8EC5078822F22E8CD8992D00F406E0938EE0F3771026034224938CE0D47223","D")
    Call WriteViaLoader("2F58","038CC0C1062FAAFFFC2DD80628B4B4C4D50BF4D9002A0EC8322A8E2F8FC4D00E","D")
    Call WriteViaLoader("2F78","AA006043000E440E0BC3D32A3D070FE2B4B4120BF932FE5507AA24C043000EAA","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 14, 44, "Cleaning Card")
    Call WriteViaLoader("2F98","2658130EF97DFF6002038CD9E51217021D7202078EDA993260CD5D030B10AA2A","D")
    Call WriteViaLoader("2FB8","D01D6102060FE6770160E27480D3F98EDC9977022745C5AA0064AB00EDC35D0C","D")
    Call WriteViaLoader("2FD8","0FF5AA297CAB00EDC35D100FF58829412A8800ED2C7210FD8E3EB2C5AA00EDD0","D")
    Call WriteViaLoader("2FF8","0BAA0064130BAB0064C35D0C0FEE8824F42A720C047264158CDC54F9E2880100","D")
    Call WriteViaLoader("3018","30E9D50BC5AA24F4D009AA2AE4130944000BC35D0C0FEE120B02032205E68CD0","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 15, 44, "Cleaning Card")
    Call WriteViaLoader("3038","0D225064AB00EDC35D100FF58800DD2A8800ED2C7206FD8E3EB298EE3AD42AD4","D")
    Call WriteViaLoader("3058","29C4B4F975BFCF32BEAA3073D029AA3074D02A8EC37A9E2A8C3404C358CE77C7","D")
    Call WriteViaLoader("3078","ECCFF8C358C358C358C358C358C7FBC358C358C358C358C358C358C358C358C3","D")
    Call WriteViaLoader("3098","58C358C7F5CF56C806C6A4CCC43EDCC358CF08C983C358C358C358D0EED0EE30","D")
    Call WriteViaLoader("30B8","143F20CE3F3710C6E4C358C358CEAD3BA1C9A0CEB83722C8A0C5498E311C9A2A","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 16, 44, "Cleaning Card")
    Call WriteViaLoader("30D8","D02B70012A9A2AD02C9E2C8ED27812088ED310D517120802088E23CED0178ED3","D")
    Call WriteViaLoader("30F8","108CD25A7D87080FD200057D80080BF48A2ACE2D02020AF4CA2A270506032240","D")
    Call WriteViaLoader("3118","E68CD242320855075A0788312F2A4B012A4900298CD1B03190F0382023693280","D")
    Call WriteViaLoader("3138","CF382023632329D23810237C233D823800237CDFE1F038202369DFE1823800","D")
    Call WriteViaLoader("3159","235982386023698E311C7D82080B258ED3AE770227058ED4079E194B17388C","D")
    Call WriteViaLoader("3178","D3807D87080FE1000C7610B6032241E67D80080BED8CD36C220F8E32718824C8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 17, 44, "Cleaning Card")
    Call WriteViaLoader("3198","3088009E32720206EB4D609E060A4261244C9F2402020314D39E4D609E060C4D","D")
    Call WriteViaLoader("31B8","629F0607426124D3240001F9C5AA0063AB0090C35D0C0FF5C5AA0090AB0070C3","D")
    Call WriteViaLoader("31D8","5D0C0FF5AA2931AB0090C35D100FF58829712A8800902C7210FD8E3EB2C5AA00","D")
    Call WriteViaLoader("31F8","70D00EAA0090130EAB0090C35D100FEED72404C4D50BC5AA2EECD00EAA009043","D")
    Call WriteViaLoader("3218","000E440E0BC35D0C0FED120B0202009B726315882EEC2A720C04E78800603088","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 18, 44, "Cleaning Card")
    Call WriteViaLoader("3238","24C832720206ED1217028022038E32714261FD98622A753F291260B7B7D0048E","D")
    Call WriteViaLoader("3258","32717780FD0D88006030982A32420406ED00D4726015E700CE42170BD0178ED3","D")
    Call WriteViaLoader("3278","D54C170B420B17F97440CF22038E3271126202042D040F01F98824E63088009E","D")
    Call WriteViaLoader("3298","32720206EBF4CC9F610A057D0162021206E68824CA30EFB002DE2507B34D0062","D")
    Call WriteViaLoader("32B8","06D698619F3262224CC702072231C7020222401D1706C1720C04882EF82A8EE6","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 19, 44, "Cleaning Card")
    Call WriteViaLoader("32D8","A03262D1FFC70658220C8E3271C5AA0060AB00DDC35D0C0FF5AA297CAB00DDC3","D")
    Call WriteViaLoader("32F8","5D100FF58829412A8800DD2C7208FD8E3EB2C5AA0060D00EAA00DD130EAB00DD","D")
    Call WriteViaLoader("3318","C35D0C0FEE72DD15882EE02A720C04E7882DE02A8E337C882E002A8E337C002B","D")
    Call WriteViaLoader("3338","C7061A22118E327188006030882AD332721106ED882E202A8E337C000E882E40","D")
    Call WriteViaLoader("3358","2A8E337C882E602A8E337C88009E308824E632720206ED12FF8824CA30EA75BF","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 20, 44, "Cleaning Card")
    Call WriteViaLoader("3378","CF89FF1422208E327188006030982A32722006EDF98824CA30EF2507F9B87260","D")
    Call WriteViaLoader("3398","BE8E3537D4BE002512BE2D5C0BEF7640CFEB0019D7D78E338D2D030BEB000EC5","D")
    Call WriteViaLoader("33B8","B5AB00DAC35D260FF812D706E722908CC38F52FF8E351F120B0239002C300100","D")
    Call WriteViaLoader("33D8","60C5AA0101AB0061C33D600FF58824E63088009E32720206EBF4CC9F6202D300","D")
    Call WriteViaLoader("33F8","088824CA30EFB002D48900AE768028F1F98CC27A5D0C06F9C5AA2951AB0100C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 21, 44, "Cleaning Card")
    Call WriteViaLoader("3418","5D100FF5882AD330EFD00BC5AA0063AB0100C33D0B0FF5C5AA0100AB0140C35D","D")
    Call WriteViaLoader("3438","100FF58829612A8801002C7204FD8E3EB2223C8E3ECBD5DB32DBC2A801002C8E","D")
    Call WriteViaLoader("3458","ECA58EECA5C59A2CD009AA014013099B2CF4EB102CAB0140D32CC35D100FE7D3","D")
    Call WriteViaLoader("3478","DB7D04DB0FD28801402C8EECA58EECA5226A8E3ECBD509C5AA0140D00BAA0148","D")
    Call WriteViaLoader("3498","130BAB0140D00BA82ADC30EF130B440009C35D080FE21209020D8EDED97701B8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 22, 44, "Cleaning Card")
    Call WriteViaLoader("34B8","037217C689FF49C5AA0100D00BA82DE030EF130BAB0100C35D400FECC5A82AD4","D")
    Call WriteViaLoader("34D8","30EFAB00DDC35D080FF3882AD330EFC01260B7B76CD0248800632A4B012AC53D","D")
    Call WriteViaLoader("34F8","240B059A2AAB00DDD32AC35D080FF08E0100C5AA00DDD00BAA00A0130BAB00A0","D")
    Call WriteViaLoader("3518","C35D080FEE009DD50BC5AA2EE0D00EAA2EF8130E44000BC35D0C0FEE120BF98E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 23, 44, "Cleaning Card")
    Call WriteViaLoader("3538","3ED68A288B0207882F042A8EE68E8824CA30EFD01625072D03061C8E36A17260","D")
    Call WriteViaLoader("3558","0C7202128EE4098EE41A882E802A8E36C18E36A18901212D04061E8E36A1882E","D")
    Call WriteViaLoader("3578","803088010032726006EB72600C7202128EE41A8E36BD8900FF2D070259D5E926","D")
    Call WriteViaLoader("3598","0102D9E98E36A18829812A8EC4AEC542E9EA5D060B02D9EAAA2EE015EAAB00DD","D")
    Call WriteViaLoader("35B8","C35D0C0FEA222D8E3ECB8800DD2A22608EEBEF226A8E3ECBC5AA0100AB0060C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 24, 44, "Cleaning Card")
    Call WriteViaLoader("35D8","5D200FF572600C7202128EE4098EE41A8E36BD8C36907248948EED82D5DB32DB","D")
    Call WriteViaLoader("35F8","5D400B06A82DE02A00225D480B06A82A942A00185D500B06A82A942A000E5D51","D")
    Call WriteViaLoader("3618","0B06A82A832A0004A82DCF2A982A30EF8EEDA4C3129502095DB10FC4C88EEE89","D")
    Call WriteViaLoader("3638","C4129606B9D1DB5DB10FB3C5AA0088AB00DDC35D0C0FF5AA297CAB00DDC35D10","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 25, 44, "Cleaning Card")
    Call WriteViaLoader("3658","0FF58829412A8800DD2C7208FD8E3EB2C5AA0088D00EAA00DD130EAB00DDC35D","D")
    Call WriteViaLoader("3678","0C0FEE72DD15882EF82A720C04E78E351F020852028E3EA31216B38824CA30EA","D")
    Call WriteViaLoader("3698","B5882F042A8EE68EF9882E202A726004C5982A349A34AB0100700134C33D040F","D")
    Call WriteViaLoader("36B8","F38E36C4F9882E202A7260048801002C420422C59A2CAB006070012CC35D200F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 26, 44, "Cleaning Card")
    Call WriteViaLoader("36D8","F388006030982A32722006ED7C202204E2F92D080604C58E3EA38CC3A3D002A6","D")
    Call WriteViaLoader("36F8","013DFC80351302F97D54BE06087D400902032200E68CC1C9E2D0C18ED06A7260","D")
    Call WriteViaLoader("3718","157240048826102AE7F9760112178ED06A770125058ECEFF00288ED04D882610","D")
    Call WriteViaLoader("3738","2A7701101172400C8EE4098EE41A8801002A7601120DC59A2AE170012AC35D40","D")
    Call WriteViaLoader("3758","0FF5F998C3AB8837D22A8E379BC5AA0088E1C35D080FF7F9D50BF93203AB0164","D")
    Call WriteViaLoader("3778","B81202AB016CB4F92240522DAB0100C35D3F0FF81210AB01008826902A8E379F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 27, 44, "Cleaning Card")
    Call WriteViaLoader("3798","8C376576011014C59A2A7D5ABE0601B2AB00A4C370012A5D080FED7248948EED","D")
    Call WriteViaLoader("37B8","827D44BE020D7D56BE02088E37DA8E37DA00068E37F38E37F3F9E44425024554","D")
    Call WriteViaLoader("37D8","14D4C5AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5F9C5A8010030","D")
    Call WriteViaLoader("37F8","EE8EEDA4C35D2D0FF3AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5","D")
    Call WriteViaLoader("3818","F9D513D50B7D36BE0201F972041E8E386622368E3CA000F28EDC0A88006230EE","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 28, 44, "Cleaning Card")
    Call WriteViaLoader("3838","272004302987D78A2ACE27010776401E03223EE68E3866F9302987D78A2ACE27","D")
    Call WriteViaLoader("3858","0203223DE6D51E74801E8E3866F97201D977801E037200D98E39168E38B18838","D")
    Call WriteViaLoader("3878","912A77801E048838A12AC59A2AAB00A0C370012A5D100FF3F950E75FA407240E","D")
    Call WriteViaLoader("3898","C5A87738C1CBE7B663B3029E192FC4CF365AB16C722D1DB1BEF70038F7003AF7","D")
    Call WriteViaLoader("38B8","803DFF5207F7083D8E38D9C704FA8839012C77801E0488390A2C8E38EE8E38D9","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 29, 44, "Cleaning Card")
    Call WriteViaLoader("38D8","F99A2AD0059A2E1305A6013DFC213070012A70012EF99A2C213270012C9A2C21","D")
    Call WriteViaLoader("38F8","3470012C9A2C213DF902622C02403402442601642D01603401422F03403C121E","D")
    Call WriteViaLoader("3918","25072704022504B2BC8826602A4B002A790029883F582E4B002E79002DF97410","D")
    Call WriteViaLoader("3938","B6F9","D")
    Call WriteViaLoader("393D","2240AB0100C35D400FF88E3ED6C5AA2688D024AA3F801324AB00A4","D")
    Call WriteViaLoader("3958","C35D080FEE8E37B3C5D509E2D002AA00881302440009C35D080FF0120902BFF9","D")
    Call WriteViaLoader("3978","8E3ED67D40BE061A8824503088009032720406EB129014910208720206880090","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 30, 44, "Cleaning Card")
    Call WriteViaLoader("3998","30E58E3A8375EFB68E3AE48E3F8872970A920A8EE7D1726A0A920A520C8E3AFC","D")
    Call WriteViaLoader("39B8","7D67080601E25208A6013DFC80358E3CA0C704F4C5AA00A02DFB0F022CFBAB00","D")
    Call WriteViaLoader("39D8","7CC35D080FEF12D988E91F30B0020488EA3F3098302A72A30A920A12D98EE89F","D")
    Call WriteViaLoader("39F8","726A0A920AC5E2D007A8015C30EE1307AB0060C35D08020D7D670802E95D050F","D")
    Call WriteViaLoader("3A18","E5D50700E4F7803DFFC5F7083DAA0060A6013DFC2130C35D070FF28839072C77","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 31, 44, "Cleaning Card")
    Call WriteViaLoader("3A38","801E048839102C8E38EE1267A6013DFC2130C5A6013DFC8035AB007CC35D080F","D")
    Call WriteViaLoader("3A58","F2982A3072A30A920A12D9D5038EE8D5726A0A920A7D0803F406C27AB0021B77","D")
    Call WriteViaLoader("3A78","021E0552018E3EA38CDCDF5208A6013DFC80358E3C96C704F4F97410B68800B0","D")
    Call WriteViaLoader("3A98","2A88003B2E7202078EDBD87D40BE06D8F7803D88390A2CF7083D8E38EEF7283D","D")
    Call WriteViaLoader("3AB8","C5AA00A0A6013DFC2130C35D070605F7243D00EDF7283D5D0F0FE68839132C8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 32, 44, "Cleaning Card")
    Call WriteViaLoader("3AD8","38EE12AFA6013DFC2130009C8839042C77801E0488390D2C8E38EE12D8A6013D","D")
    Call WriteViaLoader("3AF8","FC2130F9B58E3CA012D8C704F8F932117D60BE06068EFFBC2317F912BE250F2D","D")
    Call WriteViaLoader("3B18","0A061112D402038CFFB67620C1038CFF9E8CFFAE7D56BE02F58CFFA67D60BE06","D")
    Call WriteViaLoader("3B38","05882E202AF912D402058825D02AF97620C1058825502AF98825902AF97D60BE","D")
    Call WriteViaLoader("3B58","061A8E338D2D030605882E7F2CF92D040605882E4F2CF988007F2CF988264F2C","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 33, 44, "Cleaning Card")
    Call WriteViaLoader("3B78","F97D60BE061D8E338D2D030606F4CA2C2E4FF92D040606F4CA2C2E1FF9F4CA2C","D")
    Call WriteViaLoader("3B98","005FF9F4CA2C260FF98E3ED67710B82FD508D5B87708D0087216087404B80051","D")
    Call WriteViaLoader("3BB8","7640B54D880176308800A0327208068EE5B7D5A8D5A97401B88E3C74890096C5","D")
    Call WriteViaLoader("3BD8","AA24F4D00BAA00A043000BAA2AE4130BAB00A0C35D0C0FE88EDED98EDF617D17","D")
    Call WriteViaLoader("3BF8","C606037204B87708B8037402D17601B80FC5B5AB00A0AB0088C35D0A0FF50037","D")
    Call WriteViaLoader("3C18","C58801762CA6013DFC80358E3CA0A8017630EE13D89B2C70012CC35D0A0FE688","D")
    Call WriteViaLoader("3C38","01762CC59A2CAB00A0AB0088B59B2CC370012C5D0A0FED7740B7038E3D907601","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 34, 44, "Cleaning Card")
    Call WriteViaLoader("3C58","B604D5A8D5A98E3C74C5AA0088AB00A0C35D080FF598D6C398A7D6F942B5AA12","D")
    Call WriteViaLoader("3C78","B82507D0AB32C734C802057401D2D5084208ACC5AA00A0E1C35D0D0FF7F9A601","D")
    Call WriteViaLoader("3C98","3DFC21308E3CA0F9B8C8D5DBD5DCD0D87B05DC32DBAA00A81BD8AB00A8D0DAAA","D")
    Call WriteViaLoader("3CB8","00A013DAAB00A013DC251FC0AA3CF2D0DA32DB5306AA00A813DAAB00A8B0BDD0","D")
    Call WriteViaLoader("3CD8","DA32DB5305AA00A01CDAAB00A04300D8D3DB7D08DB0FB9C4B4F9BF12939242AF","D")
    Call WriteViaLoader("3CF8","E7E3B2C6B89180B4E8739EF75DFDA082F96F25177D0B55970C8022678EE06F74","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 35, 44, "Cleaning Card")
    Call WriteViaLoader("3D18","042522088EE06F8E3A838E3AE48E3F8872970A920A8EE7D1726A0A920A520A8E","D")
    Call WriteViaLoader("3D38","3AFC8839012C8E38EEC5A6013DFC80358E3C9612D88EE06FC35D080FEDF98EFA","D")
    Call WriteViaLoader("3D58","27B006F98800683088245832720406EDC5AA2688D007AA3F80430007AA006013","D")
    Call WriteViaLoader("3D78","07AB0060C35D080FE87260158826902A720804E77420D1F9882460308800ED32","D")
    Call WriteViaLoader("3D98","720406EB720407D5063206AA00A0D0045503AA00EDD0053206C35507AA00A04B","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 36, 44, "Cleaning Card")
    Call WriteViaLoader("3DB8","0005C85503AA00EDD00932043C00553F8E3E0843000512041309BDB0BDC08E3E","D")
    Call WriteViaLoader("3DD8","08BE1B05C4AB00A0C5D8F0AA00EDD002B0BFD003B4D8022580BE1403AB00EDC3","D")
    Call WriteViaLoader("3DF8","770401E7B4D3067708069ED7070498F98EFFB67D00D406F78CFF9E0012010125","D")
    Call WriteViaLoader("3E18","002008001E010124100808001A0101240602080013010125202008002D010124","D")
    Call WriteViaLoader("3E38","08040800D0010124650108002E010124682008004E0101245C04080058010124","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 37, 44, "Cleaning Card")
    Call WriteViaLoader("3E58","E0010800F3010124A40408001901012464010800FE0101240C04080041010121","D")
    Call WriteViaLoader("3E78","060408C9F400000045010124881C0800F8010120240908CA360000CA750000CA","D")
    Call WriteViaLoader("3E98","B100000044010124E80C08B8A82AD02A9A2AB302038EE68EB4F9223C8E3ECB42","D")
    Call WriteViaLoader("3EB8","04FED50E8EECA5D30E4DFD0E0FF642FE04226AD00A920AF98E3ED68CC1A47202","D")
    Call WriteViaLoader("3ED8","058CC204E2C07604D10375BFD375F7CF8CC9597601CF1B2D7F06178E298C8EC2","D")
    Call WriteViaLoader("3EF8","4C8A2F04020A882E202A72C0048EE6A0227F7D5EBE060E7D01120609D31D7D08","D")
    Call WriteViaLoader("3F18","1D060222018CC00B770212108ED0EE8EDED97608B80375BFB48CCC4E8CCC3675","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 38, 44, "Cleaning Card")
    Call WriteViaLoader("3F38","FBB48CD59FF4CA2CCBB90603728646F9","D")
    Call WriteViaLoader("3F58","12937D04060603751F938E2856D093F9","D")
    Call WriteViaLoader("3F88","727B0252058E3FB8722902000A520FAA00A0BCF008D0028E3FB3AA00A0823FDF","D")
    Call WriteViaLoader("3FA8","C522C72306724B024B02005203A40220AA00AA1B02AB00AAAA009FCAF3F91E72","D")
    Call WriteViaLoader("3FC8","CB250299A866F0DA234B00F8F5A0ABA70005009FCAB9F95203AA00A0D002AA","D")
    Call WriteViaLoader("3FE8","AC4B0002AA3F9413022B5ABE236BAB00ACCAE6A3FD20F9","D")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 39, 44, "Cleaning Card")
    Call WriteViaLoader("2024","000000000000000000000000","E")
    Call WriteViaLoader("2030","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2050","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2070","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2090","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 40, 44, "Cleaning Card")
    Call WriteViaLoader("20D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2110","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2130","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 41, 44, "Cleaning Card")
    Call WriteViaLoader("2150","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2170","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2190","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 42, 44, "Cleaning Card")
    Call WriteViaLoader("2210","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2230","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2250","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2270","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2290","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 43, 44, "Cleaning Card")
    Call WriteViaLoader("22D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22F0","0000","E")
    Call WriteViaLoader("2DC0","01172F15FFFF01FF07FF504C45415345205354414E4420425900000000000000","E")
    Call WriteViaLoader("2DE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Complete...", 44, 44, "Cleaning Card")
    Changed = 1
    Call InstallUSW()        ' Clean USW portion of code
    Call Sc.ProgressBox ("", 0, 0, "")
    If Mode <> UCase(True) then Call ShutDownCard()
End Sub

Function BootROM()'Taken and modified from SuperReader scripts
    Sc.Verbose = False
    Dim D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,DA
    Dim cnt,b, RetVal, boot, kk, katr, LoopCnt
    Dim atrlock, cter, glcnt, mtries, kp, CrdDel
    Dim RNDNUM,temp,DefGP,BroadGL,BGCnt,UnInt,FCard
    If CrdTyp = "Removed" Then Exit Function
    If CrdTyp <> "4B" and CrdTyp <> "5B/6B" and CrdTyp <> "Stubborn" then
        If CrdTyp = " " then CrdTyp = Sc.ButtonBox("It helps to know which card you are attempting to glitch into,if you are unsure, I "&VbCr&"recommend looking on the card or selecting the 5B/6B since it will start narrow "&VbCr&"and the others are slower. The utils will use the broad glitches if needed.",vbQuestion, "Which Glitch", "5B/6B", "4B", "Stubborn")
        If CrdTyp = "0" then Exit Function
        If CrdTyp = "1" then CrdTyp = "5B/6B"
        If CrdTyp = "2" then CrdTyp = "4B"
        If CrdTyp = "3" then CrdTyp = "Stubborn"
    End If
    If UseDefGP = 0 then DefGP = 0
    If UseDefGP = 1 and CrdTyp <> "Stubborn" then DefGP = 1
    If UseDefGP = 2 then RetVal = Sc.ButtonBox("Would you like to use Preset or Random glitching?", vbQuestion, "Which Glitch", "Preset", "Random")
    If UseDefGP = 2 and RetVal = 1 and CrdTyp <> "Stubborn" Then DefGP = 1
    If UseDefGP = 2 and RetVal <> 1 Then DefGP = 0
    If UseDefBG = 0 then BroadGL = UCase(False)
    If UseDefBG = 1 then BroadGL = UCase(True)
    If UseDefBG = 2 then RetVal = Sc.ButtonBox("Would you like to use Standard or Broad glitching?", vbQuestion, "Which Glitch", "Normal", "Broad")
    If UseDefBG = 2 and RetVal = 1 Then BroadGL = UCase(False)
    If UseDefBG = 2 and RetVal <> 1 Then BroadGL = UCase(True)
    If CrdTyp = "Stubborn" then UnInt = 1
    RANDOMIZE TIMER
    atrlock = 0
    D0 = 0
    RetVal = 0
    BGCnt = 0
    LoopCnt = 0
    MinDel = 0
    ScriptStart = now
    sc.print VbCr & "Attempting to boot card... " & VbCr
DO
    katr=0
    boot = 0
    RNDNUM = RND()
'TIMERS
    If IsHex(ES/15) And (EM > 00 or ES > 00) Then
        CrdDel = CrdDel + 5
        atrlock = 0
        Delay(1000)
    End If
    If IsHex(ES/30) And (EM > 00 or ES > 00) Then
        atrlock = 0
        If DefGP <> 0 Then DefGP = DEFGP + 1
    End If
    If IsHex(EM/2) And EM/2 > 00 and ES = 00 then
        call FFCard()
        call ProgUpdate(kp,atrlock,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,CrdDel)
        CrdDel = 0
    End If
    If IsHex(EM/5) and EM > 00 and ES = 00 Then
        If DefUnInt = 0 and UnInt <> 1 then
            RetVal = Sc.ButtonBox("Would you like to continue glitching?", vbQuestion, "Continue", "Yes", "No")
            If RetVal = 1 then
                If UseDefBG = 2 and BroadGL = UCase(False) Then
                    RetVal = Sc.ButtonBox("Would you like to broaden glitching?", vbQuestion, "Broaden Range", "Yes", "No")
                    If RetVal = 0 Then Exit Function
                    If RetVal = 1 Then BroadGL = UCase(True)
                End If
            Else
                RetVal = 0
                Exit Function
            End If
        End If
        If DefUnInt = 1 or UnInt = 1 or RetVal <> 0 Then
            Call Sc.ProgressBox(0,0,0,0)
            Call ShutDownCard()
            Sc.Write("06100E10019300") 'reset
            Sc.Delay(SCDel * 2.5)
            Sc.Read(&h02)
            temp = Sc.GetByte(&h01)
            Sc.Read (temp)
            atrlock = 0
            Call FFCard()
            If CrdTyp = "Removed" then
                Sc.Print VbCr
                Exit Function
            End If
        End If
        RetVal = 0
    End If
'Set Card (Loader) Delay
    If CrdDel => 250 then CrdDel = 0
    If CrdDel = 0 and (CrdTyp = "4B" or CrdTyp = "Stubborn") then CrdDel = DefMinDel4B
    If CrdDel = 0 then CrdDel = DefMinDel
    If CrdDel = 0 then CrdDel = 10
    If atrlock = 1 then CrdDel = CrdDel + 5
    If DefGP = 5 then DefGP = 0
'SET UP PARAMETERS
    If CrdTyp = "5B/6B" and BroadGL <> UCase(True) Then
        'VCc + last 2 glitch 4 bootloader
        D2 = INT(RNDNUM * &h05) + &h34      ' 52 -  56
        D3 = INT(RNDNUM * &h03) + &h08      '  8 -  10
        D4 = INT(RNDNUM * &h13) + &h8c      '140 - 159
        D9 = INT(RNDNUM * &h06) + &h35c     '860 - 865
        DA = INT(RNDNUM * &hF) + &h40
        'ATR glich point search range
        if atrlock = 0 then
            D1 = INT(RNDNUM * &h08) + &hdc  '220 - 227
            D5 = INT(RNDNUM * &h01) + &h25e '606 - 607
            D6 = INT(RNDNUM * &h02) + &h3f  ' 63 -  64
            D7 = INT(RNDNUM * &h04) + &h1c  ' 27 -  30
            D8 = INT(RNDNUM * &h04) + &h37  ' 55 -  59
        end if
        If DefGP => 1 then
            If atrlock = 0 then
                D1 = DefaultD1
                D5 = DefaultD5
                D6 = DefaultD6
                D7 = DefaultD7
                D8 = DefaultD8
            End If
            D2 = DefaultD2
            D3 = DefaultD3
            D4 = DefaultD4
            D9 = DefaultD9
            DA = DefaultDA
        End If
    End If

    If CrdTyp = "4B" Then
        '4B
        'VCc + last 2 glitch 4 bootloader
        D2 = INT(RNDNUM * &h04) + &h32      ' 50 -  54
        D3 = INT(RNDNUM * &h03) + &h07      '  7 -  10
        D4 = INT(RNDNUM * &h07) + &h8A      '138 - 145
        D9 = INT(RNDNUM * &h04) + &h35C     '860 - 864
        DA = INT(RNDNUM * &hF) + &h40
        'ATR glich point search range
        if atrlock = 0 then
            D1 = INT(RNDNUM * &h06) + &hC2  '194 - 200
            D5 = INT(RNDNUM * &h02) + &h25D '605 - 607
            D6 = INT(RNDNUM * &h04) + &h46  ' 70 -  74
            D7 = INT(RNDNUM * &h04) + &h1B  ' 27 -  31
            D8 = INT(RNDNUM * &h04) + &h3A  ' 58 -  62
        End If
        If DefGP => 1 then
            If atrlock = 0 then
                D1 = Default4BD1
                D5 = Default4BD5
                D6 = Default4BD6
                D7 = Default4BD7
                D8 = Default4BD8
            End If
            D2 = Default4BD2
            D3 = Default4BD3
            D4 = Default4BD4
            D9 = Default4BD9
            DA = Default4BDA
        End If
    End if

    If DefGP => 2 then
        If atrlock = 0 Then
            D1 = (D1 - &h02) + (INT(RNDNUM * &h04))
            D5 = (D5 - &h02) + (INT(RNDNUM * &h04))
            D6 = (D6 - &h02) + (INT(RNDNUM * &h04))
            D7 = (D7 - &h02) + (INT(RNDNUM * &h04))
            D8 = (D8 - &h02) + (INT(RNDNUM * &h04))
        End If
        DA = INT(RNDNUM * &h0F) + &h40
        D2 = INT(RNDNUM * &h05) + &h34
        D3 = INT(RNDNUM * &h03) + &h08
        D4 = (D4 - &h02) + (INT(RNDNUM * &h04))
        D9 = (D9 - &h02) + (INT(RNDNUM * &h04))
    End If
    if D1 < 140 or D1 > 227 then D1 = INT(RNDNUM * &h08) + &hdc     'D1 = 148 - 227
    if D5 < 605 or D5 > 609 then D5 = INT(RNDNUM * &h01) + &h25e    'D5 = 605 - 609
    if D6 < 54 or D6 > 70 then D6 = INT(RNDNUM * &h02) + &h3f       'D6 =  54 -  70
    if D7 < 23 or D7 > 37 then D7 = INT(RNDNUM * &h04) + &h1c       'D7 =  23 -  37
    if D8 < 54 or D8 > 70 then D8 = INT(RNDNUM * &h04) + &h37       'D8 =  54 -  70
    If DA < &h40 or DA > &h4F then DA = INT(RNDNUM * &hF) + &h40  'DA = &h40-&h4F
    if ES => 15 or (D2 < 40 or D2 > 60) then D2 = INT(RNDNUM * &h05) + &h34    'D2 =  40 -  60
    if ES => 30 or (D3 < 6 or D3 > 11) then D3 = INT(RNDNUM * &h03) + &h08     'D3 =   6 -  11
    if ES => 45 or (D4 < 128 or D4 > 196) then D4 = INT(RNDNUM * &h13) + &h8c  'D4 = 128 - 196
    if EM => 01 or (D9 < 858 or D9 > 866) then D9 = INT(RNDNUM * &h06) + &h35c 'D9 = 858 - 866

    If CrdTyp = "Stubborn" or BroadGL = UCase(True) then
        'VCc + last 2 glitch 4 bootloader
        D2 = INT(RNDNUM * &h16) + &h28      ' 40 -  60
        D3 = INT(RNDNUM * &h05) + &h06      '  6 -  11
        D4 = INT(RNDNUM * &h44) + &h80      '128 - 196
        D9 = INT(RNDNUM * &h08) + &h35A     '858 - 866
        DA = INT(RNDNUM * &hF) + &h40
        'ATR glich point search range
        if atrlock = 0 then
            D1 = INT(RNDNUM * &h4F) + &h94  '148 - 227
            D5 = INT(RNDNUM * &h04) + &h25D '605 - 609
            D6 = INT(RNDNUM * &h15) + &h36  ' 54 -  75
            D7 = INT(RNDNUM * &h0E) + &h17  ' 23 -  37
            D8 = INT(RNDNUM * &h05) + &h37  ' 55 -  60
        End If
    End If
'START ACTUALLY TRYING TO BOOT IN
    Sc.Write("020200")
    Sc.Delay(SCDel)
    Sc.Read(&h02)
    if Chk4Card() = 0 then
        BootCard = 0
        BootROM = 0
        Exit Function
    end if
    Sc.Delay(SCDel)
    call ProgUpdate(kp,atrlock,d1,d2,d3,d4,d5,d6,d7,d8,d9,da,CrdDel)
    sc.write("A1")
    sc.write("B0" & HexString(D1,02) & "0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")
    Sc.Read(&h02)
    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
        cnt = sc.getbyte(1)
        if cnt = 1 then sc.read(1)
        If cnt = 0 and CrdDel = 250 then atrlock = 0
    end if
    if cnt > 0 then
        kp=kp+2
        if kp > 50 then kp = 50
            for b = 0 to 10
                Sc.Write("028000")
                if Sc.Read(&h02) = 2 then
                    cnt = sc.getbyte(1)
                else
                    cnt = 0
                end if
                if cnt > 0 then
                    cnt = sc.read(cnt)
                    kk=sc.getbyte(0)
                    if kk = &h38 then
                        Sc.Write("028000")
                        cnt = 0
                        if Sc.Read(&h02) = 2 then
                            cnt = sc.getbyte(1)
                            if(cnt = 0) then exit for
                            Sc.Read(cnt)
                            if(sc.getbyte(0)) = &hb0 then
                                sc.print "*"
                                If MinDel = 0 Then MinDel = CrdDel
                                If MinD1 = 0 Then MinD1 = D1
                                If MinD2 = 0 Then MinD2 = D2
                                If MinD3 = 0 Then MinD3 = D3
                                If MinD4 = 0 Then MinD4 = D4
                                If MinD5 = 0 Then MinD5 = D5
                                If MinD6 = 0 Then MinD6 = D6
                                If MinD7 = 0 Then MinD7 = D7
                                If MinD8 = 0 Then MinD8 = D8
                                If MinD9 = 0 Then MinD9 = D9
                                D0=D0+1
                                katr=1
                                atrlock =1
                                exit for
                            end if
                        end if
                    end if
                end if
            next
    if katr = 1 then
        sc.write("B0"  & HexString(D4,02) & "071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
        if Sc.Read(&h02) > 1 then
            cnt = sc.getbyte(1)
        else
            cnt = 0
        end if
        if cnt > 0 then
            for b = 0 to cnt - 1
                cnt = sc.read(cnt)
            next

            Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
            if Sc.Read(&h02)<2 then Sc.Read(&h02)
                Sc.Write("11c060200" & HexString(DA,2) & "7042005590320" & HexString(D9,04) & "0D010000")
                Sc.Read(&h02)
            for b = 0 to 8
                Sc.Write("028000")
                if Sc.Read(&h02) = 2 then
                    cnt = sc.getbyte(1)
                else
                    cnt = 0
                end if
                if cnt > 0 then
                    cnt = sc.read(cnt)
                    kk=sc.getbyte(0)
                    if kk = &h66 then
                        Sc.Write("028000")
                        cnt = 0
                        if Sc.Read(&h02) = 2 then
                            cnt = sc.getbyte(1)
                            if(cnt = 0) then exit for
                            Sc.Read(cnt)
                            if(sc.getbyte(0)) = &h99 then
                                boot=1
                                If Len(D3) < 2 Then D3 = "0" & D3
                                If Len(MinD3) < 2 Then MinD3 = "0" & MinD3
                                ScriptEnd = Now
                                Sc.Print VbCr & "1st values to get response:    " & MinD1 & ", " & MinD2 & ", " & MinD3 & ", " & MinD4 & ", " & MinD5 & ", " & MinD6 & ", " & MinD7 & ", " & MinD8 & ", " & MinD9 & ", " & "Card Delay: " & MinDel & VbCr
                                Sc.Print "1st Hex values to get response: " & HexString(MinD1,2) & ", " & HexString(MinD2,2) & ", " & HexString(MinD3,2) & ",  " & HexString(MinD4,2) & ", " & HexString(MinD5,3) & ", " & HexString(MinD6,2) & ", " & HexString(MinD7,2) & ", " & HexString(MinD8,2) & ", " & HexString(MinD9,3) & ", " & "Card Delay: " & HexString(MinDel,3) & VbCr
                                sc.print VbCr & "Bootloader installed and active!" & VbCr
                                sc.print "After "  & EH & " hours, " & EM & " mins and " & ES & " secs"
                                sc.print " and " & D0 & " tries to activate bootloader" & VbCr
                                Sc.Print VbCr & "Final Values of D1-DA: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & ", " & DA & " Card Delay: " & CrdDel & VbCr
                                Sc.Print "Hex values of D1-DA:    " & HexString(D1,2) & ", " & HexString(D2,2) & ", " & HexString(D3,2) & ",  " & HexString(D4,2) & ", " & HexString(D5,3) & ", " & HexString(D6,2) & ", " & HexString(D7,2) & ", " & HexString(D8,2) & ", " & HexString(D9,3) & ", " & HexString(DA,2) & " Card Delay: " & HexString(CrdDel,3) & VbCr
                                exit for
                            end if
                        end if
                    end if
                else
                    exit for
                end if
            next
            if boot = 1 then
                Sc.Write("021500")
                Sc.Read(2)
                Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
                Sc.Read(2)
                Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
                Sc.Read(2)
                BootCard = 1
                BootROM = 1
                Exit Function
                end if
            end if
        end if
    else
        kp=kp-5
        if kp<1 then kp=1
    end if
loop
End Function

Sub Check2000() ' Modified From Canard's to check 4 bytes at 2000 for corruption
    Dim Bytes
    Dim i

    Chk2k = UCase(True)
    Sc.Write("A2")
    Sc.Write("06C20320008300")
    Sc.Delay(SCDel * 4)
    Sc.Read(&h02)
    NumBytes=Sc.Getbyte(&h01)
    Sc.Read(4)
    For i=0 to 3
        Bytes = Bytes & HexString(Sc.Getbyte(i),2)
    Next
    if Bytes = "00000000" Then
        Chk2k = UCase(False)
        Sc.MsgBox("There appears to be corrupted data in the 2000 area."  & VbCr & VbCr & "While this has never been used as a hash check before," &VbCr & "it could easily be used as a target." & VbCr & VbTab & "       Data: " & Bytes), vbCritical
    End If
    If Bytes = "FFFFFFFF" Then
        Chk2k = UCase(False)
        Call CardIsLooped()
        Exit Sub
    End If
    If len(Bytes) < 8 Then
        Chk2k = UCase(False)
        RetVal = 4
        Call ShutDownCard()
        Exit Sub
    End If
    If Chk2k = UCase(True) Then Sc.MsgBox("The 2000 - 2003 area appears to be free of corrupted data." & VbCr & VbTab & VbTab & "Data: " & Bytes)
End Sub

Sub Write2000()
    Sc.Verbose = False
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Location
    Dim EPROMBytes

    Address = 8192
    Location = 0
    Sc.Write("A2")
    call Fs.FileSeek(InFile, Location, fsoSEEK_SET)
    'Call WDTMR()
    EPROMBytes = ""
    For ThisByte = Location to (Location + 15)
        EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
    Next

    Sc.Write("A1")
    Call WriteViaLoader(HexString(Address,4), EPROMBytes,"D")
    Sc.Write("A0")
end sub

Sub ExtractCardInfo()
    Dim RetValue

    Call WDTMR()
    Sc.Write("06C20724C08800")
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read(RetValue)
    XByte(0) = Sc.GetByte(0)
    XByte(1) = Sc.GetByte(1)
    XByte(2) = Sc.GetByte(2)
    XByte(3) = Sc.GetByte(3)
    XByte(4) = Sc.GetByte(4)
    XByte(5) = Sc.GetByte(5)
    XByte(6) = Sc.GetByte(6)
    XByte(7) = Sc.GetByte(7)
    Sc.Write("06C20726588800")
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read(RetValue)
    XByte(8) = Sc.GetByte(0)
    XByte(9) = Sc.GetByte(1)
    XByte(10) = Sc.GetByte(2)
    XByte(11) = Sc.GetByte(3)
    XByte(12) = Sc.GetByte(4)
    XByte(13) = Sc.GetByte(5)
    XByte(14) = Sc.GetByte(6)
    XByte(15) = Sc.GetByte(7)
    Sc.Write("06C20B2AE48C00")
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read(RetValue)
    Key12Byte(0)  = Sc.GetByte(&h0)
    Key12Byte(1)  = Sc.GetByte(&h01)
    Key12Byte(2)  = Sc.GetByte(&h02)
    Key12Byte(3)  = Sc.GetByte(&h03)
    Key12Byte(4)  = Sc.GetByte(&h04)
    Key12Byte(5)  = Sc.GetByte(&h05)
    Key12Byte(6)  = Sc.GetByte(&h06)
    Key12Byte(7)  = Sc.GetByte(&h07)
    Key12Byte(8)  = Sc.GetByte(&h08)
    Key12Byte(9)  = Sc.GetByte(&h09)
    Key12Byte(10) = Sc.GetByte(&h0A)
    Key12Byte(11) = Sc.GetByte(&h0B)
    XORedByte(0)  = HexString(XByte(0) XOR XByte(8), 2)
    XORedByte(1)  = HexString(XByte(1) XOR XByte(9), 2)
    XORedByte(2)  = HexString(XByte(2) XOR XByte(10), 2)
    XORedByte(3)  = HexString(XByte(3) XOR XByte(11), 2)
    XORedByte(4)  = HexString(XByte(4) XOR XByte(12), 2)
    XORedByte(5)  = HexString(XByte(5) XOR XByte(13), 2)
    XORedByte(6)  = HexString(XByte(6) XOR XByte(14), 2)
    XORedByte(7)  = HexString(XByte(7) XOR XByte(15), 2)
    XoredByte(8)  = XoredByte(0)
    XoredByte(9)  = XoredByte(1)
    XoredByte(10) = XoredByte(2)
    XoredByte(11) = XoredByte(3)
    XoredByte(12) = XoredByte(4)
    XoredByte(13) = XoredByte(5)
    XoredByte(14) = XoredByte(6)
    XoredByte(15) = XoredByte(7)
    XoredByte(16) = XoredByte(0)
    XoredByte(17) = XoredByte(1)
    XoredByte(18) = XoredByte(2)
    XoredByte(19) = XoredByte(3)
    XoredByte(20) = XoredByte(4)
    XoredByte(21) = XoredByte(5)
    XoredByte(22) = XoredByte(6)
    XoredByte(23) = XoredByte(7)
    XoredByte(24) = XoredByte(0)
    XoredByte(25) = XoredByte(1)
    XoredByte(26) = XoredByte(2)
    XoredByte(27) = XoredByte(3)
    XoredByte(28) = XoredByte(4)
    XoredByte(29) = XoredByte(5)
    XoredByte(30) = XoredByte(6)
    XoredByte(31) = XoredByte(7)
    EPROMKey = XORedByte(0) & XORedByte(1) & XORedByte(2) & XORedByte(3) & XORedByte(4) & XORedByte(5) & XORedByte(6) & XORedByte(7)
End Sub

Function ReadInfo() 'This function taken from ATRDump by Testies
    Dim CAMIDHex
    Dim CAMIDDec
    Dim USWHex
    Dim USWDec
    Dim DSWHex
    Dim DSWDec
    Dim GuideHex
    Dim GuideDec
    Dim TimeHex
    Dim TimeDec
    Dim RatingHex
    Dim RatingDec
    Dim SpendingLimitHex
    Dim SpendingLimitDec
    Dim infobox
    Dim actyear
    Dim actmonth
    Dim ActDateHex
    Dim ActDateDec
    Dim PPVLimitHex
    Dim PPVLimitDec
    Dim SpentHex
    Dim SpentDec
    Dim Fuse
    Dim IRDHex
    Dim IRDDec
    Dim RetValue
    Dim ATR

    Sc.Write("0B 1A 0E10 C4 48 2A 00 00 80 BF 00")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)                                       ' see if command was accepted
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)                                  ' read the 0 - 63 bytes returned by Ins2A
    ' Assign returned Ins2A data here
    USWHex = HexString(GetByte(29), 2) & HexString(GetByte(30), 2)
    USWDec = Hex2Dec(USWHex)
    If Len(USWDec) < 4 Then USWDec = "000" & USWDec
    DSWHex = HexString(GetByte(33), 2) & HexString(GetByte(34), 2)
    DSWDec = Hex2Dec(DSWHex)
    If Len(DSWDec) < 4 Then DSWDec = "000" & DSWDec
    RatingHex = HexString(GetByte(11), 2)
    RatingDec = Hex2Dec(RatingHex)
    If len(RatingDec) = 1 Then RatingDec = "0" & RatingDec
    SpendingLimitHex = HexString(GetByte(12), 2) & HexString(GetByte(13), 2)
    SpendingLimitDec = "$" & Int(Hex2Dec(SpendingLimitHex)/100)
    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    If ActDateHex = "0000" Then
        ActDateDec = "Not Active"
    Else
        ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
        ActYear = 2000 + Left(((GetByte(14)-95) / 12 * 100),1)
        ActMonth = Round((Right(Int((((GetByte(14) - 95)/12))*100),2)/100)*12)
        ActDateDec = ActMonth & "." & GetByte(15) & "." & ActYear
    End If
    Fuse = HexString(GetByte(1), 2) & HexString(GetByte(1) XOR &hFF,2)
    IRDHex = Hexstring(GetByte(21) XOR GetByte(25),2) & Hexstring(GetByte(22) XOR GetByte(26),2) & Hexstring(GetByte(23) XOR GetByte(27),2) & Hexstring(GetByte(24) XOR GetByte(28),2)
    If Len(IRDHex) <= 4 Then IRDHex = "0000" & IRDHex
    IRDDec = Hex2Dec(IRDHex)
    If IRDDec <= 1 Then IRDDec = "0000000" & IRDDec
    ' 02 = 2 bytes to follow
    ' BF = read next 64 bytes from card
    ' 00 = execute above
    Sc.Write("02BF00")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)                                   ' see if command was accepted
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)                              ' read 64 - 127 more bytes of 131 returned from Ins2A
    PPVLimitHex = HexString(Sc.GetByte(23), 2) & HexString(Sc.GetByte(24), 2)
    PPVLimitDec = "$" & Int(Hex2Dec(PPVLimitHex)/100)
    SpentHex = HexString(Sc.GetByte(21), 2) & HexString(Sc.GetByte(22), 2)
    SpentDec = "$" & Int(Hex2Dec(SpentHex)/100)
    Sc.Write("028200")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)                                   ' see if command was accepted
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)                              ' read the final 3 bytes 128 - 130 of Ins2A
    ' 08 = 8 bytes to follow
    ' C4 = send next 5 bytes to card
    ' 48 58 00 00 17 = Ins58 Send Card Info Command
    ' 9B = Read 28 bytes from card
    ' 00 = Execute above
    Sc.Write("08C448580000179B00")
    Sc.Delay(SCDel * 8)
    Sc.Read(&h02)                                   ' see if command was accepted
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)                              ' read bytes 0 - 25 bytes returned by Ins58
    CAMIDHex = HexString(GetByte(2), 2) & HexString(GetByte(3), 2) & HexString(GetByte(4), 2) & HexString(GetByte(5), 2)
    CAMIDDec = Hex2Dec(CAMIDHex) & "x"
    ' Assign important pieces of information from Ins58 command
    GuideHex = HexString(Sc.GetByte(13), 2)
    GuideDec = Hex2Dec(GuideHex)
    If GuideDec = 0 Then GuideDec = "00"
    TimeHex = HexString(Sc.GetByte(11), 2)
    TimeDec = Hex2Dec(TimeHex)
    ATR = ""
    Dim b
    sc.write("0610010e109300")'reset
    if Sc.Read(&h02) > 1 then ATR = sc.getbyte(1)
    if ATR > 0 then
        ATR = sc.read(ATR)
        for b = 0 to ATR - 1
            If ATR = "20" Then ATR = ""
            ATR = ATR & HexString(sc.getbyte(b),2) & " "
        next
    End If
    ' Print all info here
    infobox = ""
    infobox = "ATR  : " & ATR & vbCrLf & vbcrlf
    infobox = infobox & "Card Information"  & vbtab & vbtab & "Hex" & vbtab & vbtab &"Decimal" & vbCr
    infobox = infobox & "------------------------------------------------------------------------------------" & vbCr
    infobox = infobox & "Card ID(CAM)" & vbtab & vbtab & CAMIDHex & vbtab & CAMIDDec & vbCr
    infobox = infobox & "IRD ID"  & vbtab & vbtab & vbtab & IRDHex & vbtab & IRDDec & vbCr
    infobox = infobox & "Fuse Byte"  & vbtab & vbtab & Fuse & vbtab & vbtab & Hex2Dec(Fuse) & vbCr
    infobox = infobox & "Guide Byte"  & vbtab & vbtab & GuideHex & vbtab & vbtab & GuideDec & vbCr
    infobox = infobox & "Time Zone"  & vbtab & vbtab & TimeHex & vbtab & vbtab & Hex2Dec(TimeHex) & vbCr
    infobox = infobox & "Rating"  & vbtab & vbtab & vbtab & RatingHex & vbtab & vbtab & RatingDec & vbCr
    infobox = infobox & "USW"  & vbtab & vbtab & vbtab & USWHex & vbtab & vbtab & USWDec & vbCr
    infobox = infobox & "DSW"  & vbtab & vbtab & vbtab & DSWHex & vbtab & vbtab & DSWDec & vbCr
    infobox = infobox & "Activation Date"  & vbtab & vbtab & ActDateHex & vbtab & vbtab & ActDateDec & vbCr
    infobox = infobox & "PPV Spending Limit"  & vbtab & vbtab & PPVLimitHex & vbtab & vbtab & PPVLimitDec & vbCr
    infobox = infobox & "Amount Purchased"  & vbtab & vbtab & SpentHex & vbtab & vbtab & SpentDec & vbCr
    infobox = infobox & "User Spending Limit"  & vbtab & vbtab & SpendingLimitHex & vbtab & vbtab & SpendingLimitDec & vbCr
    infobox = infobox & "-------------------------------------------------------------------------------" & vbCrLf
    Call Sc.Msgbox (infobox)
    ReadInfo = 1
End Function

Sub ReadSpecial() ' From Canard
    Dim Bytes
    Dim Address
    Dim i
    Dim NumOfBytes
    Dim Size

    Sc.Print vbcrlf & "EEP READ...."
    Address=Sc.InputBox("Address (Hex):  ","EEEP READ","")
    Size=Sc.InputBox("Size (Hex):  ","EEP READ","10")
    NumOfBytes = Hex2Dec(Size)
    If Address = "" Then Exit Sub
    If NumOfBytes > &h3F Then Exit Sub
    Sc.Write("A2")

    Sc.Write("06 C2 " & HexString(NumOfBytes - 1,2) & Address & HexString(&h80 + NumOfBytes - 1,2) & "00")
    Sc.Delay(SCDel * 5)
    Sc.Read(&h02)
    NumOfBytes=Sc.Getbyte(&h01)
    Sc.Read(NumOfBytes)
    For i=0 to NumOfBytes-1
        Bytes = Bytes & HexString(Sc.Getbyte(i),2)
    Next
    Sc.Print vbcrlf & "Address: " & Address
    Sc.Print VbTab & "Data: " & Bytes & vbcrlf
End Sub

Sub WriteHex()
    Dim FileName
    Dim InFile
    Dim Filter
    Dim AddressHex
    Dim LineLen
    Dim LineData
    Dim Address(8192)
    Dim HexData(8192)
    Dim WriteFlag(8192)
    Dim FileSize
    Dim LinesToWrite
    Dim CheckSum
    Dim CurPos
    Dim PrevChar
    Dim NextChar
    Dim NextByte
    Dim i

    LinesToWrite = 0
    CurPos = 0
    NextChar = ""
    PrevChar = ""
    NextByte = 0
    ' Open Hex File and get filesize
    Filter = "All Hex Files (*.hex)|*.hex;|Hex Files (*.hex)"
    FileName = Fs.FileOpenDialog(Filter,"Select Hex File","huobj.hex")
    If FileName = "" Then
         Sc.MsgBox("The file does not exist.")
         Exit Sub
    End If
    InFile=Fs.FileOpen(FileName,fsoOpenRead)
    FileSize=Fs.FileSeek(InFile,&H0,fsoSEEK_END)    ' Seek to the end of the file to get the size
    Call Fs.FileSeek(InFile,&H0,fsoSEEK_SET)        ' Seek back to the beginning of the file

    ' Read in Hex
    Do While (CurPos<FileSize)
        NextChar=Chr(Fs.FileGetc(InFile))
        CurPos=CurPos+1
        Select Case NextChar
            Case "#":
               Case ":": ' We are on a line
                If (PrevChar = ":") Then ' Encrypt
                    WriteFlag(LinesToWrite) = "E"
                Else
                    LinesToWrite = LinesToWrite + 1
                    WriteFlag(LinesToWrite) = "D"
                End If
            Case Else:
                If (PrevChar = ":") Then
                    ' Get line length
                      LineLen = Hex2Dec(NextChar & Chr(Fs.FileGetc(InFile))) * 2
                      CurPos = CurPos + 1
                    If (LineLen > 0) Then
                        ' Get Hex Address
                        AddressHex = Chr(Fs.FileGetc(InFile)) & Chr(Fs.FileGetc(InFile)) & Chr(Fs.FileGetc(InFile)) & Chr(Fs.FileGetc(InFile))
                        Address(LinesToWrite) = AddressHex
                        CurPos = CurPos + 4
                        ' Skip next two zeros
                        Fs.FileGetc(InFile)
                        Fs.FileGetc(InFile)
                        CurPos = CurPos + 2
                        ' Read Line Data
                        LineData = ""
                        For i = 1 to LineLen
                            LineData = LineData + Chr(Fs.FileGetc(InFile))
                        Next
                        HexData(LinesToWrite) = LineData
                        CurPos = CurPos + LineLen
                        ' Read CheckSum Bytes
                        CheckSum = Chr(Fs.FileGetc(InFile)) & Chr(Fs.FileGetc(InFile))
                        CurPos = CurPos + 2
                    Else
                        LinesToWrite = LinesToWrite - 1
                    End If
                End If
        End Select
        PrevChar = NextChar
    Loop
    Fs.FileClose(InFile)
    If PromptAreaInfo = 1 Then Call GetAreaInfo()
    Sc.Write("A2")
    If PromptAreaInfo = 1 Then
        Call WriteAreaInfo()
    Else
        If UseDefaultAreaInfo = 1 Then
            Call AreaInfo()
            Call WriteAreaInfo()
        End If
    End If
    For i = 1 to LinesToWrite
        Call WriteViaLoader(Address(i),HexData(i),WriteFlag(i))
        Call Sc.ProgressBox ("Writing Hex...", i, LinesToWrite, "Hex Write UTILITY")
    Next
    Call Sc.ProgressBox ("", 0, 0, "")
End Sub

Sub WriteSpecial() ' From Canard
    Dim Address
    Dim Data
    Dim Options

    Sc.Print vbcrlf & "EEP LOAD...."
    Address=Sc.InputBox("Address (Hex):  ","EEP LOAD","")
    Data=Sc.InputBox("Data (Hex, No Spaces):  ","EEP LOAD","")
    Options=Sc.InputBox("Option (D/E):  ","EEP LOAD","D")
    Options = UCase(Options)
    Sc.Write("A2")
    Call WriteViaLoader(Address,Data,Options)
End Sub

Sub UnMarryIRD()
    Sc.Write("A2")
    Call Sc.ProgressBox ("UnMarrying IRD...", 1, 2, "Unmarrying Card")
    Call WriteViaLoader("24A4","00000000","E")    ' Clear IRD
    Call Sc.ProgressBox ("UnMarrying IRD...", 2, 2, "Unmarrying Card")
    Call WriteViaLoader("2460","00000000","E")    ' Clear IRD
    Call Sc.ProgressBox ("", 0, 0, "")
    If Mode <> UCase(True) then Call ShutDownCard()
End Sub

Sub CleanPPV()
    Sc.Write("A2")
    Call Sc.ProgressBox ("Wiping PPV...", 1, 9, "Cleaning PPV")
    Call WriteViaLoader("2030","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 2, 9, "Cleaning PPV")
    Call WriteViaLoader("2050","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 3, 9, "Cleaning PPV")
    Call WriteViaLoader("2070","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 4, 9, "Cleaning PPV")
    Call WriteViaLoader("2090","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 5, 9, "Cleaning PPV")
    Call WriteViaLoader("20B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 6, 9, "Cleaning PPV")
    Call WriteViaLoader("20D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 7, 9, "Cleaning PPV")
    Call WriteViaLoader("20F0","000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 8, 9, "Cleaning PPV")
    Call WriteViaLoader("2024","000000000000000000000000","E")
    Call Sc.ProgressBox ("Wiping PPV...", 9, 9, "Cleaning PPV")
    Call WriteViaLoader("2416","20200001006C000188B9","E")
    Call Sc.ProgressBox ("", 0, 0, "")
    Changed = 1
    Sc.Write("A0")
    If Mode <> UCase(True) then Call ShutDownCard()
End Sub

Sub Fix4thByte()
    Sc.Write("A2")
    Call Sc.ProgressBox ("Fixing 4th Byte...", 1, 1, "4th Byte Repair")
    Call WriteViaLoader("2465","0000","E")    ' Fix 4th Byte
    Call Sc.ProgressBox ("", 0, 0, "")
    If Mode <> UCase(True) then Call ShutDownCard()
End Sub

Sub WriteAreaInfo()
    Sc.Write("A2")
    Call Sc.ProgressBox ("Writing Area Info...", 1, 12, "Fuse Bytes")
    Call WriteViaLoader("2014",FuseBytes,"D")
    Call Sc.ProgressBox ("Writing Area Info...", 2, 12, "Zip Code")
    Call WriteViaLoader("2410",ZipCodeHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 3, 12, "Time Zone")
    Call WriteViaLoader("24E0",TimeZoneHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 4, 12, "DTV Spend Limit")
    Call WriteViaLoader("241E",DTVSpendHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 5, 12, "User Spend Limit")
    Call WriteViaLoader("2406",USRSpendHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 6, 12, "Buy Option")
    Call WriteViaLoader("241B",BuyOptHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 7, 12, "Rating Limit")
    Call WriteViaLoader("2464",RatingHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 8, 12, "UnMarrying")
    If UnMarry = 1 then Call WriteViaLoader("2460","00000000","E")
    Call Sc.ProgressBox ("Writing Area Info...", 9, 12, "UnMarrying")
    If UnMarry = 1 then Call WriteViaLoader("24A4","00000000","E")
    Call Sc.ProgressBox ("Writing Area Info...", 10, 12, "BlackOut Bits")
    Call WriteViaLoader("2500","0D200808080208084008080808080808","E")
    Call Sc.ProgressBox ("Writing Area Info...", 11, 12, "BlackOut Bits")
    Call WriteViaLoader("2510","82" & LocalByteHex & "050808080808FFFFFFFF000081" & GuideByteHex,"E")
    Call Sc.ProgressBox ("Writing Area Info...", 12, 12, "12 Byte Key")
    Call WriteViaLoader("24F4",HexString(Key12Byte(0), 2) & HexString(Key12Byte(1), 2) & HexString(Key12Byte(2), 2) & HexString(Key12Byte(3), 2) & HexString(Key12Byte(4), 2) & HexString(Key12Byte(5), 2) & HexString(Key12Byte(6), 2) & HexString(Key12Byte(7), 2) & HexString(Key12Byte(8), 2) & HexString(Key12Byte(9), 2) & HexString(Key12Byte(10), 2) & HexString(Key12Byte(11), 2),"D")
    Call Sc.ProgressBox ("", 0, 0, "")
    Changed = 1
    If Mode <> UCase(True) then Call ShutDownCard()
    Sc.Write("A0")
End Sub

Sub AreaInfo()
    Dim HexZipCode1
    Dim HexZipCode2
    Dim ThisChar
    Dim Spend

    If IsNumeric(DefaultZip) And Len(DefaultZip) = 5 then
        HexZipCode1 = ""
        HexZipCode2 = ""
        For ThisChar = 1 To 2
            HexZipCode1 = "5" & HexZipCode1 & "3" & Mid(DefaultZip, ThisChar, 1)
        Next
        For ThisChar = 3 To 5
            HexZipCode2 = HexZipCode2 & "3" & Mid(DefaultZip, ThisChar, 1)
        Next
            ZipCodeHex = HexZipCode1 & HexZipCode2 & "2020"
            TimeZoneHex = DefaultTZ
    End If
    LocalByteHex = DefaultMarket
    GuideByteHex = DefaultGuide
    FuseBytes = DefaultFuse
    If DefaultDTVSpend >= 0 and DefaultDTVSpend <= 600 and DefaultUSRSpend >= 0 and DefaultUSRSpend <= 600 and Len(DefaultBuyOpt) = 2 then
        DTVSpendHex = HexString((DefaultDTVSpend * 100) + 1,4)
        USRSpendHex = HexString((DefaultUSRSpend * 100) + 1,4)
        BuyOptHex = DefaultBuyOpt
    Else Call GetSpend()
    End If
    UnMarry = DefaultUnMarry
    RatingHex = "09"
    If DefaultRating = "LA" then RatingHex = "00"
    If DefaultRating = "NR" then RatingHex = "01"
    If DefaultRating = "G" then RatingHex = "02"
    If DefaultRating = "PG" then RatingHex = "04"
    If DefaultRating = "PG13" then RatingHex = "06"
    If DefaultRating = "NRC" then RatingHex = "07"
    If DefaultRating = "R" then RatingHex = "09"
    If DefaultRating = "NRM" then RatingHex = "0B"
    If DefaultRating = "NC17" then RatingHex = "0D"
End Sub

Sub GetAreaInfo()
    Call GetZipCode()
    Call GetTimeZone()
    Call GetLocalByte()
    Call GetGuideByte()
    Call GetFuseBytes()
    Call GetSpend()
    Call GetRating()
    RetVal = Sc.ButtonBox("Would you like to UnMarry this card in this process?", vbQuestion, "Area Info", "Yes", "No")
    If RetVal = 1 then Unmarry = 1
End Sub

Sub GetZipCode()
    Dim GotInput
    Dim PromptString
    Dim ZipCode
    Dim HexZipCode1
    Dim HexZipCode2
    Dim ThisChar

    PromptString = ""
    GotInput = False
    Do
        PromptString = PromptString & "Please enter your five digit zip code:"
        ZipCode = Sc.InputBox(PromptString, "Area Info", DefaultZip)
        If ZipCode = "" Then ZipCode = DefaultZip
        PromptString = ""
        If IsNumeric(ZipCode) And Len(ZipCode) = 5 and ZipCode > 1000 and ZipCode < 99951 Then
            GotInput = True
        Else
            PromptString = "Invalid Input!" & vbCrLf & vbCrLf
        End If
    Loop Until GotInput = True
    HexZipCode1 = ""
    HexZipCode2 = ""
    For ThisChar = 1 To 2
        HexZipCode1 = "5" & HexZipCode1 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    For ThisChar = 3 To 5
        HexZipCode2 = HexZipCode2 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    ZipCodeHex = HexZipCode1 & HexZipCode2 & "2020"
End Sub

Sub GetTimeZone()
    Dim RetVal
    Dim GotInput
    Dim PromptString
    Dim TZT
    Dim TZ
    Dim TimeZone
    Dim DefaultTZButton
    Dim DefaultDaylightButton
    Dim DefaultMainButton
    Dim Daylight

    GotInput = False
Do
    PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "This will determine the correct time on your receiver" & vbCrLf & "and will be used for guide and timer settings." & vbCrLf & "If you don't see your option click More..." & vbCrLf
    RetVal = Sc.ButtonBox(PromptString, DefaultButton2 + vbQuestion, "Area Info", "Pacific", "Mountain", "Central", "Eastern", "More")
    Select Case UCase(RetVal)
        Case "1"
            TZ = 0
            TimeZone = "Pacific"
            GotInput = True
        Case "2"
            TZ = 2
            TimeZone = "Mountain"
            GotInput = True
        Case "3"
            TZ = 4
            TimeZone = "Central"
            GotInput = True
        Case "4"
            TZ = 6
            TimeZone = "Eastern"
            GotInput = True
        Case "5"
            Do
                PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "If you don't see your option click Back..." & vbCrLf
                RetVal = Sc.ButtonBox(PromptString, DefaultTZButton + vbQuestion, "Area Info", "Atlantic", "NewFoundland", "Back")
                Select Case UCase(RetVal)
                    Case "1"
                        TZ = 8
                        TimeZone = "Atlantic"
                        GotInput = True
                    Case "2"
                        TZ = 9
                        TimeZone = "NewFoundland"
                        GotInput = True
                    Case "3"
                        Exit Do
                    End Select
            Loop Until GotInput = True
            End Select
Loop Until GotInput = True
    GotInput = False
    Do
        PromptString = "Please select Standard Time or Day Light Savings," & vbCrLf & vbCrLf
        PromptString = PromptString & "for the " & TimeZone & " Time Zone."
        RetVal = Sc.ButtonBox(PromptString,  DefaultDaylightButton + vbQuestion, "Area Info", "DayLight", "Standard", "Cancel")
        Select Case UCase(RetVal)
            Case "1"
                TZT = 160 'daylight
                TimeZone = TimeZone & "/DayLight Savings"
                GotInput = True
            Case "2"
                TZT = 32 'standard
                TimeZone = TimeZone & "/Standard"
                GotInput = True
            End Select
    Loop Until GotInput = True
        TimeZoneHex = HEX(TZT + TZ)
End Sub

Sub GetLocalByte()
    Dim PromptString
    Dim RetVal
    Dim GotInput

    GotInput = False
    Do
        PromptString = "Select Your Locals Byte"
        PromptString = PromptString & "" & vbCrLf
        PromptString = PromptString & "01 Atlanta" & vbtab & vbtab & "16 Greenville**" & vbtab & vbtab & "25 Pittsburgh*" & vbCrLf
        PromptString = PromptString & "19 Austin*" & vbtab & vbtab & "08 Houston" & vbtab & vbtab & "26 Portland" & vbCrLf
        PromptString = PromptString & "1A Baltimore*" & vbtab & vbtab & "20 Indianapolis" & vbtab & vbtab & "17 Raleigh**" & vbCrLf
        PromptString = PromptString & "1B Birmingham*" & vbtab & vbtab & "21 Kansas City*" & vbtab & vbtab & "10 Sacramento" & vbCrLf
        PromptString = PromptString & "02 Boston" & vbtab & vbtab & "09 Los Angeles" & vbtab & vbtab & "18 Salt Lake" & vbCrLf
        PromptString = PromptString & "1C Charlotte" & vbtab & vbtab & "22 Memphis*" & vbtab & vbtab & "27 San Antonio*" & vbCrLf
        PromptString = PromptString & "03 Chicago" & vbtab & vbtab & "0A Miami" & vbtab & vbtab & "28 San Diego*" & vbCrLf
        PromptString = PromptString & "1D Cincinnati" & vbtab & vbtab & "23 Milwaukee" & vbtab & vbtab & "11 San Francisco" & vbCrLf
        PromptString = PromptString & "04 Cleveland" & vbtab & vbtab & "0B Minneapolis" & vbtab & vbtab & "12 Seattle" & vbCrLf
        PromptString = PromptString & "1E Columbus" & vbtab & vbtab & "24 Nashville" & vbtab & vbtab & "13 St. Louis" & vbCrLf
        PromptString = PromptString & "05 Dallas" & vbtab & vbtab & "0C New York, NY" & vbtab & "14 Tampa" & vbCrLf
        PromptString = PromptString & "06 Denver" & vbtab & vbtab & "0D Orlando" & vbtab & vbtab & "29 W Palm Beach*" & vbCrLf
        PromptString = PromptString & "07 Detroit" & vbtab & vbtab & "0E Philadelphia" & vbtab & vbtab & "15 Washington, D.C." & vbCrLf
        PromptString = PromptString & "1F Greensboro*" & vbtab & vbtab & "0F Phoenix" & vbtab & vbtab & "00 No Locals" & vbCrLf
        PromptString = PromptString & "" & vbCrLf
        PromptString = PromptString & "*Double LNB Required" & vbtab & "**Triple LNB Required" & vbCrLf
        PromptString = PromptString & "" & vbCrLf
        PromptString = PromptString & "Please allow 2 hours for your local 1-99 channels to appear in the guide." & vbCrLf
        PromptString = PromptString & "Please enter your favorite local channels code:" & vbCrLf
        PromptString = PromptString & "" & vbCrLf
        RetVal = Sc.InputBox(PromptString, "Area Info", DefaultMarket)
        If IsHex(RetVal) and Len(RetVal) = 02 then
            LocalByteHex = RetVal
            GotInput = True
        End if
    Loop Until GotInput = True
End Sub

Sub GetGuideByte()
    Dim PromptString
    Dim RetVal
    Dim GotInput

    GotInput = False
    Do
        PromptString = ""
        PromptString = "Select Guide Byte:" & vbCrLf
        PromptString = PromptString & "" & vbCrLf
        PromptString = PromptString & "02 Atlanta" & vbtab & vbtab & "28 Greenville**" & vbtab & vbtab & "01 Pittsburgh*" & vbCrLf
        PromptString = PromptString & "20 Austin*" & vbtab & vbtab & "01 Houston" & vbtab & vbtab & "01 Portland" & vbCrLf
        PromptString = PromptString & "02 Baltimore*" & vbtab & vbtab & "02 Indianapolis" & vbtab & vbtab & "01 Raleigh**" & vbCrLf
        PromptString = PromptString & "01 Birmingham*" & vbtab & vbtab & "01 Kansas City*" & vbtab & vbtab & "40 Sacramento" & vbCrLf
        PromptString = PromptString & "41 Boston" & vbtab & vbtab & "11 Los Angeles" & vbtab & vbtab & "02 Salt Lake" & vbCrLf
        PromptString = PromptString & "48 Charlotte" & vbtab & vbtab & "40 Memphis*" & vbtab & vbtab & "02 San Antonio*" & vbCrLf
        PromptString = PromptString & "10 Chicago" & vbtab & vbtab & "02 Miami" & vbtab & vbtab & "10 San Diego*" & vbCrLf
        PromptString = PromptString & "40 Cincinnati" & vbtab & vbtab & "01 Milwaukee" & vbtab & vbtab & "28 San Francisco" & vbCrLf
        PromptString = PromptString & "04 Cleveland" & vbtab & vbtab & "28 Minneapolis" & vbtab & vbtab & "10 Seattle" & vbCrLf
        PromptString = PromptString & "28 Columbus" & vbtab & vbtab & "10 Nashville" & vbtab & vbtab & "08 St. Louis" & vbCrLf
        PromptString = PromptString & "28 Dallas" & vbtab & vbtab & "28 New York, NY" & vbtab & "08 Tampa" & vbCrLf
        PromptString = PromptString & "60 Denver" & vbtab & vbtab & "01 Orlando" & vbtab & vbtab & "20 W Palm Beach*" & vbCrLf
        PromptString = PromptString & "08 Detroit" & vbtab & vbtab & "60 Philadelphia" & vbtab & vbtab & "12 Washington, D.C." & vbCrLf
        PromptString = PromptString & "08 Greensboro*" & vbtab & vbtab & "08 Phoenix" & vbtab & vbtab & "00 No Locals" & vbCrLf
        RetVal = Sc.InputBox(PromptString, "Area Info", DefaultGuide)
        If IsHex(RetVal) and Len(RetVal) = 02 then
            GuideByteHex = RetVal
            GotInput = True
        End if
    Loop Until GotInput = True
End Sub

Sub GetFuseBytes()
    Dim GotInput
    Dim PromptString
    Dim Fuse1
    Dim Fuse2

    PromptString = ""
    GotInput = False
    Do
        PromptString = PromptString & "Please enter the fuse bytes you wish to use:"
        FuseBytes = Sc.InputBox(PromptString, "Area Info", DefaultFuse)
        If FuseBytes = "" Then
            FuseBytes = DefaultFuse
        End If
        PromptString = ""
        Fuse1 = Mid(FuseBytes,1,2)
        Fuse2 = Mid(FuseBytes,3,4)
        If HexString(Hex2Dec(Fuse1) Xor Hex2Dec(Fuse2),2) = "FF" Then
            GotInput = True
        Else
            PromptString = "Invalid Fuse Bytes!" & vbCrLf & vbCrLf
        End If
    Loop Until GotInput = True
End Sub

Sub GetSpend()
    Dim GotInput
    Dim PromptString
    Dim Spend
    Dim BuyOpt

    PromptString = ""
    Do
        GotInput = False
        Spend = ""
        PromptString = PromptString & "Please enter the DTV Total Spending Limits you wish to use:"
        Spend = Sc.InputBox(PromptString, "Area Info", DefaultDTVSpend)
        If Spend >= 0 and Spend <= 600 then gotinput = true
        PromptString = ""
    Loop Until GotInput = True
        DTVSpendHex = HexString((Spend * 100) + 1,4)
    Do
        GotInput = False
        Spend = ""
        PromptString = PromptString & "Please enter the Per Event Spending Limits you wish to use:"
        Spend = Sc.InputBox(PromptString, "Area Info", DefaultUSRSpend)
        If Spend >= 0 and Spend <= 600 then gotinput = true
        PromptString = ""
    Loop Until GotInput = True
        USRSpendHex = HexString((Spend * 100) + 1,4)
    Do
        GotInput = False
        BuyOptHex = ""
        PromptString = PromptString & "Please enter the PPV Buy Option you wish to use:"
        BuyOptHex = Sc.InputBox(PromptString, "Area Info", DefaultBuyOpt)
        If Len(BuyOptHex) = 2 then gotinput = true
        PromptString = ""
    Loop Until GotInput = True
End Sub

Sub GetRating()
    Dim GotInput
    Dim PromptString
    Dim DefaultMainButton

    PromptString = ""
    GotInput = False
    If DefaultRating = "LA" or DefaultRating = "NR" or DefaultRating = "G" or DefaultRating = "PG" or DefaultRating = "PG13" or DefaultRating = "NRC" or DefaultRating = "R" or DefaultRating = "NRM" or DefaultRating = "NC17" then
    PromptString = "Would you like to use the default Rating Limit?" & VbCr & VbTab & VbTab & "    " & DefaultRating
        RetVal = Sc.ButtonBox(PromptString, DefaultMainButton + vbQuestion, "Area Info", "Yes", "No")
        If RetVal = 1 then
            If DefaultRating = "LA" then RatingHex = "00"
            If DefaultRating = "NR" then RatingHex = "01"
            If DefaultRating = "G" then RatingHex = "02"
            If DefaultRating = "PG" then RatingHex = "04"
            If DefaultRating = "PG13" then RatingHex = "06"
            If DefaultRating = "NRC" then RatingHex = "07"
            If DefaultRating = "R" then RatingHex = "09"
            If DefaultRating = "NRM" then RatingHex = "0B"
            If DefaultRating = "NC17" then RatingHex = "0D"
        End If
        If RetVal = 2 then
    Do
        PromptString = "Please select your Rating Limit."& vbCrLf & "If you don't see your option click More..." & vbCrLf
        RetVal = Sc.ButtonBox(PromptString, DefaultMainButton + vbQuestion, "Area Info", "Lock All", "Not Rated", "Rated G", "Rated PG", "More")
        Select Case UCase(RetVal)
            Case "1"
                RatingHex = "00"
                GotInput = True
            Case "2"
                RatingHex = "01"
                GotInput = True
            Case "3"
                RatingHex = "02"
                GotInput = True
            Case "4"
                RatingHex = "04"
                GotInput = True
            Case "5"
                Do
                    PromptString = "Please select your Rating Limit."
                    RetVal = Sc.ButtonBox(PromptString, DefaultMainButton + vbQuestion, "Area Info", "Rated PG13", "NR Content", "R", "NR Mature", "NC17")
                    Select Case UCase(RetVal)
                        Case "1"
                            RatingHex = "06"
                            GotInput = True
                        Case "2"
                            RatingHex = "07"
                            GotInput = True
                        Case "3"
                            RatingHex = "09"
                            GotInput = True
                        Case "4"
                            RatingHex = "0B"
                            GotInput = True
                        Case "5"
                            RatingHex = "0D"
                            GotInput = True
                        End Select
                Loop Until GotInput = True
                End Select
    Loop Until GotInput = True
        End If
        End If
        GotInput = False
End Sub

Sub InstallUSW()
    Dim USWH
    Dim USWL
    Dim USW
    Dim Updates(8)

    Sc.Write("06C20124C88200")
    Sc.Read(&h02)
    Sc.Read(&h03)
    USWH = Sc.GetByte(0)
    USWL = Sc.GetByte(1)
    USWH = HexString(USWH Xor Hex2Dec(XORedByte(0)),2)
    USWL = HexString(USWL Xor Hex2Dec(XORedByte(1)),2)
    USW = USWH & USWL
    USW = Hex2Dec(USW)
    Sc.Write("A2")
    Call Sc.ProgressBox ("Installing Updates...", &h0100, USW,"Installing Updates")
    Call WriteViaLoader("2B00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2B20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2B40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2B60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2B80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2BA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2BC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2BE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2C00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2C20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2C40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2C60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2C80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2CA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2CC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2CE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2D00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2D20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2D40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2D60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2D80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2DA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    If USW => &h0100 Then
        Call Sc.ProgressBox ("Installing Updates... USW 1", &h0100, USW,"Installing Updates")
        Call WriteViaLoader("2CE8","7D40BE0652F7803DFFFFC5F7083DAA2CE0A6013DFC2130C35D070FF28839072C","D")
        Call WriteViaLoader("2D08","8E38EEAA2CE0A6013DFC2130","D")
    End If
    If USW => &h0200 Then
        Call Sc.ProgressBox ("Installing Updates... USW 2", &h0200, USW,"Installing Updates")
        Call WriteViaLoader("2D14","D524C5AA24D8D002AA24C0430002AA2658430002A6013DFC80351302440024C3","D")
        Call WriteViaLoader("2D34","5D030FDF122406037404288CC1C9","D")
    End If
    If USW => &h0300 Then
        Call Sc.ProgressBox ("Installing Updates... USW 3", &h0300, USW,"Installing Updates")
        Call WriteViaLoader("2D42","760428038CD5138C2024","D")
        Call WriteViaLoader("2CE0","21513C515063DE1E","D")
    End If
    If USW => &h0400 Then
        Call Sc.ProgressBox ("Installing Updates... USW 4", &h0400, USW,"Installing Updates")
        Call WriteViaLoader("370E","2CE8","D")
        Call WriteViaLoader("270F","2D42","D")
        Call WriteViaLoader("2D4C","22F2008B23D50031","D")
    End If
    If USW => &h0500 Then
        Call Sc.ProgressBox ("Installing Updates... USW 5", &h0500, USW,"Installing Updates")
        Call WriteViaLoader("2D54","2698007A271103BD2CD000102CE800642D4C00402D8C002B","D")
        Call WriteViaLoader("2D6C","2F0801323039011E315907E1393D060B3F5800103F8800773FFF00013FFF0001","D")
    End if
    If USW => &h0600 Then
        Call Sc.ProgressBox ("Installing Updates... USW 6", &h0600, USW,"Installing Updates")
        Call WriteViaLoader("2D8C","7D08E3060342DEDD7D10E3021DD3E370042EDEDD07EAC59A2EAB002970012EC3","D")
        Call WriteViaLoader("2DAC","5704F470FF2C70FC2EC3F9","D")
        Call WriteViaLoader("2CD0","5503AA013AD0DBD524882D482ED5E3F9","D")
    End If
    If USW => &h0700 Then
        Call Sc.ProgressBox ("Installing Updates... USW 7", &h0700, USW,"Installing Updates")
        Call WriteViaLoader("2902","2932","D")
        Call WriteViaLoader("2932","22C2B8227AB888305C43F9","D")
        Call WriteViaLoader("2CEB","00","D")
        Call WriteViaLoader("2D4A","C27A","D")
    End If
    If USW => &h0800 Then
        Call Sc.ProgressBox ("Installing Updates... USW 8", &h0800, USW,"Installing Updates")
        Call WriteViaLoader("2D16","77201E037420D28E3866","D")
        Call WriteViaLoader("2D20","F97720D2067420B775DFD28CC38F8801","D")
        Call WriteViaLoader("2D30","772C7720B7069A2C25BF9B2CD72CF9","D")
        Call WriteViaLoader("33C8","2D21","D")
        Call WriteViaLoader("384C","8C2D16","D")
        Call WriteViaLoader("3C37","FF8E2D2E","D")
    End If
    Call Sc.ProgressBox ("Installing Updates...", 0, 0,"Installing Updates")
    If DSWInst = UCase(True) Then Call InstallDSW6()
End Sub

Sub InstallDSW6()
    Sc.Write("A2")
    Call Sc.ProgressBox ("Installing DSW6...", 1, 6,"Installing DSW6")
    Call WriteViaLoader("2DE0","A014EB90793ED0DDAF5F16258DB1F1D186D257FB40D54C9CC085B574C7A221E9","E")
    Call Sc.ProgressBox ("Installing DSW6...", 2, 6,"Installing DSW6")
    Call WriteViaLoader("2E00","3B6AA7A5A3E69FBA06663619D99A373B25A0672E34D0D75098DDFAA08320059C","E")
    Call Sc.ProgressBox ("Installing DSW6...", 3, 6,"Installing DSW6")
    Call WriteViaLoader("2E20","DF9F8A521FA661AEC0245E70420041E0766627851D913D443C346963EB4DDEF5","E")
    Call Sc.ProgressBox ("Installing DSW6...", 4, 6,"Installing DSW6")
    Call WriteViaLoader("2E40","349FF0201B3107BD8CB670D3A8D65EC48CC6AABAB39E44F31D65914E7E5BD946","E")
    Call Sc.ProgressBox ("Installing DSW6...", 5, 6,"Installing DSW6")
    Call WriteViaLoader("2E60","ECF9287A1915B4E4CA94D69813AC2E60BBDA832DDF22CD36800AE79FBF395A","E")
    Call Sc.ProgressBox ("Installing DSW6...", 6, 6,"Installing DSW6")
    Call WriteViaLoader("2AD3","0167B0E3F472674726F97061E5BBC137A9","E")
    Call WriteViaLoader("31AD","7A","D")
    Call WriteViaLoader("24E7","06","E")
    Call Sc.ProgressBox ("Installing DSW6...", 0, 0,"Installing DSW6")
    Call CheckSum()
End Sub

Sub ShutdownCard()
    If Changed = 1 then Call Checksum()
    Sc.Write("A0")              ' Turn the LED off
    Sc.Write("020200")             ' Shutdown card
    Sc.Delay(SCDel)
    Sc.Read(&h02)
    BootCard = 0
    boot = 0
    Changed = 0
    CrdTyp = DefCrdTyp
    Booted = UCase(False)
    Mode = UCase(False)
    BootCard = 0
    EPROMKey = "*"
    ModChoice = " "
    Fs.FileClose(InFile)
    Fs.FileClose(OutFile)
End Sub

Sub CheckSum()
    Dim Add(4)

    Add(1) = (&h2B0 + INT(RND * &h19)) * &h10
    Add(2) = Add(1) + &h20
    Add(3) = Add(1) + &h40
    Add(4) = Add(1) + &h60
    Add(1) = HexString(Add(1),2)
    Add(2) = HexString(Add(2),2)
    Add(3) = HexString(Add(3),2)
    Add(4) = HexString(Add(4),2)
'Tier Data CheckSums
    Call Sc.ProgressBox ("Writing code for Tier Checksums...", 1, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(1) & "8821062AC5982A3088009032720406EB751F93720406880090308E285670042A00")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Writing code for Tier Checksums...", 2, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(2) & "88003930982A32720206D829D82AEDD42AD42970022AC35D280FCAF90000000000")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Calculating Tier Checksums...", 3, 10,"Calculating Checksums")
    Sc.Write("05C241" & Add(1) & "00")
    Sc.Delay(SCDel)
    Sc.Read(&h02)
'PPV Data CheckSums
    Call Sc.ProgressBox ("Writing Code for PPV Checksums...", 4, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(3) & "8824183088009032720C068EE605720C06880090308E2856880039308824243200")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Writing Code for PPV Checksums...", 5, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(4) & "7202068EE5EEF90000000000000000000000000000000000000000000000000000")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Calculating PPV Checksums...", 6, 10,"Calculating Checksums")
    Sc.Write("05C241" & Add(3) & "00")
    Sc.Delay(SCDel)
    Sc.Read(&h02)
'Restore Bytes to normal
    Call Sc.ProgressBox ("Cleaning Code...", 7, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(1) & EPROMKey & EPROMKey & EPROMKey & EPROMKey & "00")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Cleaning Code...", 8, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(2) & EPROMKey & EPROMKey & EPROMKey & EPROMKey & "00")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Cleaning Code...", 9, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(3) & EPROMKey & EPROMKey & EPROMKey & EPROMKey & "00")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("Cleaning Code...", 10, 10,"Calculating Checksums")
    Call WDTMR()
    Sc.Write("25E29F" & Add(4) & EPROMKey & EPROMKey & EPROMKey & EPROMKey & "00")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("", 0, 0,"")
End Sub

Sub IRDAltEEPROM()
    Sc.Write("A2")
    Call WriteViaLoader("2B20","8E2B3D8E2B488E0080883BA22A723EE072D6E172E015720204E78C3BA15220AA","D")
    Call WriteViaLoader("2B40","2BEEAB005FCAF8F95250AA2B9FAB007FCAF8F9","D")
    Call WriteViaLoader("2BA0","8820002A8800602C5220F75011F760139A2C9B2A70012A70012CCAF48F0004F7","D")
    Call WriteViaLoader("2BC0","0013F9F72211F723118F000AF72011F721118F0001F98800002E70012E7D2F2D","D")
    Call WriteViaLoader("2BE0","09F8F70011729004DA04FDF70011F900000000AA0000000000000000F300F3FF","D")
    Call WriteViaLoader("2C00","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","D")
    Call WriteViaLoader("3BA2","2B20","D")
    Sc.MsgBox "Please place card in IRD for a few minutes to correct the Alternate EEPROM" & vbcr & " data, then return to these utils to clean the card and any other operations."
End Sub

Function Atmel()
    Sc.Verbose = 0
    Dim I
    Sc.Write("90")
    If Sc.Read(4) < 4 then Exit Function
    For I = 0 to 3
        Atmel = Atmel & Chr(Sc.GetByte(I))
    Next
End Function

Function PrepCard()
    PrepCard = UCase(False)
    Call IsCardPresent()
    If AltEEGL = UCase(True) Then
        If BootAltEEPROM = UCase(True) Then
            PrepCard = UCase(True)
            Exit Function
        End If
        Exit Function
    End If
    If Booted <> UCase(True) Then
        If GetATR() = UCase(False) Then
            Call CardIsLooped()
            Exit Function
        Else
            If BootINS() = UCase(True) Then
                PrepCard = UCase(True)
            End If
        End If
    Else PrepCard = UCase(True)
    End If
End Function

Function BootAltEEPROM()
    Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter

    Call IsCardPresent()
    Counter = 0
    Do
        Counter = Counter + 1
        DAC4C = INT(RND() *&h15) + &h71    '71 - 86
        Sc.Write("A1")
        GotInput = False
        Sc.Write("06100E10019300")
        Sc.Delay(SCDel)
        Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)
        Call Sc.ProgressBox ("Glitching..." & vbtab & vbtab & "DAC4C: " & vbtab & vbtab &  HexString(DAC4C,2) & vbcr & Read, Counter + 1, 10, "Tryin to get in...")
        Sc.Write("B0" & HexString(DAC4C,2) & "0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
        Sc.Delay(SCDel * 2.5)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)
        End If
        Sc.Write("B08038F00000000069FFFFFFFF523FFD2284E1727B0772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)
        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If
    Loop Until GotInput = True
' send the bootloader
    Sc.Write("42FF22BE72FF14E1E2B0025E52729201522022FFAB005F5D100601B5CAF672AA6472F36D72F36FF71011F76013C5AA0060AB2000C35D2006F5F72011F721118EFB8700")
    Sc.Read(&h02)
    Sc.Write("3DFAF72211F723118EFB87F70013C5AA2020AB0060C35D0406F5526A9201C5AA0060E1C35D0406F70098C5F76013AA2000F70013E1C35D2406F18C010000")
    Sc.Read(&h02)
    Call Sc.ProgressBox ("", 0, 0, "")
    BootAltEEPROM = UCase(True)
End Function

Sub ReadAltEEPROM()
    Dim i
    Dim Data(2)

    Sc.Write("A2")
    Call WDTMR()
    Sc.Write("06C0000EFFA400")
    Sc.Read(2)
    Sc.Read(&h20)
    For i = 0 To 15
       Data(0) = Data(0) & HexString(Sc.GetByte(i),2)
    Next
    For i = 16 to 31
       Data(1) = Data(1) & HexString(Sc.GetByte(i),2)
    Next
    Sc.Read(4)
    For i = 0 To 3
       Data(2) = Data(2) & HexString(Sc.Getbyte(i),2)
    Next
    Sc.Read(1)
    If Data(0) = "00000000AA0000000000000000F300F3" and Data(1) = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" and Data(2) = "14012420" Then
        Sc.MsgBox("The Alt EEPROM appears to be free of corrupted data." & VbCr & "       Data: " & Data(0) & VbCr & "       Data: " & Data(1))
    Else
        Sc.MsgBox("The Alt EEPROM appears to still contain corrupted data." & VbCr & "     Data: " & Data(0) & VbCr & "     Data: " & Data(1))
    End If
Call ShutDownCard()
End Sub

Sub FixAltEEPROM()
    dim i

    Sc.Write("A2")
    Call WDTMR()
    Sc.Write("06C0FF0EFF8400")
    Sc.Read(2)
    Sc.Read(4)
    For i = 0 To 3
       Data = HexString(Sc.GetByte(i),2)
    Next
    Sc.Read(1)
Call ShutDownCard()
End Sub

Sub MMM()
    Dim tmp,cnt,crd
    Mode = False
Do
    If PromptAreaInfo = 1 and UseDefaultAreaInfo = 1 then
        PromptString = "Would you like to use the defaults?"
        RetVal = Sc.ButtonBox(PromptString, DefaultButton + vbQuestion, "Area Info", "Yes", "No")
        If RetVal = 1 then Call AreaInfo()
        If RetVal = 2 then Call GetAreaInfo()
    End If
    If PromptAreaInfo = 1 and UseDefaultAreaInfo = 0 then Call GetAreaInfo()
    If PromptAreaInfo = 0 and UseDefaultAreaInfo = 1 then Call AreaInfo()
    Mode = UCase(True)
    Call CleanCard()
    Call WriteAreaInfo()
    Call ShutDownCard()

    cnt = Sc.ButtonBox("Insert the next card in loader",0,"NEXT","OK","Done")
    If cnt = 2 then
        tmp="To complete the 3M'ing of the card(s), you must now run the a 3M script here or in Extreme."
        tmp=tmp & VbCr & "This routine has cleaned the card, installed USW's and set area info."
        cnt = Sc.ButtonBox(tmp,vbExclamation,"TO 3M","OK")
        Tool = ""
        Exit Sub
    End If
Loop Until GotInput = True
end sub