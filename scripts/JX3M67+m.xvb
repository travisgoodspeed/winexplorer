'updated again by mhw 12-22-01 - using info from CoYoTe99-Hey, maybe we'll get a weekend of TV
'Anonymously updated to fix hash of 12-17-01
'This will stop working if there are any dynamic code changes
'This should only be used on a BS H card with bootloader


' 67 USW Added by Merlin66 May 23, 2001. Thanks Jeffxfer for putting together a great script.
' JX3M - April 8, 2001
' Jeffxfer's 3M + C9 Nano Temporary hashfix
'For a full list of features of what this script does, examine the code and maybe you'll learn something.
'
'This script installs an open 3M on a BS h-card.  This script should NOT be used on a good non-BS H-card.
'The C9 'cloaking' code can successfully cloak the 5 bytes at 8000-8004 with dave's CURRENT method of hashing.
'I have done some pretty extensive comments on this script for those of you who are looking to get started on writing
'your own script.  Use this script as a learning experience, it will not last long in the public domain. This should
'provide any one who is willing and able to write their own code a starting point that covers the basics.  Please post
'any questions or comments on any of the popular fourms (hitec, dssu, pirates den), as I read those foums almost daily.
'If there are any errors in this script, please let me know and I will correct them as soon as possible.

'Thanks to DigiBluh for all his help.

'This script should be used for educational purposes only.





Option Explicit
    Dim DefaultTZButton
    Dim DefaultDaylightButton
    Dim TimeZone
    Dim Daylight
    Dim GotInput
    Dim SubCard
    Dim ZipCode
    Dim Local
    Dim ChannelGuide
    Dim MutateBytes
    Dim HexZipCode
    Dim RetVal
    Dim ThisChar
    Dim ErrorString
    Dim PromptString
    Dim Guide
    Dim TmpStr
    Dim CardUSW
    Dim HexTimeZone

Sub Main()

    Dim Jump        'Jump Point location that user selects
    Dim Rand1       'Random number that will be used in script
    Dim Rand2       'Random number that will be used in script
    Dim Rand3       'Random number that will be used in script
    Dim Ppv         'This variable is used to determine where the 3M code starts in the PPV area
    Dim PpvLoc      'Starting Point for 3M data
    Dim PpvLoc2     '3M Data Continued
    Dim PpvLoc3     '3M Data Continued
    Dim PpvLoc4     '3M Data Continued
    Dim PpvLoc5     '3M Data Continued
    Dim Offset      'This is the offset of where the BS bytes are now stored
    Dim HiddenLoc   'This is the actual location of where the bytes are stored

    If Sc.Version < 4.4 Then
        ErrorString = "You Need Version 4.4 or Greater of WinExplorer To Run This Script"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
    End If

    Sc.ByteDelay = 60000    ' Make sure we are set to 600 ms Byte Delay


    Randomize    'Set up 3 random hex numbers for use in script
    Rand1 = " " & Hex(15 * Rnd) & Hex(15 * Rnd)
    Rand2 = " " & Hex(15 * Rnd) & Hex(15 * Rnd)
    Rand3 = " " & Hex(15 * Rnd) & Hex(15 * Rnd)
    Ppv = ((6 * Rnd)+6)                     'This generates a random number between 6 and 12
    PpvLoc = "80 " & Hex(Ppv) & "0"         'Using the above number, the 3M starting address is created
    PpvLoc2 = "80 " & Hex(Ppv) & "8"        'In this script the 3M data is stored in the PPV area with a random starting
    PpvLoc3 = "80 " & Hex(Ppv+1) & "0"      '   point of either 8060, 8070, 8080, 8090, 80A0, 80B0, 80C0
    PpvLoc4 = "80 " & Hex(Ppv+1) & "8"      'For all below examples we will assume that this value is 8060
    PpvLoc5 = "80 " & Hex(Ppv+2) & "0"      '
    Offset = Hex((2 * Rnd)+3) & "0"         'This is the low byte of where the BS values will be stored, either 8030, 8040, 8050
    HiddenLoc = "80 " & Offset              'Actual Address of BS values; For all examples, we will assume 8030

    CardUSW = GetUSW()

    If  (CardUSW < 26) or (CardUSW > 67) Then

        ErrorString = "Your USW is not between 26 and 67 (decimal). This Script is only for cards between 26 and 67 Updates."
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString

    End If


    RetVal = Sc.MsgBox("This script expects a card that has been cleaned with BasicH." & vbCrLf & "Has this card been cleaned and had no other software applied?", vbYesNo + vbQuestion + vbDefaultButton2)
    If RetVal = vbNo Then
        Err.Raise 1050, , "User Aborted Script"
    End If

    ' Get Time Zone from User
    HexTimeZone = GetTimeZone()
    if HexTimeZone = vbCancel Then
        Exit Sub
    End If

    'Get Zip Code from user
    ZipCode = GetZipCode()
    Select Case ZipCode
        Case "0"
            Exit Sub
        Case Else
            For ThisChar = 1 To 5
               HexZipCode = HexZipCode & "3" & Mid(ZipCode, ThisChar, 1) & " "
            Next
    End Select


    'Allow the user to select Jump Point for 3M
    Jump = GetJump()
    If Jump = "0" then
       Exit Sub
    End If



    'Get guide byte from user
    GotInput = False
    Do
        PromptString = "Please enter your guide byte:" & vbCrLf
        PromptString = PromptString & "49 - normal" & vbCrLf
        PromptString = PromptString & "47 - normal" & vbCrLf
        PromptString = PromptString & "4B - normal" & vbCrLf
        PromptString = PromptString & "0B - normal" & vbCrLf
        PromptString = PromptString & "4F - normal" & vbCrLf
        PromptString = PromptString & "CF - normal" & vbCrLf
        PromptString = PromptString & "FF - Engineer mode" & vbCrLf
        RetVal = Sc.InputBox(PromptString, "Enter guide byte")

        Select Case UCase(RetVal)
        Case "49", "47", "4B", "0B", "4F", "CF", "FF"
            GotInput = True
            Guide = RetVal
        Case ""
            RetVal = Sc.MsgBox("Would you like to abort the Script?" & vbCrLf & "(It is safe to do so at this time.)", vbYesNo + vbQuestion)
            If RetVal = vbYes Then
                Sc.Print("User aborted installation")
                Exit Sub
            End If
        End Select
    Loop Until GotInput = True


    'Get local Market byte for 5th Generation Recievers
    local = getlocal()



    'Output all of the variable information to the log
    Sc.Print("The following values will be used in this script: " & vbCrlf)
    Sc.Print("3M PPV Locations: " & PpvLoc & " " & PpvLoc2 & " " & PpvLoc3 & " " & PpvLoc4 & " " & PpvLoc5 & vbCrlf)
    Sc.Print("3M Jump Point: " & Jump & vbCrlf)
    Sc.Print("Cloaking OffSet: " & Offset & vbCrlf)
    Sc.Print("Cloaking Start Address: " & HiddenLoc & vbCrlf)
    Sc.Print("Zip Code: " & HexZipCode & vbCrlf)
    Sc.Print("Guide Byte: " & Guide & vbCrlf)
    Sc.Print("Time Zone: " & TimeZone & vbCrlf)
    Sc.Print("Local Market Byte: " & local & vbcrlf)

'=======================================================================================================
'                                Installation Start
'=======================================================================================================

    Sc.Print(vbCrLf & "Beginning Installation." & vbCrLf)

     Sc.Print(vbCrLf & "Open E3 Hole")
     call OpenE3_48()

    Sc.Print(vbCrlf & "Writing Timezone")
    Call WriteE3( 1, "84 15", HexTimeZone)                                          'Setting user selected Time Zone

    Sc.Print(vbCrlf & "Writing ZIPcode")
    Call WriteE3( 8, "83 C8", "55 " & HexZipCode & " 20 20" )                       'Setting user selected Zip Code

    Sc.Print(vbCrLf & "Writing Guide Byte")
    Call WriteE3(1, "84 5F", Guide)                                                 'This will select the Guide Byte to be used
                                                                                    'For more info on How the Guide Byte works
                                                                                    'goto: http://id-discussions.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=28&t=000008
                                                                                    'to view Chicken's technical expalation

    Sc.Print(vbCrlf & "Writing Fuse bytes")
    Call WriteE3(2, "80 20", "25 DA")                                               'Note that the 2 Fuse bytes must always equal 0FFh when added together

    Sc.Print(vbCrlf & "Set activation date to random value")
    Call WriteE3( 6, "83 B4", Rand1 & Rand2 & Rand3 & Rand1 & Rand2 & Rand3 )       'This adds the activation date to make the card look more like a 'Sub' card

    Sc.Print(vbCrlf & "Set ppv limits to mimic sub cards")
    Call WriteE3(6, "83 D4", "00 01 00 66 00 01")                                   'Again, this code is set to make the card appear to be a Subscribed Card
    Call WriteE3(6, "83 DA", "75 31 1B 59 00 00")
    Call WriteE3(6, "83 E0", "00 02 00 68 00 01")
    Call WriteE3(6, "83 E6", "00 00 FF FE 00 00")

    Sc.Print(vbCrLf & "Clearing IRD #")
    Call WriteE3(4, "83 D0", "00 00 00 00")                                         'Clears the Ird# on the card
    Call WriteE3(4, "84 FC", "00 00 00 00")


    Sc.Print(vbCrlf & "Adding Local Markets Byte")                                  'This will addd the locals guide byte for use with 5th gen recievers
    Call WriteE3(1, "84 51", local)                                                 'Ram9999's discussion about this: http://chat.hitecsat.com/showthread.php?threadid=14531


    Sc.Print(vbCrlf & "Adding 3M code to a random location")
    Call WriteE3( 8, PpvLoc, "75 45 00 80 03 00 00 00" )
    Call WriteE3( 8, PpvLoc2, "75 27 00 80 03 00 00 00" )
    Call WriteE3( 8, PpvLoc3, "20 4E 0D 80 03 00 00 00" )
    Call WriteE3( 8, PpvLoc4, "75 27 03 80 03 00 00 00" )
    Call WriteE3( 3, PpvLoc5, "02 8D 2D" )

    'This is a simple but effective 3M code.  This code stops on-screen nag messages and allows Locks & Limits to be used
    'The starting address for this code is selected at random in the code above
    'For the below example we will assume that the starting point is 8060

    'This code follows the rule of no important bytes being in locations 80x6, 80x7, 80xE, and 80xF
    'Here is RAM9999's explanation that was included in the header for the Rampage Script

        ' Avoiding the x6 and xE columns protects
        ' from having bits 1 and 2 turned on for whatever bytes get written there.
        ' This is most evident by having an x0 value changed to x6 or x8 to xE.
        ' These changes can cause unpredictable results including disabling the
        ' 3M routine, cloaking routine and even looping the card itself. Avoiding
        ' x7 and xF columns prevents the Cmd18/MatchFound/Ins46 routine at ROM
        ' address 165Bh, specifically the code starting at ROM address 16A7h,
        ' from overwriting random parts of the EEPROM based on invalid PPV Provider
        ' slot #'s in these columns which causes false X745 messages as well as
        ' other unpredictable behavior.


    'In order for video to be authorized, memory location 27h must have bit 0 set.
    'In this example we set it by using    75 27 03  Mov 27h,#03h
    'Here is what the disassembly of the 3M code looks like
    '8060:  75 45 00        Mov 45h,#00h    'Mov the value 00h into memory location 45h, This stops on-screen Nag Messages
    '8063:  80 03           Sjmp 8068       'Jump over bytes that can be corrupted
    '8065:  00 00 00                        ' (Never Executed)
    '8068:  75 27 00        Mov 27h,#00h    'Clear all bits in memory location 27h to allow locks and limits to decide if the channel is allowed
    '806B:  80 03           Sjmp 8070       'Jump over bytes that can be corrupted
    '806D:  00 00 00                        ' (Never Executed)
    '8070:  20 4E 0D        JB 4E, 8080     'This allows locks and limits to work, if the bit 4E is set This will jump to 8080 and not authorize the channel
    '8073:  80 03           Sjmp 8078       'Jump over bytes that can be corrupted
    '8075:  00 00 00                        ' (Never Executed)
    '8078:  75 27 03        Mov 27h,#03h    'Set bits 0 and 1, by setting bit 0, channel is authorized
    '807B:  80 03           Sjmp 8080       'Jump over bytes that can be corrupted
    '807D:  00 00 00                        ' (Never Executed)
    '8080:  02 8D 2D        LJmp 8D2D       'Jump back to 8D2D at the end of Ins 54


    'For more information on how 3M's work, check out Hippie Fred's discussion on Private 3M's
    'http://id-discussions.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=28&t=000014




    Sc.Print(vbCrlf & "Activating 3m code")
    Call WriteE3( 3, Jump, "02 " & PpvLoc)

    'This will add the jump point from inside Ins 54 to our 3M code in the PPV area
    'Jump is the user selected jump point Example: 8D1A
    '"02 " is the Ljmp OpCode
    'PpvLoc is the first address to where we will jump in the PPV are Example: 8060
    'Using the above examples this would be the code at 8D1A: 02 80 60
    'Note that some jump points will cause the preview channels 100 & 200 not to have video



    Sc.Print(vbCrlf & "Adding Generic 900's Patch")
    Call WriteE3( 1, "8C CA", "22")

    'This code will stop some wirtes to your card.
    'The main reason is to stop the 900's from being wiped in 4th Generation and older recievers, and
    'will make sure that the local market byte does not get changed on 5th gen and later
    'This is an easy patch, but there are much better ways of doing this
    'Paramedic had a good discussion about these techniques a while back at this address:
    'http://www.dsschat.com/forum/showthread.php?threadid=26753
    'There is even code examples there that demonstrate how to do it



    Sc.Print(vbCrlf & "Adding Hash Cloaking Values")
    Call WriteE3( 5, HiddenLoc, "33 14 03 4A 80")

    'This will write the values that used to be at 8000h to 'HiddenLoc'
    'We will use the example of 8030h for the HiddenLoc variable
    '8030: 33 14 03 4A 80 00 00 00 00 00 00 00 00 00 00





    Sc.Print(vbCrlf & "Adding Hash Detection Code")
    Call WriteE3( 8, "88 A6", "C0 00 78 80 80 1E B6 90")
    Call WriteE3( 8, "88 AE", "1A 08 B6 80 17 08 C0 E0")
    Call WriteE3( 8, "88 B6", "E6 94 07 40 04 D0 E0 80")
    Call WriteE3( 8, "88 BE", "06 E6 24 " & Offset & " F6 D0 E0 80")
    Call WriteE3( 8, "88 C6", "02 18 18 08 B6 22 DF D0")
    Call WriteE3( 7, "88 CE", "00 12 05 7A 02 87 63")

    'This is the code that will substitute the correct values into the hash calculation if the dynamic code attempts to
    'read one of the values at 8000h-8004h

    'This code is jumped to from 8760
    '8760 is where the C9/D2 Nano writes the dynamic code to EEPROM
    'The dynamic code will not be written until it gets past this routine

    'In plain english
    'This code jumps from the C9/D2 nano where the nano would normally write the dynamic code to EEPROM. This code is
    'searching for the string '90 80 XX' where XX is 00, 01, 02, 03, 04. If it finds this string it will change it to
    'point to the 'cloaked' location before the data is written to the dynamic code area. Once this routine finds a
    '22 (ret) it will write the updated values to EEPROM and allow the nano to finish normally.



    '88A6:      C0 00       Push R0                             ; Save this value for later
    '88A8:      78 80       Mov R0,#80h                         ; 80h is where the dynamic code to be written is stored
    '88AA:      80 1E       sjmp 88CA                           ; Jump to 88CA to make sure the first byte of dynamic code is not 22 (ret)
    '88AC:      B6 90 1A    cjne @R0,#90h,88C9                  ; If the byte we are looking at is not 90h, jump to 88C9
    '88AF:      08          inc R0                              ; We have found that the first byte is 90h, inc R0 to point to the next byte
    '88B0:      B6 80 17    cjne @R0,#80h,88CA                  ; If the byte we are looking at is not 80h, jump to 88CA
    '88B3:      08          inc R0                              ; We have found the first 2 bytes of '90 80', so increment to check the 3rd value
    '88B4:      C0 E0       Push A                              ; Store A for later
    '88B6:      E6          Mov A,@R0                           ; This move's the third byte into A
    '88B7:      94 08       subb A,#04h                         ; Subtract 04 from A; If A is less than 4 the carry bit will be set, otherwise it is cleared
    '88B9:      40 04       JC 88BF                             ; If the Carry bit is set, it is looking for a BS value, jump to 88BF
    '88BB:      D0 E0       Pop A                               ; Restore A
    '88BD:      80 06       sjmp 88C7                           ; Not a BS byte, Jump to check for the next value
    '88BF:      E6          Mov A,@R0                           ; This is a BS byte, move the original low byte of the address into A
    '88C0:      24 30       Add A,30(offset variable)           ; Add the offset of where the 'Cloaked' Values are to the original low byte (In this example I use Offset=30h)
    '88C2:      F6          Mov @R0,A                           ; Mov the updated low byte back into the memory location where the original value was
    '88C3:      D0 E0       Pop A                               ; Restore A
    '88C5:      80 02       sjmp 88C9                           ; Jump to 88C9
    '88C7:      18          Dec R0                              ; Decrement R0
    '88C8:      18          Dec R0                              ; Decrement R0  (Could be replaced with an sjmp 01, this is just smaller)
    '88C9:      08          Inc R0                              ; Increment R0
    '88CA:      B6 22 DF    cjne @R0,#22,88ACh                  ; Check to see if the current byte is a 22 (ret) if it is not, jump back to 88AC
    '88CD:      D0 00       Pop R0                              ; Restore R0; once you get here all bytes have been checked
    '88CF:      12 05 7A    lcall EEPWriteR7from80hToDPTR       ; This will write the values in ram to the dynamic code area
    '88D2:      02 87 63    ljmp 8763                           ; Jump back to complete the nano normally


    'How to make this code better:
    'This routine simply checks for a 22(ret) command, a better way to do this is to use the value at R7 to make sure that all of the bytes are checked
    'Pick a different location than 88A6 to put it
    'Create more advanced code that integrates a real cloaking table to 'cloak' other values

    'There are many other ways to customize this code, just remember anything that is publically released will get hashed (including this script)


    Call ApplyUpdates()

    'This will apply updates 26 to 67



    Sc.Print(vbCrlf & "Activating Hash Detection Code")
    'Call WriteE3( 3, "87 60", "02 88 A6")

    'This will activate the cloaking code above.  It must be written after the updates because several updates change
    'the area where this code must be loaded.

    '8760:      02 88 A6    ljmp 88A6           ; This will jump to our cloaking code at 88A6

    'new hash code 12-17-01
    Call WriteE3( 3, "8760", "84 84 84")
    Call WriteE3( 12, "8924", "90" + HiddenLoc + "e7 ff 81 47 f7 09 df fa 22")

    Sc.Print(vbCrlf & "Setting USW to 67")
    call WriteE3(1, "84 07", "43")
    'End new code-------------------------
    'Begin 12-22 code
    Call WriteE3 ( 7, "8200", "74 FF F5 84 02 07 23")
    Call WriteE3 ( 2, "8231", "82 00")
    'End newer code


    Sc.Print(vbCrLf & "Closing the 'E3' hole")
    Call WriteE3(1, "85 91", "90")
    Sc.Print(vbCrLf & "The 'E3' hole is now closed")

    Sc.Print(vbCrLf & "Script Successfully Installed")

End Sub


'==========================================================================================
'                                     END OF MAIN CODE
'==========================================================================================



' ********************* Procedures and Subroutines *************************
'
' Do not change any thing below this line!
'****************************************************************************

'******** Thanks to CloakWorks for this fix. ***********
Sub OpenE3_48()
    Dim CurrentUSW
    Dim ErrorString

    CurrentUSW = GetUSW()
    Sc.Print(vbCrLf & "Opening E3 hole with 48 hole" & vbCrLF)
    Sc.Delay(500)
    Sc.Write("48 42 00 00 15")
    Sc.Read(1)
    Sc.Write("09 22 00 00 30 60 C0 05 00 " & Hex(CurrentUSW + 1) & " " & "85 91 80 BB 00 0C 0C 00 20 90 80")
    Sc.Read(2)
    Sc.Write("48 42 00 00 1E")
    Sc.Read(1)
    Sc.Write("09 10 00 00 30 2E 43 6C 6F 61 6B 60 00 1F")
    Sc.Write("02 80 48 30 45 57 6F 72 6B 73 0C 88 9F 19 F4 2F")
    Sc.Read(2)

    Sc.Print(vbCrLf & "Checking to see if E3 Hole opened")
    call WriteE3(1, "84 07", "1E")
    CurrentUSW = GetUSW()
    If CurrentUSW <> 30 then
    ErrorString = "Write via E3 FAILED!"
        Sc.MsgBox ErrorString, vbCritical
        Err.Raise 1050, , ErrorString
    End If

End Sub

Sub WriteE3(Bytes, AddrStr, DataStr)
    Dim BytesStr
    Dim Len1
    Dim Len1Str
    Dim Len2
    Dim Len2Str
    Dim ToWrite

    If Bytes < &H10 Then
        BytesStr = "0" & Hex(Bytes)
    Else
        BytesStr = Hex(Bytes)
    End If

    Len1 = &H0D + Bytes
    If Len1 < &H10 Then
        Len1Str = "0" & Hex(Len1)
    Else
        Len1Str = Hex(Len1)
    End If

    Len2 = &H04 + Bytes
    If Len2 < &H10 Then
        Len2Str = "0" & Hex(Len2)
    Else
        Len2Str = Hex(Len2)
    End If

    ' Write an update using the E3 hole
    ToWrite = "48 40 00 00 " & Len1Str
    Sc.Write(ToWrite)
    Sc.Read(&H1)
    ToWrite = "60 D5 02 85 8E E3 " & Len2Str & " " & BytesStr & " " & AddrStr & " " & DataStr & " 00 BB 00"
    Sc.Write(ToWrite)
    Sc.Read(&H2)
End Sub

Function GetZipCode()
    Dim InputValid
    Dim PromptString
    Dim ZipCode
    Dim Abort

    InputValid = False
    PromptString = ""
    Do
        PromptString = PromptString & "Please enter your five digit zip code:"
    ZipCode = Sc.InputBox(PromptString, "Enter Zip Code")

    If IsNumeric(ZipCode) And Len(Zipcode) = 5 Then
        GetZipCode = ZipCode
        InputValid = True
    ElseIf ZipCode = "" Then
        Abort = Sc.MsgBox("Would you like to abort the script?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion)
        If Abort = vbYes Then
        Sc.Log("Installation cancelled at zipcode selection.")
                Sc.Print(vbCrLf & "Installation cancelled at zipcode selection.")
                GetZipCode = "0"
                Exit Function
        End If
            PromptString = ""
    Else
            PromptString = "Invalid input!" & vbCrLf & vbCrLf
    End If
    Loop Until InputValid = True

End Function


Function GetJump()

    GotInput = False

    Do
        PromptString = "Please choose your jump point:" & vbCrLf
        PromptString = PromptString & "1: 8D 0D" & vbCrLf
        PromptString = PromptString & "2: 8D 11" & vbCrLf
        PromptString = PromptString & "3: 8D 16" & vbCrLf
        PromptString = PromptString & "4: 8D 17" & vbCrLf
        PromptString = PromptString & "5: 8D 1A" & vbCrLf
        PromptString = PromptString & "6: 8D 1D" & vbCrLf
        PromptString = PromptString & "7: 8D 20" & vbCrLf
        PromptString = PromptString & "8: 8D 24" & vbCrLf
        RetVal = Sc.InputBox(PromptString, "Choose your jump point")

        Select Case UCase(RetVal)
        Case "1"
            GetJump = "8D 0D"
            GotInput = True
        Case "2"
            GetJump = "8D 11"
            GotInput = True
        Case "3"
            GetJump = "8D 16"
            GotInput = True
        Case "4"
            GetJump = "8D 17"
            GotInput = True
        Case "5"
            GetJump = "8D 1A"
            GotInput = True
        Case "6"
            GetJump = "8D 1D"
            GotInput = True
        Case "7"
            GetJump = "8D 20"
            GotInput = True
        Case "8"
            GetJump = "8D 24"
            GotInput = True

        Case Else
            RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
            If RetVal = vbYes Then
                Sc.Print("User aborted installation" & vbCrLF)
                GetJump = "0"
                Exit Function
            End If
        End Select
    Loop Until GotInput = True

End Function

Function GetTimeZone ()
  Dim RetVal
  Dim GotInput
  Dim PromptString
  Dim TZT
  Dim TZ

''' Get time zone
    GotInput = False
    Do
        PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "This will determine the correct time on your receiver" & vbCrLf & "and will be used for guide and timer settings." & vbCrLf & "If you don't see your option click More..." & vbCrLf
        RetVal = Sc.ButtonBox(PromptString, DefaultTZButton + vbQuestion, "Select your Time Zone", "Pacific", "Mountain", "Central", "Eastern", "More...")

        Select Case    UCase(RetVal)
        Case "1"
            TZ = &h0
            TimeZone = "Pacific"
            GotInput = True
        Case "2"
            TZ = &h2
            TimeZone = "Mountain"
            GotInput = True
         Case "3"
            TZ = &h4
            TimeZone = "Central"
            GotInput = True
         Case "4"
            TZ = &h6
            TimeZone = "Eastern"
            GotInput = True
         Case "5"
            Do
               PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "If you don't see your option click Back..." & vbCrLf
               RetVal = Sc.ButtonBox(PromptString, DefaultTZButton + vbQuestion, "Select your Time Zone", "Atlantic", "NewFoundland", "Back...")
               Select Case    UCase(RetVal)
               Case "1"
                  TZ = &h8
                  TimeZone = "Atlantic"
                  GotInput = True
               Case "2"
                  TZ = &h9
                  TimeZone = "NewFoundland"
                  GotInput = True
               Case "3"
                  Exit Do
               End Select
            Loop Until GotInput = True
         Case "0"
            RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
            If RetVal = vbYes Then
                Sc.Print("User aborted installation" & vbCrLF)
                GetTimeZone = vbCancel
                Exit Function
            End If
        End Select
    Loop Until GotInput = True

    'Get Day light savings Time or Standard Time
    GotInput = False
    Do
        PromptString = "Please select Standard Time or Day Light Savings," & vbCrLf & vbCrLf
        PromptString = PromptString & "for the " & TimeZone & " Time Zone."
        RetVal = Sc.ButtonBox(PromptString,  DefaultDaylightButton + vbQuestion, "Select DayLight Savings or Standard Time", "DayLight", "Standard", "Cancel")

        Select Case UCase(RetVal)
        Case "1"
            TZT = &hA0
            TimeZone = TimeZone & "/DayLight Savings"
            GotInput = True
        Case "2"
            TZT = &h20
            TimeZone = TimeZone & "/Standard"
            GotInput = True
        Case "3", ""
            RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
    If RetVal = vbYes Then
                Sc.Print("User aborted installation" & vbCrLF)
                GetTimeZone = vbCancel
                Exit Function
            End If
        End Select
    Loop Until GotInput = True

    GetTimeZone = Hex(TZT + TZ)

End Function


Function getlocal()
    Dim RetVal
    Dim RetVal2
    Dim PromptString
    Dim GotInput


    RetVal = Sc.MsgBox("Would you like to select a locals market?" & vbCrLf & "This is only useful on 5th generation or newer recievers.", vbYesNo + vbQuestion + vbDefaultButton2)

    GotInput = False

    Do
    If RetVal = vbNo then
        getlocal = "00"
        gotinput = true
    Else
        PromptString = "Please Select a selection from the following list:" & vbCrlf & vbCrlf
        PromptString = PromptString & "00: No Locals" & vbtab & vbtab & vbtab & "01: Atlanta, GA" & vbtab & vbtab & vbtab & "02: Boston, MA" & vbCrlf
        PromptString = PromptString & "03: Chicago, IL" & vbtab & vbtab & vbtab & "04: Clevland, OH" & vbtab & vbtab & "05: Dallas, TX" & vbCrlf
        PromptString = PromptString & "06: Denver, CO" & vbtab & vbtab & vbtab & "07: Detroit, MI" & vbtab & vbtab & vbtab & "08: Houston, TX" & vbCrlf
        PromptString = PromptString & "09: Los Angeles, CA" & vbtab & vbtab & "0A: Maimi, FL" & vbtab & vbtab & vbtab & "0B: Minneapolis, MN" & vbCrlf
        PromptString = PromptString & "0C: New York, NY" & vbtab & vbtab & "0D: Orlando, FL" & vbtab & vbtab & vbtab & "0E: Philadelphia, PA" & vbCrlf
        PromptString = PromptString & "0F: Phoenix, AZ" & vbtab & vbtab & vbtab & "10: Sacramento, CA" & vbtab & vbtab & "11: San Francisco, CA" & vbcrlf
        PromptString = PromptString & "12: Seattle, WA" & vbtab & vbtab & vbtab & "13: St. Louis, MO" & vbtab & vbtab & "14: Tampa, FL" & vbCrlf
        PromptString = PromptString & "15: Washington DC" & vbtab & vbtab & "16: Greenville, SC" & vbtab & vbtab & "17: Raleigh, NC" & vbCRlf
        PromptString = PromptString & "18: Salt Lake City, UT" & vbtab & vbtab & "19: Austin, TX" & vbtab & vbtab & vbtab & "1A: Baltimore, MD" & vbCrlf
        PromptString = PromptString & "1B: Birmingham, AL" & vbtab & vbtab & "1C: Charlotte, NC" & vbtab & vbtab & "1D: Cincinnati, OH" & vbCrlf
        PromptString = PromptString & "1E: Columbus, OH" & vbtab & vbtab & "1F: Greensboro, NC" & vbtab & vbtab & "20: Indianapolis, IN" & vbCrlf
        PromptString = PromptString & "21: Kansas City, MO" & vbtab & vbtab & "22: Memphis, TN" & vbtab & vbtab & "23: Milwaukee, WI" & vbCrlf
        PromptString = PromptString & "24: Nashville, TN" & vbtab & vbtab & "25: Pittsburgh, PA" & vbtab & vbtab & "26: Portland, OR" & vbCrlf
        PromptString = PromptString & "27: San Antonio, TX" & vbtab & vbtab & "28: San Diego, CA" & vbtab & vbtab & "29: West Palm Beach, FL" & vbCrlf

        RetVal2 = Sc.InputBox(PromptString, "Select Locals Market")

        if len(RetVal2) <> 2 then
            GotInput = false
        else
          RetVal2 = UCase(RetVal2)

        Select Case left(RetVal2, 1)
           case "0", "1"
                Select Case Right(RetVal2, 1)
                  Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"
                    GotInput = true
                    getlocal = RetVal2
                  'Case Else
                  '  GotInput = false
                End Select
            Case "2"
                Select Case Right(RetVal2, 1)
                  Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
                    GotInput = true
                    getlocal = RetVal2
                  'Case Else
                  '  GotInput = false
                End Select
        End Select
        End If
    End If
    Loop until GotInput = True
End Function





Sub ApplyUpdates()
    Sc.Print(vbCrLf & "Applying update 26")
    Call WriteE3(7, "8F 80", "AF 34 12 1C EA B1 63")

    Sc.Print(vbCrLf & "Applying update 27")
    Call WriteE3(7, "8F 80", "AF 34 12 1C EA B1 63")

    Sc.Print(vbCrLf & "Applying update 28")
    Call WriteE3(2, "85 D3", "8F 80")

    Sc.Print(vbCrLf & "Applying update 29")
    Call WriteE3(2, "85 CA", "8F 80")

    Sc.Print(vbCrLf & "Applying update 30")
    Call WriteE3(1, "86 67", "80")

    Sc.Print(vbCrLf & "Applying update 31")
    Call WriteE3(1, "85 D1", "80")

    Sc.Print(vbCrLf & "Applying update 32")
    Call WriteE3(1, "86 5D", "86")

    Sc.Print(vbCrLf & "Applying update 33")
    Call WriteE3(12, "86 87", "EC 60 11 B4 12 00 50 0C F5 F0 E7 60")

    Sc.Print(vbCrLf & "Applying update 34")
    Call WriteE3(12, "87 02", "12 00 50 95 60 93 FF 74 FF D1 06 74")

    Sc.Print(vbCrLf & "Applying update 35")
    Call WriteE3(12, "86 93", "13 90 88 EE E0 47 60 03 02 82 84 74")

    Sc.Print(vbCrLf & "Applying update 36")
    Call WriteE3(12, "86 F6", "F5 F0 C0 04 D1 AF D0 E0 C3 35 F0 B4")

    Sc.Print(vbCrLf & "Applying update 37")
    Call WriteE3(12, "87 62", "7A D0 01 ED 54 C0 D6 23 42 D0 74 4D")

    Sc.Print(vbCrLf & "Applying update 38")
    Call WriteE3(12, "87 32", "53 D0 E7 78 10 E6 51 84 08 B8 20 00")

    Sc.Print(vbCrLf & "Applying update 39")
    Call WriteE3(12, "87 0E", "03 D1 06 79 80 E7 54 C0 4F FD 84 74")

    Sc.Print(vbCrLf & "Applying update 40")
    Call WriteE3(12, "86 9F", "00 D1 A7 02 87 25 D1 06 D5 F0 05 79")

    Sc.Print(vbCrLf & "Applying update 41")
    Call WriteE3(12, "86 B7", "C0 01 A1 F1 E9 D0 01 AF F0 02 88 7B")

    Sc.Print(vbCrLf & "Applying update 42")
    Call WriteE3(11, "86 CF", "04 F1 F3 D0 04 EC 75 F0 00 80 27")

    Sc.Print(vbCrLf & "Applying update 43")
    Call WriteE3(12, "88 67", "08 91 FF F5 4B 78 80 BF 00 01 22 12")

    Sc.Print(vbCrLf & "Applying update 44")
    Call WriteE3(12, "87 4A", "01 22 09 C0 E0 FF 78 80 12 88 7D 74")

    Sc.Print(vbCrLf & "Applying update 45")
    Call WriteE3(12, "88 5B", "12 82 84 12 1C EE B4 4F 00 40 03 02")

    Sc.Print(vbCrLf & "Applying update 46")
    Call WriteE3(12, "86 AB", "10 02 87 F3 AF F0 09 BF 11 00 50 E4")

    Sc.Print(vbCrLf & "Applying update 47")
    Call WriteE3(12, "87 1A", "80 25 F0 F9 02 87 41 06 DF FA 22 E4")

    Sc.Print(vbCrLf & "Applying update 48")
    Call WriteE3(6, "85 CF", "02 86 87 02 86 C3")

    Sc.Print(vbCrLf & "Applying update 49")
    Call WriteE3(12, "87 56", "22 F6 D0 07 0F 90 89 3C C0 01 12 05")

    Sc.Print(vbCrLf & "Applying update 50")
    Call WriteE3(12, "86 C3", "1C E7 20 E5 0C 54 1F 70 2A 79 10 C0")

    Sc.Print(vbCrLf & "Applying update 51")
    Call WriteE3(12, "87 3E", "40 F7 22 ED 54 1F 60 05 B4 12 00 40")

    Sc.Print(vbCrLf & "Applying update 52")
    Call WriteE3(2, "87 09", "80 06")

    Sc.Print(vbCrLf & "Applying update 53")
    Call WriteE3(12, "88 8B", "08 E8 54 0F 20 D5 02 54 07 45 F0 F8")

    Sc.Print(vbCrLf & "Applying update 54")
    Call WriteE3(12, "87 26", "90 88 EF C0 01 79 10 12 00 8D D0 01")

    Sc.Print(vbCrLf & "Applying update 55")
    Call WriteE3(3, "88 A3", "DF F9 22")

    Sc.Print(vbCrLf & "Applying update 56")
    Call WriteE3(12, "88 7F", "08 09 DF FA 22 7F 10 78 10 81 46 F6")

    Sc.Print(vbCrLf & "Applying update 57")
    Call WriteE3(12, "88 73", "1C EE F6 08 80 F5 7F 10 78 10 E7 F6")

    Sc.Print(vbCrLf & "Applying update 58")
    Call WriteE3(6, "8F 87", "B4 EF 20 02 88 5B")

    Sc.Print(vbCrLf & "Applying update 59")
    Call WriteE3(12, "88 97", "DF EF 22 7F 10 78 10 81 46 70 F7 08")

    Sc.Print(vbCrLf & "Applying update 60")
    Call WriteE3(12, "8B 70", "AF 4B BF 00 01 22 90 88 EE 02 05 7A")

    Sc.Print(vbCrLf & "Applying update 61")
    Call WriteE3(1, "8F 9F", "E7")

    Sc.Print(vbCrLf & "Applying update 62")
    Call WriteE3(3, "87 6E", "02 87 26")

    Sc.Print(vbCrLf & "Applying update 63")
    Call WriteE3(9 , "85 C3", "02 85 CF 02 86 C6 02 85 D2")

    Sc.Print(vbCrLf & "Setting USW to 63 (3Fh)")
    Call WriteE3(2, "84 06", "00 3F")

    Sc.Print(vbCrLf & "Applying updates 64-67...")
                Call WriteE3(1, "87 5D", "24")
                Call WriteE3(1, "87 6D", "35")
                Call WriteE3(1, "87 02", "16")
                Call WriteE3(1, "87 47", "16")
                Call WriteE3(1, "88 62", "37")
                Call WriteE3(8, "89 3C", "87 82 09 87 83 FE 81 6E")
                Call WriteE3(4, "89 44", "DF FB F7 22")

        Sc.Print(vbCrLf & "Setting USW to 67 (43h)....")
        Call WriteE3(2, "84 06", "00 43")

End Sub


Function GetUSW()
    Dim Oldstate

    Sc.Reset

    Oldstate = Sc.Verbose
    Sc.Verbose = False

    Sc.Write("48 2B 00 00 80")
    Sc.Read(131)

    GetUSW =(Sc.GetByte(29) * &H100) + Sc.GetByte(30)

    Sc.Verbose = Oldstate
End Function

Function IsValidHex(Char)
    Const ValidHex = "0123456789ABCDEF"

    If InStr(1, ValidHex, UCase(Char)) Then
        IsValidHex = True
    Else
        IsValidHex = False
    End If
End Function

Function HexString(ThisNumber, Length)
    Dim RetVal
    Dim CurLen
    RetVal = Hex(ThisNumber)
    CurLen = Len(RetVal)
    if CurLen < Length then
        RetVal = String(Length - CurLen, "0") & RetVal
    end if
    HexString = RetVal
End Function