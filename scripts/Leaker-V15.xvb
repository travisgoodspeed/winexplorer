' __       ____    ______  __  __   ____    ____
'/\ \     /\  _`\ /\  _  \/\ \/\ \ /\  _`\ /\  _`\
'\ \ \    \ \ \ \_\ \ \ \ \ \ \/'/'\ \ \ \_\ \ \ \ \
' \ \ \  __\ \  _\ \ \  __ \ \ , <  \ \  _\ \ \ ,  /
'  \ \ \ \ \\ \ \ \ \ \ \ \ \ \ \\`\ \ \ \ \ \ \ \\ \
'   \ \____/ \ \____/\ \_\ \_\ \_\ \_\\ \____/\ \_\ \_\
'    \/_T_/   \/_0_/  \/L/\/3/\/3/\/T/ \/_4_/  \/T/\/V/
'
' THIS SCRIP ISENT ENCRYPTED BECAUSE IT 100% FREEWARE
' JUST REMBER WERE THE CODE CAME FROM FIRST
' ALSO ENJOY YOUR WHORE WARE MR LEAKER THE REAL LEAKER
' WHORE WARE 4 LIFE


Option Explicit



Const DefaultFuse = "25DA"
Const DefaultSpendinglimit = "300.00"

Dim DefaultZip, DefaultTZ, DefaultMarket, DefaultGuide, DefaultExpire

if Fs.FileExists("Leaker.ini") = 1 then


   Const ForReading = 1, ForWriting = 2, ForAppending = 8
   Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0
   Dim fso, f, ts, TextStreamTest
   Set fso = CreateObject("Scripting.FileSystemObject")
   Set f = fso.GetFile("Leaker.ini")
   Set ts = f.OpenAsTextStream(ForReading, TristateFalse)
   TextStreamTest = ts.ReadLine
   DefaultTZ  = Mid(TextStreamTest,1,2)
   DefaultZip = Mid(TextStreamTest,4,5)
   DefaultMarket = Mid(TextStreamTest,10,2)
   DefaultGuide = Mid(TextStreamTest,13,2)
   DefaultExpire = Mid(TextStreamTest,16,4)
   ReDim ACTTiers(0)
   ts.Close
else
'if file does not exist then the script uses these defaults
    DefaultZip = "00000"
    DefaultTZ  = "A0"
    DefaultMarket = "00"
    DefaultGuide = "11"
    DefaultExpire = "FF00"
End if

'#### SCRIPT VERSION ####
    Const Software="Leaker V15 Whore Ware 3m"
    Const Softwarever="WhoreWare4Life"

'#### FILE HANDLING CONSTANTS ####
    Const dss_DefaultButton1 = 0
    Const dss_DefaultButton2 = 256
    Const dss_DefaultButton3 = 512
    Const fsoError = -1
    Const fsoOpenRead = 0
    Const fsoOpenWrite = 1
    Const fsoOpenReadWrite = 2
    Const fsoSEEK_SET = 0
    Const fsoSEEK_CUR = 1
    Const fsoSEEK_END = 2
    const fsoSEEK_TYP = 13
    Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"


' #### PROGRAM VARIABLES ####

Dim XORedByte(31)
Dim Key12byte(11)
Dim ThisByte
Dim Address
Dim RetValue
Dim OutFile
Dim InFile
Dim HUBinFile
Dim ErrorString
Dim Menu
Dim Choice
Dim PromptString
Dim RetVal
Dim GotInput
Dim ThisChar
Dim Version
Dim TimeZoneHex
Dim ZipCodeHex
Dim Local3ByteHex
Dim GlitchMenu
Dim FuseByte
Dim ATR
Dim Default
Dim SpendingLimit
Dim Guide
Dim HexZipCode1
Dim HexZipCode2
Dim ZipCode
Dim LocalByteHex
Dim USW
Dim Expire
Dim SFBbuf(4)
Dim AEEbuf(32)
Dim GlitchToUse

Setuploader()  'Set up winexplorer for unlooper settings

Sub Main()

Sc.Print "Leaker V15"& vbCr
Sc.Print "WHOREWARE4LIFE"& vbCr
Sc.Verbose = False
Dim DisplayMenu
Dim gotinputs
DisplayMenu = True
if checkversion() = 1 Then Exit Sub   'Check winexplorer Version
if checkloader() = 1 Then Exit Sub    'Check if Loader connected







Do
       Sc.Write("A0")
        Menu = ""
        Menu = Menu & "                                     " &Software & " " & Softwarever & vbCrLf

        Menu = Menu & vbcr & "Please choose one of these options." & vbcrlf
        Menu = Menu & vbcrlf & "                                 3M                   - Will apply 3m to Card "
        Menu = Menu & vbcr & "                                 Clean Card       -   Will clean data of card"
        Menu = Menu & vbcr & "                                 Card Maint...       -   Card options"
        Menu = Menu & vbcr & "                                 Check Card Info          -  Check card info"
           Menu = Menu & vbcr & "                                 Unloop Card    -   Unlooping Options"
        Choice = Sc.ButtonBox(Menu, 1, Software & " " & Softwarever, "3m Card", "Clean Card", "Card Utilities", "Check Card", "Exit")

     Select Case Choice
        Case "0"
            Sc.Print(vbCrLf & "Exiting!")
            Sc.Write("A30")
            Call Sc.MsgBox("Thank you for using " & software & " " & softwarever & "." ,vbInformation,software & " " & softwarever & " - Complete!")
            Exit Do

        Case "1"

    Menu = ""
    Menu = Menu & "These are the Default Settings, set in the script at the top." & vbCrLf
    Menu = Menu & "You can change them so that you can just click on 'Default Values'" & vbCrLf
    Menu = Menu & "and not go through the menus to select the settings each time." & vbCrLf & vbCrLf
    Menu = Menu & "If you have not set these values then click on 'Select Values'"& vbCrLf & vbCrLf
    Menu = Menu & "Default Fuse Byte = " & Defaultfuse  & vbCrLf
    Menu = Menu & "Default Time zone = " & DefaultTZ & vbCrLf
    Menu = Menu & "Default Zip code = " & DefaultZip & vbCrLf
    Menu = Menu & "Default Channel guide = " & DefaultGuide & vbCrLf
    Menu = Menu & "Default Local Channels = " & DefaultMarket & vbCrLf
    Menu = Menu & "Today is:  " & date & vbCrLf
    Menu = Menu & "Expire Date = Never - " & DefaultExpire & vbCrLf
    Menu = Menu & "Click on 'Default Values' if you want to use the above defaults," & vbCrLf
    Menu = Menu & "Click on 'Select Values'if you want use Select other values."
    RetVal = Sc.ButtonBox(Menu, vbQuestion + vbDefaultButton2, Software & " " & Softwarever & " Install", "Default Values", "Select Values", "Exit")
    If RetVal = 1 Then
    default = true
    End If
    If RetVal = 2 then
    default = false
    End If
    If RetVal = 3 then
    Exit Sub
    End IF


    If default = True then
Dim Fuse1
Dim Fuse2
        Fuse1 = mid(Defaultfuse,1,2)
        Fuse2 = mid(Defaultfuse,3,4)

    if Not HexString(Hex2Dec(Fuse1) Xor Hex2Dec(Fuse2),2) = "FF" Then
        MsgBox "Error In Fuse Byte!! This Fuse will loop your Card!"
        Sc.print vbcrlf & "Error, Aborting!"
            Exit Sub

        End if
        FuseByte = Defaultfuse
        SpendingLimit = hexstring((Defaultspendinglimit * 100 + 1),4)
        Guide = DefaultGuide
        TimeZoneHex = DefaultTZ
        ZipCode = DefaultZip
        LocalByteHex = DefaultMarket
        Expire = DefaultExpire

    HexZipCode1 = ""
    HexZipCode2 = ""

    For ThisChar = 1 To 2
    HexZipCode1 = "5" & HexZipCode1 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    For ThisChar = 3 To 5
    HexZipCode2 = HexZipCode2 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    ZipCodeHex = HexZipCode1 & HexZipCode2 & "2020"


Else
            if GetTimeZone() = 1 Then Exit Sub
            if GetZipCode() = 1 Then Exit Sub
            if GetFuse() = 1 Then Exit Sub
            if GetLocalByte() = 1 Then Exit Sub
            if GetGuideByte() = 1 Then Exit Sub
            if GetExpireDate() = 1 Then Exit Sub

End if
            Sc.Write("A2")

            GlitchMenu = "Choose which glitch you would like to use."
            GlitchToUse = Sc.ButtonBox(GlitchMenu, 1, Software & " " & Softwarever, "4C", "48", "2E")

            Call LoadBootStrapS2
            Call ExtractCardInfo
            Call FixAltEE
            Call CleanCard
            Call InstallUpdates()
            Call InstallAct
            Call WriteUserInfo
            Call Sc.ProgressBox ("", 0, 0, "")
            Call Sc.MsgBox("Installation Complete!",vbInformation,software & " " & softwarever & " - Complete!")
        Case "2"
            Sc.Write("A2")
            Call LoadBootStrapS
            Call ExtractCardInfo
            Call FixAltEE
            Call CleanCard
            Call installupdates
            Call Sc.ProgressBox ("", 0, 0, "")
            Call Sc.MsgBox("Removal Complete!",vbInformation,software & " " & softwarever & " - Complete!")

        Case "3"
            Call UTILMENU()
        Case "4"
            Sc.Write("A2")
            Call Readinfo
        Case "5"
            Sc.Print(vbCrLf & "Exiting!")
            Sc.Write("A30")
            Call Sc.MsgBox("Thank you for using " & software & " " & softwarever & "." ,vbInformation,software & " " & softwarever & " - Complete!")
            Exit Do

End Select
     Loop while displaymenu = True

End Sub

Function InstallAct()


'New alt code routines:

Dim LocalByteHex2
Dim Guide2

LocalByteHex2 = LocalByteHex
Guide2 = Guide

Call WriteViaLoader("2110","52729201C5AA2127AB0060C35D2006F5","D")
Call WriteViaLoader("2120","8E01402244E1F9","D")
Call WriteViaLoader("2127","00000000AA0000000000000000F300F3","D")
Call WriteViaLoader("2137","129AB9D09A129BB9139AD09BF70013FF","D")
Sc.Write("08 C2 40 21 10 0E 10 81 00")
Sc.Delay(80)
Sc.Read(&h02)
Sc.Delay(160)
RetValue = Sc.GetByte(&h01)
       Sc.Read (RetValue)                             'read the bytes

Sc.Delay(80)
Call Sc.ProgressBox ("Writing 3M.......", 1, 44)
Call WriteViaLoader("2014","25DA","D")
Call WriteViaLoader("2024","8C23887704CF068EC17175FB","D")
Call WriteViaLoader("2030","CF7601CF3B2D0106038CD8902D030213","D")
Call WriteViaLoader("2040","2D38062C8E25EF88200B2A224C8EE68E","D")
Call WriteViaLoader("2050","8E25DFD024D104888CD861729062C5AA","D")
Call WriteViaLoader("2060","0060AB0100C35D0406F5528012240006","D")
Call WriteViaLoader("2070","D024D10452048CC01D","D")
Call WriteViaLoader("20A0","25C958A0574500012C202A42440F0002","D")
Call WriteViaLoader("20B2","7BD20F205712AE","D")
Call WriteViaLoader("20C4","F4CA2A2020090AF4CA2A22F1","D")
Call WriteViaLoader("20D0","0E03B4B4F98C29C4","D")
Call WriteViaLoader("20DF","88","D")
Call WriteViaLoader("20E0","25902A8CCEBC","D")
Call WriteViaLoader("20EB","7D6E430604","D")
Call WriteViaLoader("20F0","8820F7438C3EEB7225D07640B5077213","D")
Call WriteViaLoader("2100","B6882000B57D30BE06062210E172C72A","D")
Call WriteViaLoader("2110","8E25BD8ECE6202038EC7187780282F22","D")
Call WriteViaLoader("2120","3F8D0107021522288D0107020E8A0105","D")
Call WriteViaLoader("2130","27100200068A01042710138E239E5203","D")
Call Sc.ProgressBox("Leaker Is God WhoreWare 4 Life", 2, 27, "Whore Ware 4 Life")
Call WriteViaLoader("2140","AA0105AB0088AA2150AB0105CAF28C34","D")
Call WriteViaLoader("2150","048C2154428966988B687D3E7702257D","D")
Call WriteViaLoader("2160","C47D02277DB47D02277DEB70020F7D18","D")
Call WriteViaLoader("2170","7402227DEB7102057DEB720618B4B422","D")
Call WriteViaLoader("2180","328C21FDB4B4221C8C21FDB4C48C21FD","D")
Call WriteViaLoader("2190","C4B48C21FDC54260067C0606AA0066D0","D")
Call WriteViaLoader("21A0","E0C3AA0066D0E1F4CAE1C0D60255F4CA","D")
Call WriteViaLoader("21B0","E11341024EF4CAE10040024DF4CAE13B","D")
Call WriteViaLoader("21C0","140240F4CAE10041023FF4CAE1144102","D")
Call WriteViaLoader("21D0","38F4CAE11B410231F4CAE1CA41022AF4","D")
Call WriteViaLoader("21E0","CAE1C1990223F4CAE11841021CF4CAE1","D")
Call WriteViaLoader("21F0","F10002153D0609A472E341002072E341","D")
Call WriteViaLoader("2200","8C013288238E43001422808B0118228C","D")
Call WriteViaLoader("2210","8B009922238B009A227D8B009B8C0066","D")
Call WriteViaLoader("237F","94","D")
Call WriteViaLoader("2380","22178B01188C01308E23948CC1998E23","D")
Call WriteViaLoader("2390","948C350A222072268E72208F0008223E","D")
Call WriteViaLoader("23A0","72C08E72298F8828932A8EE68E883F1E","D")
Call WriteViaLoader("23B0","2A128E8EE68E8828CC2A128F8EE68EF9","D")
Call WriteViaLoader("2590","09C000259500D0010025B90400CEEF00","D")
Call Sc.ProgressBox("Leaker Is God WhoreWare 4 Life", 3, 27, "Whore Ware 4 Life")
Call WriteViaLoader("25A0","0024A8040024E0010800000101251F01","D")
Call WriteViaLoader("25B0","0824580408245C040803969961F75712","D")
Call WriteViaLoader("25C0","2A0FE9515E2A575E5553DF77887DD977","D")
Call WriteViaLoader("25D0","F72A0DE951522577868285A05745F942","D")
Call WriteViaLoader("25E0","9A0C98920B98940198982A988636F972","D")
Call WriteViaLoader("25F0","25D0420C9A980B92980194982A989836","D")
Call WriteViaLoader("2600","85F9","D")
Call WriteViaLoader("260B","8C2027","D")
Call WriteViaLoader("2893","20","D")
Call WriteViaLoader("28CC","20","D")
Call WriteViaLoader("3F1E","26","D")
Call WriteViaLoader("2408","8814","E")
Call WriteViaLoader("2104",Guide2,"E")
Call WriteViaLoader("2105",LocalByteHex2,"E")
Call WriteViaLoader("2100", Expire ,"D")
Call Sc.ProgressBox ("Writing  3M.......", 44, 44)




Sc.Print "Loading DSW code"& vbCr
Call Sc.ProgressBox ("Patching DSW.....", 1, 44, Software)
Call WriteViaLoader("24E6","0006","E")
Call WriteViaLoader("2AD3","01","E")
Call WriteViaLoader("2AD4","67B0E3F472674726F97061E5","E")
Call WriteViaLoader("2AE0","BBC137A9","E")
Call WriteViaLoader("2DE0","A014EB90793ED0DDAF5F16258DB1F1D1","E")
Call WriteViaLoader("2DF0","86D257FB40D54C9CC085B574C7A221E9","E")
Call WriteViaLoader("2E00","3B6AA7A5A3E69FBA06663619D99A373B","E")
Call WriteViaLoader("2E10","25A0672E34D0D75098DDFAA08320059C","E")
Call Sc.ProgressBox ("Patching DSW.....", 10, 44, Software)
Call WriteViaLoader("2E20","135033A93A589A37997B42E1C9F3E39F","E")
Call WriteViaLoader("2E30","EA3DBF1928F7CEDC18181C85FCFB9FC0","E")
Call WriteViaLoader("2E40","618A30F70354CED3A32E4E156C63D8F9","E")
Call WriteViaLoader("2E50","AFB1108A151046F13A4089133B22D57F","E")
Call WriteViaLoader("2E60","938A30D3F506A994BD0FF5AB05DE0FE9","E")
Call WriteViaLoader("2E70","378C6DF0E35BE0A10E9678C2A161D000","E")
Call Sc.ProgressBox ("Patching DSW.....", 20, 44, Software)
Call WriteViaLoader("2E80","4314436DAE6C61EA588B35715B645AD5","E")
Call WriteViaLoader("2E90","B93B95CB48432B9FE839CD6F6F31193B","E")
Call WriteViaLoader("2EA0","56A8131E4D10225C796B1F1FE68448D0","E")
Call WriteViaLoader("2EB0","06B91F85B4A48ABCFE55F427C6DEDB8A","E")
Call Sc.ProgressBox ("Patching DSW.....", 30, 44, Software)
Call WriteViaLoader("2EC0","228C0E9BA3D1CAEA5B536D191A1FDE6D","E")
Call WriteViaLoader("2ED0","AA9FDCE3C7233C6607463628D69C2500","E")
Call WriteViaLoader("2EE0","3AC78A87EB6EA8420DC8F077","D")
Call WriteViaLoader("2EF8","3AC78A87EB6EA8420DC8F077","D")
Call Sc.ProgressBox ("Patching DSW.....", 44, 44, Software)


Sc.Delay(50)

Sc.Print "Make sure you reset the reciever before placing card in!!!!!!!!"& vbCr


End Function

Function WriteUserInfo()

            Call WriteViaLoader("2014",FuseByte,"D")
            Call WriteViaLoader("2410",ZipCodeHex,"E")
            Call WriteViaLoader("2460","00000000","E")
            Call WriteViaLoader("24A4","00000000","E")
            Call WriteViaLoader("24E0",TimeZoneHex,"E")
            Call WriteViaLoader("24F4",HexString(Key12Byte(0), 2) & HexString(Key12Byte(1), 2) & HexString(Key12Byte(2), 2) & HexString(Key12Byte(3), 2) & HexString(Key12Byte(4), 2) & HexString(Key12Byte(5), 2) & HexString(Key12Byte(6), 2) & HexString(Key12Byte(7), 2) & HexString(Key12Byte(8), 2) & HexString(Key12Byte(9), 2) & HexString(Key12Byte(10), 2) & HexString(Key12Byte(11), 2),"D")
            Call WriteViaLoader("2500","00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","E")
            Call WriteViaLoader("2510","A0" & LocalByteHex & "00000000000000000000000000" & Guide,"E")

Call Sc.ProgressBox ("User Data Written!", 1, 1, Software)
Sc.Delay(1000)

End Function

Sub LoadBootStrapS()

    Dim RetValue
    Dim GotInput
    Dim Read
    Dim HexCheck

   if ReceiveATR() = 0 Then
       Call Sc.Msgbox ("Error, Card has returned a partial ATR or NO Atr!")
       Exit Sub
   End if
        Sc.Write("0B1A0E10C4483000F1188100") ' Change to 0C from F8
        '                         ^^ <---------------Backdoor key from script
    Sc.Delay(80)
        Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)
    Sc.Write("1BD75243FD2284E1726C0772FF14C5E2AB0100C3DA07F88C01008000")
               '^^ change to bypass glitch block
    Sc.Delay(80)
        Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)
            HexCheck = HexString(GetByte(0), 2)
            If HexCheck = 84 Then
                GotInput = True
            Else
                GotInput = False
            End If
    If GotInput = False Then
        GlitchToUse = "2" ' new
        LoadBootStrapS2()
        Exit Sub
    End If
    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)
    Sc.Write("2EEBC5F71011F76013AA0060AB2000C35D2006F5F72011F721118EFB87F72211F723118EFB87F70013526A9201F900")
    Sc.Delay(80)
    Sc.Read(&h02)


    Call Sc.ProgressBox ("", 0, 0, "")
End Sub

Function ChallKeys

Dim ChallKey
    ChallKey = Sc.ChallengeKey



    SC.Delay(250)
    Call WriteViaLoader("22DD",ChallKey,"D")
    Call WriteViaLoader("22B0",ChallKey,"E")
   SC.Delay(250)

End Function



Sub LoadBootStrapS2()
Sc.Print "Loading Bootstrap"& vbCr
       Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter
    Dim Attempts

    Counter = 0
    Attempts = 1
    DAC4C = &h85

    Call IsCardPresent()

    Do
        Sc.Write("A1")
        GotInput = False

        If Counter = 12 Then
            Counter = 0
        End If

        If Counter = 1 Then
            DAC4C = &h85
        End If

        If Counter = 4 Then
            DAC4C = &h82
        End If

        If Counter = 8 Then
            DAC4C = &h80
        End If

        If Counter = 11 Then
            DAC4C = &h71
        End If

        Call Sc.ProgressBox ("Glitching...               Attempts:        " & Attempts & vbcr & "                                 DAC4C:        " & HexString(DAC4C,2), 1, 999, "UnLooper/Loader")

        Sc.Write("06100E10019300")
        Sc.Delay(80)
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))

        if GlitchToUse = "1" then
            'INS 4C
            Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
            'Sc.Write("0B 15 c4 48 48 FF 56 BF 70 C9 08 00")
        end if

        If GlitchToUse = "2" Then
            Sc.Write("0B 15 C4 48 4C FF 56 B9 70 C9 08 00")
           End If

        'INS 2E
        If GlitchToUse = "3" Then
            Sc.Write("0B 15 C4 48 2E FD 56 B9 70 CA 08 00")
        End If

        Sc.Delay(80)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
                RetValue = Sc.GetByte(&h01)
                Sc.Read (RetValue)
        End If

    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF5243FD2284E1726C0772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1

    Loop Until GotInput = True

    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)
    Sc.Write("2EEBC5F71011F76013AA0060AB2000C35D2006F5F72011F721118EFB87F72211F723118EFB87F70013526A9201F900")
    Sc.Read(&h02)

    Call Sc.ProgressBox ("", 0, 0, "")
End Sub

Sub FixAltEE()

Sc.Print "Fixing AltEE Area"& vbCr
'Fix Alt EE:

Call WriteViaLoader("2110","52729201C5AA2127AB0060C35D2006F5","D")
Call WriteViaLoader("2120","8E01402244E1F9","D")
Call WriteViaLoader("2127","00000000AA0000000000000000F300F3","D")
Call WriteViaLoader("2137","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","D")
Sc.Write("08C24021100E108100")
Sc.Delay(80)
Sc.Read(&h02)
Sc.Delay(160)
RetValue = Sc.GetByte(&h01)
       Sc.Read (RetValue)                             'read the bytes


End Sub


Sub LoadBootStrap()

Sc.Print "Loading BootStrap"& vbCr

    Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter
    Dim Attempts

    Counter = 0
    Attempts = 1
    DAC4C = &h85

    Call IsCardPresent()

    Do
        Sc.Write("A1")
        GotInput = False

        If Counter = 12 Then
            Counter = 0
        End If

        If Counter = 1 Then
            DAC4C = &h85
        End If

        If Counter = 4 Then
            DAC4C = &h82
        End If

        If Counter = 8 Then
            DAC4C = &h80
        End If

        If Counter = 11 Then
            DAC4C = &h71
        End If

        Call Sc.ProgressBox ("Glitching...               Attempts:        " & Attempts & vbcr & "                                 DAC4C:        " & HexString(DAC4C,2), 1, 999, "UnLooper/Loader")

        Sc.Write("06100E10019300")
        Sc.Delay(80)
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))
        'INS 4C
        if GlitchToUse = "1" then
            'INS 4C
            Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
            'Sc.Write("0B 15 c4 48 48 FF 56 BF 70 C9 08 00")
        end if

        If GlitchToUse = "2" Then
            Sc.Write("0B 15 C4 48 4C FF 56 B9 70 C9 08 00")
           End If

        'INS 2E
        If GlitchToUse = "3" Then
            Sc.Write("0B 15 C4 48 2E FD 56 B9 70 CA 08 00")
        End If

        'Sc.Write("0B 15 c4 48 48 FF 56 BF 70 C9 08 00")
        Sc.Delay(80)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
                RetValue = Sc.GetByte(&h01)
                Sc.Read (RetValue)
        End If

    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF523FFD2284E1726C0772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1

    Loop Until GotInput = True

    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)
    Sc.Write("2EEBC5F71011F76013AA0060AB2000C35D2006F5F72011F721118EFB87F72211F723118EFB87F70013526A9201F900")
    Sc.Read(&h02)

    Call Sc.ProgressBox ("", 0, 0, "")


End Sub

Sub LoadBootStrapC()

    Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter
    Dim Attempts

    Counter = 0
    Attempts = 1
    DAC4C = &h85

    Call IsCardPresent()

    Do
        Sc.Write("A1")
        GotInput = False

        If Counter = 12 Then
            Counter = 0
        End If

        If Counter = 1 Then
            DAC4C = &h85
        End If

        If Counter = 4 Then
            DAC4C = &h82
        End If

        If Counter = 8 Then
            DAC4C = &h80
        End If

        If Counter = 11 Then
            DAC4C = &h71

        End If

        Call Sc.ProgressBox ("Glitching...               Attempts:        " & Attempts & vbcr & "                                 DAC4C:        " & HexString(DAC4C,2), 1, 999, "")

        Sc.Write("06100E10019300")
        Sc.Delay(80)
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))
        'INS 4C
        Sc.Write("0B 15 C4 48 48 FD 56 B9 70 C9 08 00")
'Sc.Write("0B 15 C4 48 4C FF 56 FF 70 C9 08 00")

        Sc.Delay(80)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
                RetValue = Sc.GetByte(&h01)
                Sc.Read (RetValue)
        End If

    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF523FFD2284E172400772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1

    Loop Until GotInput = True

    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub
Sub GetFileName()

    Dim FileName

    FileName = Fs.FileSaveDialog(FileFilter, "Please select a name for the new bin file", "Default.bin")
    If FileName <> "" Then
        OutFile = Fs.FileCreate(FileName)
    End If

End Sub

Sub ReadCard()
Sc.Print "Reading Card"& vbCr
    Dim EEPROM
    Dim TByte
    Dim Address

    EEPROM = 0
    Address = 8192 ' For EEPROM Read
    'Address = 49152 ' For ROM Read

    Sc.Write("A2")

    Call ExtractCardInfo()

    For EEPROM = 1 to 128    ' 128 for EEPROM, 256 for ROM
        Sc.Write("06C23F" & HexString(Address,4) & "BF00")
        Sc.Delay(50)
        Sc.Read(&h02)
        Sc.Read (&h40)

        Call Sc.ProgressBox ("Reading EEPROM Memory...", EEPROM, 128, Software) ' For EEPROM Read
        'Call Sc.ProgressBox ("Reading ROM Memory...", EEPROM, 256, Software) ' For ROM Read

        For TByte = 0 to 63
            Call Fs.FilePutc(OutFile, Sc.GetByte(TByte))
        Next

        Address = Address + 64

        Call WDTMR()
    Next

    Fs.FileClose(OutFile)

    Call ShutdownCard()

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub

Sub CleanCard()
Sc.Print "Cleaning Card"& vbCr
    Call Sc.ProgressBox ("Cleaning Main Code...", 1, 44,Software)
    Call WriteViaLoader("2012","04","D")
    Call WriteViaLoader("3F1E","C00B","D")
    Call WriteViaLoader("200C","52","D")
    Call WriteViaLoader("2014","20DF","D")                                ' Fuse
    Call WriteViaLoader("2406","03E80000000000000000","E")                ' Limit, Act Date, Password
    Call WriteViaLoader("2410","00000000000000000000000000010000","E")    ' Zip, PPV Act
    Call WriteViaLoader("2420","00000000000000000000000100000000","E")    ' PPV Act
    Call WriteViaLoader("2430","00000000000000000001000000000000","E")    ' Sub
    Call WriteViaLoader("2440","00000000000000010000000000000000","E")    ' Sub
    Call WriteViaLoader("2450","00000000000000000000000000000000","E")    ' Sub
    Call Sc.ProgressBox ("Cleaning Main Code...", 2, 44,Software)
    Call WriteViaLoader("2460","00000000","E")                            ' Ird Slot 1
    Call WriteViaLoader("2464","090000","E")                              ' Rating
    Call WriteViaLoader("24A4","00000001","E")                            ' Ird Slot 2
    Call WriteViaLoader("24E0","A601","E")                                ' Time Zone
    Call WriteViaLoader("24E6","0000","E")                                ' DSW Counter
    Call WriteViaLoader("2500","00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","E")    ' Guide
    Call WriteViaLoader("2510","FFFF0000000000000000000000000000","E")    ' Guide
    Call WriteViaLoader("2520","00000000000000000000000000000000","E")
    Call WriteViaLoader("2530","00000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Main Code...", 3, 44,Software)
    Call WriteViaLoader("22F2","2210E37702270C8EE2B67610280575FC67D56A8CDCE712608EDB7E7D0029020B","D")
    Call WriteViaLoader("2312","982A30EF1D6102038CD4B5F97D40BE060375FED28CD15C40010017C5AA0060AB","D")
    Call WriteViaLoader("2332","0101C33D170FF5748028F98800603088003B327202068EE5ADF9726015882ACE","D")
    Call WriteViaLoader("2352","2A720204E700098A2ACFB34D006102EAF912088E3C96F9C5AA2AF8D024AA3F50","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 4, 44,Software)
    Call WriteViaLoader("2372","13248E3C96C35D080FEEF98E","D")
    Call WriteViaLoader("23B3","982A30EF70012A8E3C96C704EDD70904E0D5088827052A8ED1B0F98ED21D8E","D")
    Call WriteViaLoader("23D2","3C96F9C58E23F5F4CC2E2A0F0C8E23F5F4CC2A2E0F07223FE6D32CD32CC35D0C","D")
    Call WriteViaLoader("23F2","0FE2F99A2CD02DD32C9A2CD02ED32CF9FFFFFFFF","D")
    Call WriteViaLoader("2690","0000000000000000B3B8BDC2C7C7C7C7C7C7C7C7C7B3B3B3B3B3CCD1D1D1D1D1","D")
    Call WriteViaLoader("26B0","D1D6DB06C9DC3E1306C9DC3E2B08C9DC3E4306C9DC3E6301C9DC3E7B04C9DC3E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 5, 44,Software)
    Call WriteViaLoader("26D0","7F01C9DC3E8F01C9DC3E9303C9DC3E97FFC8A0CE0D16F082AC8602C081580703","D")
    Call WriteViaLoader("26F0","0000FF40000000000000000000000000DFE1F01A00DFE1003800DF83043800D5","D")
    Call WriteViaLoader("2710","13011800D912031800D597001820D59B001820DAE50B1800D8B1812820D7AF82","D")
    Call WriteViaLoader("2730","3800385003D000289E051C00DFE1023800DABE122860D7B30328E0D6A1012860","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 6, 44,Software)
    Call WriteViaLoader("2750","DFE2002860D7F3822860D4110828E0D883003800DF7F00380028C50D28E0DEBA","D")
    Call WriteViaLoader("2770","0228E0D834042860D8B8082860D8DE003800D8D7043800D90B033800D93B2338","D")
    Call WriteViaLoader("2790","00D9CEF03800DAB7003860DAD0003820DAD4023860DB16043800D42A052860DB","D")
    Call WriteViaLoader("27B0","2800181022F2F01800DFF0042860DD808D28E0D9CEF03800DB4C853860DFE101","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 7, 44,Software)
    Call WriteViaLoader("27D0","180028A1883C002308E12860D5E7821800D667842860DB9FD52860E002822860","D")
    Call WriteViaLoader("27F0","DBD0813800D809D29000DFE1F09000383003F000D9608628E02FC79028A02F10","D")
    Call WriteViaLoader("2810","8028A02ABF89D000DB4C8528E02F088428E0DE458C28E0DE548628E05507AA24","D")
    Call WriteViaLoader("2830","B843000EAA2650130EF9D1FEFEAAFFFD8E3F3D2DF78C2F5C8E3F5812399B3012","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 8, 44,Software)
    Call WriteViaLoader("2850","3AF4EB0130F9B8C8D829D82AC5AA2AF0D007AA3F481307AB00DDC35D080FEE22","D")
    Call WriteViaLoader("2870","A064AB00DDC35D100FF5C59A30AB00ED700130C33D060FF38C3039008CC2988C","D")
    Call WriteViaLoader("2890","C0EC8C3EEB8C3B068C3B348C38198C39788CC27A8C3C968C393A8CE0748C2F43","D")
    Call WriteViaLoader("28B0","8C37008CE30E8C3D128C37808C37708CE0438C3C968C3D568CD6B28C29C48C2F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 9, 44,Software)
    Call WriteViaLoader("28D0","568C31818C3F378C2AC58C3B558C3B798C36EA8CC4308C33B78C2F9D8CD6F68C","D")
    Call WriteViaLoader("28F0","31038CD3438C36F58C231E8C37738C3ED08C305C8CEC9C8C37728C377220203F","D")
    Call WriteViaLoader("2910","EF00000000000000000000000000000000000000000000000000000000000000","D")
    Call WriteViaLoader("2930","000000000000000000000000005CDA5EFA8F6152EA1CFED0C6043DA97745BB98","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 10, 44,Software)
    Call WriteViaLoader("2950","231803ECF766BD3570C1DF224A8EA4599B94A5B8FF490C27663B80DE52CD7AE1","D")
    Call WriteViaLoader("2970","134DAAF79438C92552BC617F8016EE03DB01298401005C0A3C7D919AC5AA24B8","D")
    Call WriteViaLoader("2990","AB00EDAA2650AB00F5C35D080FEFC522A064AB00DDC35D100FF58800ED2A8800","D")
    Call WriteViaLoader("29B0","DD2C7210FD8E3EB272DD158824B02A721004E7F9C877202703757F2775EF2742","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 11, 44,Software)
    Call WriteViaLoader("29D0","2A0275F727751F02731F02D3024D04020F034204024C0204F750113215D80298","D")
    Call WriteViaLoader("29F0","2A347780270DD105D50E322A8E283A3205000A77202703B50003AA0000764027","D")
    Call WriteViaLoader("2A10","0ED0039A2AB81303D40315030206B99B2A740827C370012ADA02C7D402770827","D")
    Call WriteViaLoader("2A30","07882AA72A8E2A9575F7273215F75011762027277780270DD105D50E32348E28","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 12, 44,Software)
    Call WriteViaLoader("2A50","3A32050003AA00007640270AD0039A341303150302059B34740827C3700134DA","D")
    Call WriteViaLoader("2A70","02CED11577082707882AB32A8E2A9598342A7D0004020389FF45757F2775DF27","D")
    Call WriteViaLoader("2A90","75BF27C4F9C59A2AAB00ED70012AC35D0C0FF38E00EDF9F76011F761118EE7AE","D")
    Call WriteViaLoader("2AB0","8CE799F76211F763118EE7AE8CE7998EDCBB8CD5537702120225FE8CC89E0000","D")
        Call WriteViaLoader("2B00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2DA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EF8","A5A5A5A5A5A5A5A5A5A5A5A500FFFFFF7601D001F98CDE3A720504882ACE2A8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 13, 44,Software)
    Call WriteViaLoader("2F18","E6A0720C048824F42A8EE6A02202E377022701F9D5D08EE02F8824662E882406","D")
    Call WriteViaLoader("2F38","2C8EC5078822F22E8CD8992D00F406E0938EE0F3771026034224938CE0D47223","D")
    Call WriteViaLoader("2F58","038CC0C1062FAAFFFC2DD80628B4B4C4D50BF4D9002A0EC8322A8E2F8FC4D00E","D")
    Call WriteViaLoader("2F78","AA006043000E440E0BC3D32A3D070FE2B4B4120BF932FE5507AA24C043000EAA","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 14, 44, Software)
    Call WriteViaLoader("2F98","2658130EF97DFF6002038CD9E51217021D7202078EDA993260CD5D030B10AA2A","D")
    Call WriteViaLoader("2FB8","D01D6102060FE6770160E27480D3F98EDC9977022745C5AA0064AB00EDC35D0C","D")
    Call WriteViaLoader("2FD8","0FF5AA297CAB00EDC35D100FF58829412A8800ED2C7210FD8E3EB2C5AA00EDD0","D")
    Call WriteViaLoader("2FF8","0BAA0064130BAB0064C35D0C0FEE8824F42A720C047264158CDC54F9E2880100","D")
    Call WriteViaLoader("3018","30E9D50BC5AA24F4D009AA2AE4130944000BC35D0C0FEE120B02032205E68CD0","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 15, 44, Software)
    Call WriteViaLoader("3038","0D225064AB00EDC35D100FF58800DD2A8800ED2C7206FD8E3EB298EE3AD42AD4","D")
    Call WriteViaLoader("3058","29C4B4F975BFCF32BEAA3073D029AA3074D02A8EC37A9E2A8C3404C358CE77C7","D")
    Call WriteViaLoader("3078","ECCFF8C358C358C358C358C358C7FBC358C358C358C358C358C358C358C358C3","D")
    Call WriteViaLoader("3098","58C358C7F5CF56C806C6A4CCC43EDCC358CF08C983C358C358C358D0EED0EE30","D")
    Call WriteViaLoader("30B8","143F20CE3F3710C6E4C358C358CEAD3BA1C9A0CEB83722C8A0C5498E311C9A2A","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 16, 44, Software)
    Call WriteViaLoader("30D8","D02B70012A9A2AD02C9E2C8ED27812088ED310D517120802088E23CED0178ED3","D")
    Call WriteViaLoader("30F8","108CD25A7D87080FD200057D80080BF48A2ACE2D02020AF4CA2A270506032240","D")
    Call WriteViaLoader("3118","E68CD242320855075A0788312F2A4B012A4900298CD1B03190F0382023693280","D")
    Call WriteViaLoader("3138","CF382023632329D23810237C233D823800237CDFE1F038202369DFE1823800","D")
    Call WriteViaLoader("3159","235982386023698E311C7D82080B258ED3AE770227058ED4079E194B17388C","D")
    Call WriteViaLoader("3178","D3807D87080FE1000C7610B6032241E67D80080BED8CD36C220F8E32718824C8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 17, 44, Software)
    Call WriteViaLoader("3198","3088009E32720206EB4D609E060A4261244C9F2402020314D39E4D609E060C4D","D")
    Call WriteViaLoader("31B8","629F0607426124D3240001F9C5AA0063AB0090C35D0C0FF5C5AA0090AB0070C3","D")
    Call WriteViaLoader("31D8","5D0C0FF5AA2931AB0090C35D100FF58829712A8800902C7210FD8E3EB2C5AA00","D")
    Call WriteViaLoader("31F8","70D00EAA0090130EAB0090C35D100FEED72404C4D50BC5AA2EECD00EAA009043","D")
    Call WriteViaLoader("3218","000E440E0BC35D0C0FED120B0202009B726315882EEC2A720C04E78800603088","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 18, 44, Software)
    Call WriteViaLoader("3238","24C832720206ED1217028022038E32714261FD98622A753F291260B7B7D0048E","D")
    Call WriteViaLoader("3258","32717780FD0D88006030982A32420406ED00D4726015E700CE42170BD0178ED3","D")
    Call WriteViaLoader("3278","D54C170B420B17F97440CF22038E3271126202042D040F01F98824E63088009E","D")
    Call WriteViaLoader("3298","32720206EBF4CC9F610A057D0162021206E68824CA30EFB002DE2507B34D0062","D")
    Call WriteViaLoader("32B8","06D698619F3262224CC702072231C7020222401D1706C1720C04882EF82A8EE6","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 19, 44, Software)
    Call WriteViaLoader("32D8","A03262D1FFC70658220C8E3271C5AA0060AB00DDC35D0C0FF5AA297CAB00DDC3","D")
    Call WriteViaLoader("32F8","5D100FF58829412A8800DD2C7208FD8E3EB2C5AA0060D00EAA00DD130EAB00DD","D")
    Call WriteViaLoader("3318","C35D0C0FEE72DD15882EE02A720C04E7882DE02A8E337C882E002A8E337C002B","D")
    Call WriteViaLoader("3338","C7061A22118E327188006030882AD332721106ED882E202A8E337C000E882E40","D")
    Call WriteViaLoader("3358","2A8E337C882E602A8E337C88009E308824E632720206ED12FF8824CA30EA75BF","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 20, 44, Software)
    Call WriteViaLoader("3378","CF89FF1422208E327188006030982A32722006EDF98824CA30EF2507F9B87260","D")
    Call WriteViaLoader("3398","BE8E3537D4BE002512BE2D5C0BEF7640CFEB0019D7D78E338D2D030BEB000EC5","D")
    Call WriteViaLoader("33B8","B5AB00DAC35D260FF812D706E722908CC38F52FF8E351F120B0239002C300100","D")
    Call WriteViaLoader("33D8","60C5AA0101AB0061C33D600FF58824E63088009E32720206EBF4CC9F6202D300","D")
    Call WriteViaLoader("33F8","088824CA30EFB002D48900AE768028F1F98CC27A5D0C06F9C5AA2951AB0100C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 21, 44, Software)
    Call WriteViaLoader("3418","5D100FF5882AD330EFD00BC5AA0063AB0100C33D0B0FF5C5AA0100AB0140C35D","D")
    Call WriteViaLoader("3438","100FF58829612A8801002C7204FD8E3EB2223C8E3ECBD5DB32DBC2A801002C8E","D")
    Call WriteViaLoader("3458","ECA58EECA5C59A2CD009AA014013099B2CF4EB102CAB0140D32CC35D100FE7D3","D")
    Call WriteViaLoader("3478","DB7D04DB0FD28801402C8EECA58EECA5226A8E3ECBD509C5AA0140D00BAA0148","D")
    Call WriteViaLoader("3498","130BAB0140D00BA82ADC30EF130B440009C35D080FE21209020D8EDED97701B8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 22, 44, Software)
    Call WriteViaLoader("34B8","037217C689FF49C5AA0100D00BA82DE030EF130BAB0100C35D400FECC5A82AD4","D")
    Call WriteViaLoader("34D8","30EFAB00DDC35D080FF3882AD330EFC01260B7B76CD0248800632A4B012AC53D","D")
    Call WriteViaLoader("34F8","240B059A2AAB00DDD32AC35D080FF08E0100C5AA00DDD00BAA00A0130BAB00A0","D")
    Call WriteViaLoader("3518","C35D080FEE009DD50BC5AA2EE0D00EAA2EF8130E44000BC35D0C0FEE120BF98E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 23, 44, Software)
    Call WriteViaLoader("3538","3ED68A288B0207882F042A8EE68E8824CA30EFD01625072D03061C8E36A17260","D")
    Call WriteViaLoader("3558","0C7202128EE4098EE41A882E802A8E36C18E36A18901212D04061E8E36A1882E","D")
    Call WriteViaLoader("3578","803088010032726006EB72600C7202128EE41A8E36BD8900FF2D070259D5E926","D")
    Call WriteViaLoader("3598","0102D9E98E36A18829812A8EC4AEC542E9EA5D060B02D9EAAA2EE015EAAB00DD","D")
    Call WriteViaLoader("35B8","C35D0C0FEA222D8E3ECB8800DD2A22608EEBEF226A8E3ECBC5AA0100AB0060C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 24, 44, Software)
    Call WriteViaLoader("35D8","5D200FF572600C7202128EE4098EE41A8E36BD8C36907248948EED82D5DB32DB","D")
    Call WriteViaLoader("35F8","5D400B06A82DE02A00225D480B06A82A942A00185D500B06A82A942A000E5D51","D")
    Call WriteViaLoader("3618","0B06A82A832A0004A82DCF2A982A30EF8EEDA4C3129502095DB10FC4C88EEE89","D")
    Call WriteViaLoader("3638","C4129606B9D1DB5DB10FB3C5AA0088AB00DDC35D0C0FF5AA297CAB00DDC35D10","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 25, 44, Software)
    Call WriteViaLoader("3658","0FF58829412A8800DD2C7208FD8E3EB2C5AA0088D00EAA00DD130EAB00DDC35D","D")
    Call WriteViaLoader("3678","0C0FEE72DD15882EF82A720C04E78E351F020852028E3EA31216B38824CA30EA","D")
    Call WriteViaLoader("3698","B5882F042A8EE68EF9882E202A726004C5982A349A34AB0100700134C33D040F","D")
    Call WriteViaLoader("36B8","F38E36C4F9882E202A7260048801002C420422C59A2CAB006070012CC35D200F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 26, 44, Software)
    Call WriteViaLoader("36D8","F388006030982A32722006ED7C202204E2F92D080604C58E3EA38CC3A3D002A6","D")
    Call WriteViaLoader("36F8","013DFC80351302F97D54BE06087D400902032200E68CC1C9E2D0C18ED06A7260","D")
    Call WriteViaLoader("3718","157240048826102AE7F9760112178ED06A770125058ECEFF00288ED04D882610","D")
    Call WriteViaLoader("3738","2A7701101172400C8EE4098EE41A8801002A7601120DC59A2AE170012AC35D40","D")
    Call WriteViaLoader("3758","0FF5F998C3AB8837D22A8E379BC5AA0088E1C35D080FF7F9D50BF93203AB0164","D")
    Call WriteViaLoader("3778","B81202AB016CB4F92240522DAB0100C35D3F0FF81210AB01008826902A8E379F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 27, 44, Software)
    Call WriteViaLoader("3798","8C376576011014C59A2A7D5ABE0601B2AB00A4C370012A5D080FED7248948EED","D")
    Call WriteViaLoader("37B8","827D44BE020D7D56BE02088E37DA8E37DA00068E37F38E37F3F9E44425024554","D")
    Call WriteViaLoader("37D8","14D4C5AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5F9C5A8010030","D")
    Call WriteViaLoader("37F8","EE8EEDA4C35D2D0FF3AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5","D")
    Call WriteViaLoader("3818","F9D513D50B7D36BE0201F972041E8E386622368E3CA000F28EDC0A88006230EE","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 28, 44, Software)
    Call WriteViaLoader("3838","272004302987D78A2ACE27010776401E03223EE68E3866F9302987D78A2ACE27","D")
    Call WriteViaLoader("3858","0203223DE6D51E74801E8E3866F97201D977801E037200D98E39168E38B18838","D")
    Call WriteViaLoader("3878","912A77801E048838A12AC59A2AAB00A0C370012A5D100FF3F950E75FA407240E","D")
    Call WriteViaLoader("3898","C5A87738C1CBE7B663B3029E192FC4CF365AB16C722D1DB1BEF70038F7003AF7","D")
    Call WriteViaLoader("38B8","803DFF5207F7083D8E38D9C704FA8839012C77801E0488390A2C8E38EE8E38D9","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 29, 44, Software)
    Call WriteViaLoader("38D8","F99A2AD0059A2E1305A6013DFC213070012A70012EF99A2C213270012C9A2C21","D")
    Call WriteViaLoader("38F8","3470012C9A2C213DF902622C02403402442601642D01603401422F03403C121E","D")
    Call WriteViaLoader("3918","25072704022504B2BC8826602A4B002A790029883F582E4B002E79002DF97410","D")
    Call WriteViaLoader("3938","B6F9","D")
    Call WriteViaLoader("393D","2240AB0100C35D400FF88E3ED6C5AA2688D024AA3F801324AB00A4","D")
    Call WriteViaLoader("3958","C35D080FEE8E37B3C5D509E2D002AA00881302440009C35D080FF0120902BFF9","D")
    Call WriteViaLoader("3978","8E3ED67D40BE061A8824503088009032720406EB129014910208720206880090","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 30, 44, Software)
    Call WriteViaLoader("3998","30E58E3A8375EFB68E3AE48E3F8872970A920A8EE7D1726A0A920A520C8E3AFC","D")
    Call WriteViaLoader("39B8","7D67080601E25208A6013DFC80358E3CA0C704F4C5AA00A02DFB0F022CFBAB00","D")
    Call WriteViaLoader("39D8","7CC35D080FEF12D988E91F30B0020488EA3F3098302A72A30A920A12D98EE89F","D")
    Call WriteViaLoader("39F8","726A0A920AC5E2D007A8015C30EE1307AB0060C35D08020D7D670802E95D050F","D")
    Call WriteViaLoader("3A18","E5D50700E4F7803DFFC5F7083DAA0060A6013DFC2130C35D070FF28839072C77","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 31, 44, Software)
    Call WriteViaLoader("3A38","801E048839102C8E38EE1267A6013DFC2130C5A6013DFC8035AB007CC35D080F","D")
    Call WriteViaLoader("3A58","F2982A3072A30A920A12D9D5038EE8D5726A0A920A7D0803F406C27AB0021B77","D")
    Call WriteViaLoader("3A78","021E0552018E3EA38CDCDF5208A6013DFC80358E3C96C704F4F97410B68800B0","D")
    Call WriteViaLoader("3A98","2A88003B2E7202078EDBD87D40BE06D8F7803D88390A2CF7083D8E38EEF7283D","D")
    Call WriteViaLoader("3AB8","C5AA00A0A6013DFC2130C35D070605F7243D00EDF7283D5D0F0FE68839132C8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 32, 44, Software)
    Call WriteViaLoader("3AD8","38EE12AFA6013DFC2130009C8839042C77801E0488390D2C8E38EE12D8A6013D","D")
    Call WriteViaLoader("3AF8","FC2130F9B58E3CA012D8C704F8F932117D60BE06068EFFBC2317F912BE250F2D","D")
    Call WriteViaLoader("3B18","0A061112D402038CFFB67620C1038CFF9E8CFFAE7D56BE02F58CFFA67D60BE06","D")
    Call WriteViaLoader("3B38","05882E202AF912D402058825D02AF97620C1058825502AF98825902AF97D60BE","D")
    Call WriteViaLoader("3B58","061A8E338D2D030605882E7F2CF92D040605882E4F2CF988007F2CF988264F2C","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 33, 44, Software)
    Call WriteViaLoader("3B78","F97D60BE061D8E338D2D030606F4CA2C2E4FF92D040606F4CA2C2E1FF9F4CA2C","D")
    Call WriteViaLoader("3B98","005FF9F4CA2C260FF98E3ED67710B82FD508D5B87708D0087216087404B80051","D")
    Call WriteViaLoader("3BB8","7640B54D880176308800A0327208068EE5B7D5A8D5A97401B88E3C74890096C5","D")
    Call WriteViaLoader("3BD8","AA24F4D00BAA00A043000BAA2AE4130BAB00A0C35D0C0FE88EDED98EDF617D17","D")
    Call WriteViaLoader("3BF8","C606037204B87708B8037402D17601B80FC5B5AB00A0AB0088C35D0A0FF50037","D")
    Call WriteViaLoader("3C18","C58801762CA6013DFC80358E3CA0A8017630EE13D89B2C70012CC35D0A0FE688","D")
    Call WriteViaLoader("3C38","01762CC59A2CAB00A0AB0088B59B2CC370012C5D0A0FED7740B7038E3D907601","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 34, 44, Software)
    Call WriteViaLoader("3C58","B604D5A8D5A98E3C74C5AA0088AB00A0C35D080FF598D6C398A7D6F942B5AA12","D")
    Call WriteViaLoader("3C78","B82507D0AB32C734C802057401D2D5084208ACC5AA00A0E1C35D0D0FF7F9A601","D")
    Call WriteViaLoader("3C98","3DFC21308E3CA0F9B8C8D5DBD5DCD0D87B05DC32DBAA00A81BD8AB00A8D0DAAA","D")
    Call WriteViaLoader("3CB8","00A013DAAB00A013DC251FC0AA3CF2D0DA32DB5306AA00A813DAAB00A8B0BDD0","D")
    Call WriteViaLoader("3CD8","DA32DB5305AA00A01CDAAB00A04300D8D3DB7D08DB0FB9C4B4F9BF12939242AF","D")
    Call WriteViaLoader("3CF8","E7E3B2C6B89180B4E8739EF75DFDA082F96F25177D0B55970C8022678EE06F74","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 35, 44, Software)
    Call WriteViaLoader("3D18","042522088EE06F8E3A838E3AE48E3F8872970A920A8EE7D1726A0A920A520A8E","D")
    Call WriteViaLoader("3D38","3AFC8839012C8E38EEC5A6013DFC80358E3C9612D88EE06FC35D080FEDF98EFA","D")
    Call WriteViaLoader("3D58","27B006F98800683088245832720406EDC5AA2688D007AA3F80430007AA006013","D")
    Call WriteViaLoader("3D78","07AB0060C35D080FE87260158826902A720804E77420D1F9882460308800ED32","D")
    Call WriteViaLoader("3D98","720406EB720407D5063206AA00A0D0045503AA00EDD0053206C35507AA00A04B","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 36, 44, Software)
    Call WriteViaLoader("3DB8","0005C85503AA00EDD00932043C00553F8E3E0843000512041309BDB0BDC08E3E","D")
    Call WriteViaLoader("3DD8","08BE1B05C4AB00A0C5D8F0AA00EDD002B0BFD003B4D8022580BE1403AB00EDC3","D")
    Call WriteViaLoader("3DF8","770401E7B4D3067708069ED7070498F98EFFB67D00D406F78CFF9E0012010125","D")
    Call WriteViaLoader("3E18","002008001E010124100808001A0101240602080013010125202008002D010124","D")
    Call WriteViaLoader("3E38","08040800D0010124650108002E010124682008004E0101245C04080058010124","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 37, 44, Software)
    Call WriteViaLoader("3E58","E0010800F3010124A40408001901012464010800FE0101240C04080041010121","D")
    Call WriteViaLoader("3E78","060408C9F400000045010124881C0800F8010120240908CA360000CA750000CA","D")
    Call WriteViaLoader("3E98","B100000044010124E80C08B8A82AD02A9A2AB302038EE68EB4F9223C8E3ECB42","D")
    Call WriteViaLoader("3EB8","04FED50E8EECA5D30E4DFD0E0FF642FE04226AD00A920AF98E3ED68CC1A47202","D")
    Call WriteViaLoader("3ED8","058CC204E2C07604D10375BFD375F7CF8CC9597601CF1B2D7F06178E298C8EC2","D")
    Call WriteViaLoader("3EF8","4C8A2F04020A882E202A72C0048EE6A0227F7D5EBE060E7D01120609D31D7D08","D")
    Call WriteViaLoader("3F18","1D060222018CC00B770212108ED0EE8EDED97608B80375BFB48CCC4E8CCC3675","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 38, 44, Software)
    Call WriteViaLoader("3F38","FBB48CD59FF4CA2CCBB90603728646F9","D")
    Call WriteViaLoader("3F58","12937D04060603751F938E2856D093F9","D")
    Call WriteViaLoader("3F88","727B0252058E3FB8722902000A520FAA00A0BCF008D0028E3FB3AA00A0823FDF","D")
    Call WriteViaLoader("3FA8","C522C72306724B024B02005203A40220AA00AA1B02AB00AAAA009FCAF3F91E72","D")
    Call WriteViaLoader("3FC8","CB250299A866F0DA234B00F8F5A0ABA70005009FCAB9F95203AA00A0D002AA","D")
    Call WriteViaLoader("3FE8","AC4B0002AA3F9413022B5ABE236BAB00ACCAE6A3FD20F9","D")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 39, 44, Software)
    Call WriteViaLoader("2024","000000000000000000000000","E")
    Call WriteViaLoader("2030","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2050","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2070","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2090","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 40, 44, Software)
    Call WriteViaLoader("20D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2110","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2130","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 41, 44, Software)
    Call WriteViaLoader("2150","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2170","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2190","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 42, 44, Software)
    Call WriteViaLoader("2210","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2230","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2250","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2270","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2290","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 43, 44, Software)
    Call WriteViaLoader("22D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22F0","0000","E")
    Call WriteViaLoader("2DC0","01172F15FFFF01FF07FF504C45415345205354414E4420425900000000000000","E")
    Call WriteViaLoader("2DE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Complete...", 44, 44, Software)



End Sub

Sub InstallUpdates()
Sc.Print "Installing Updates"& vbCr
'If USW => &h0100 Then
        Call WriteViaLoader("2CE8","7D40BE0652F7803DFFFFC5F7083DAA2CE0A6013DFC2130C35D070FF28839072C","D")
        Call WriteViaLoader("2D08","8E38EEAA2CE0A6013DFC2130","D")
    'End If
Sc.Print "Installing USW1"& vbCr
    'If USW => &h0200 Then
        Call WriteViaLoader("2D14","D524C5AA24D8D002AA24C0430002AA2658430002A6013DFC80351302440024C3","D")
        Call WriteViaLoader("2D34","5D030FDF122406037404288CC1C9","D")
    'End If
Sc.Print "Installing USW2"& vbCr
    'If USW => &h0300 Then
        Call WriteViaLoader("2D42","760428038CD5138C2024","D")
        Call WriteViaLoader("2CE0","21513C515063DE1E","D")
    'End If
Sc.Print "Installing USW4"& vbCr
    'If USW => &h0400 Then
        Call WriteViaLoader("370E","2CE8","D")
        Call WriteViaLoader("270F","2D42","D")
        Call WriteViaLoader("2D4C","22F2008B23D50031","D")
    'End If
Sc.Print "Installing USW5"& vbCr
    'If USW => &h0500 Then
        Call WriteViaLoader("2D54","2698007A271103BD2CD000102CE800642D4C00402D8C002B","D")
        Call WriteViaLoader("2D6C","2F0801323039011E315907E1393D060B3F5800103F8800773FFF00013FFF0001","D")
    'End if
Sc.Print "Installing USW6"& vbCr
    'If USW => &h0600 Then
        Call WriteViaLoader("2D8C","7D08E3060342DEDD7D10E3021DD3E370042EDEDD07EAC59A2EAB002970012EC3","D")
        Call WriteViaLoader("2DAC","5704F470FF2C70FC2EC3F9","D")
        Call WriteViaLoader("2CD0","5503AA013AD0DBD524882D482ED5E3F9","D")
    'End If
Sc.Print "Installing USW7"& vbCr
    'If USW => &h0700 Then
        Call WriteViaLoader("2902","2932","D")
        Call WriteViaLoader("2932","22C2B8227AB888305C43F9","D")
        Call WriteViaLoader("2CEB","00","D")
        Call WriteViaLoader("2D4A","C27A","D")
    'End If
Sc.Print "Installing USW8"& vbCr
    'usw 800
        Call WriteViaLoader("2D16","77201E037420D28E3866F97720D20674","D")
        Call WriteViaLoader("2D26","20B775DFD28CC38F8801772C7720B706","D")
        Call WriteViaLoader("2D36","9A2C25BF9B2CD72CF9","D")
        Call WriteViaLoader("33C7","8C2D21","D")
        Call WriteViaLoader("384C","8C2D16","D")
        Call WriteViaLoader("3C37","FF8E2D2E","D")

     'current usw counter 800

    Call WriteViaLoader("24C8","0800","E")

End Sub

Sub WDTMR()
    Dim RetValue

Sc.Write("05150E108000")'SET WDTMR
'sc.delay(80)
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
end sub


Function WriteViaLoader(address,data,options)
dim dLen
dim tlen
dim parm1
dim parm2
dim write
Dim i, B, t
Dim datalen
Dim addresslow
Dim tmp
Dim Xored
Dim datarray(31)
Dim datalength


dLen = len(data)
dLen = dLen / 2
tLen = len(data)
tLen = tlen + 10
tLen = tlen / 2
tLen = hexstring(tlen,2)
        parm1 = Hex(dLen + &HC2)
        Parm2 = Hex(dLen + &H7F)

if Ucase(options) = "E" then

XoredByte(8) = XoredByte(0)
XoredByte(9) = XoredByte(1)
XoredByte(10) = XoredByte(2)
XoredByte(11) = XoredByte(3)
XoredByte(12) = XoredByte(4)
XoredByte(13) = XoredByte(5)
XoredByte(14) = XoredByte(6)
XoredByte(15) = XoredByte(7)
XoredByte(16) = XoredByte(0)
XoredByte(17) = XoredByte(1)
XoredByte(18) = XoredByte(2)
XoredByte(19) = XoredByte(3)
XoredByte(20) = XoredByte(4)
XoredByte(21) = XoredByte(5)
XoredByte(22) = XoredByte(6)
XoredByte(23) = XoredByte(7)
XoredByte(24) = XoredByte(0)
XoredByte(25) = XoredByte(1)
XoredByte(26) = XoredByte(2)
XoredByte(27) = XoredByte(3)
XoredByte(28) = XoredByte(4)
XoredByte(29) = XoredByte(5)
XoredByte(30) = XoredByte(6)
XoredByte(31) = XoredByte(7)

'Convert and Split up data String to an array

t = 0
For i = 1 To Len(data) Step 2
        tmp = Mid(data, i, 2)
        datarray(t) = (Hex2Dec(tmp))
        t = (t + 1)
Next

addresslow = Hex2Dec(Mid(address, 3, 2)) 'Get lower byte for offset
addresslow = (addresslow And &H7) 'strip bits for offset 0-7

If UBound(datarray) > 32 Then

Exit Function
End If

datalength = (Len(data) / 2)

'Encrypt
t = 0
For i = addresslow To datalength + addresslow - 1

 Xored = Xored & HexString(datarray(t) Xor Hex2Dec(XoredByte(i)), 2)
t = (t + 1)

Next

data = Xored
End if
            write = tLen & " " & parm1 & " " & parm2 & " " & address & " " & data & " " & "00"
sc.write(write)
sc.read(&h02)
Call WDTMR()
End Function



Sub IsCardPresent()
    Dim RetValue
    Dim GotInput
Do
Sc.Write("80")                'Card?
Sc.Delay(100)
If Sc.BytesInBuffer > 0 then
Sc.Read(&h01)
RetValue = Sc.GetByte(0)
end if

If RetValue = &h0 then
Call Sc.ProgressBox ("Please Insert Card...", 1, 999, Software)
GotInput = False
else
If RetValue = &hFF then
GotInput = True
else
If RetValue <> &h0 or RetValue <> &hFF then
Sc.Write("A0")                ' turn the LED off
Sc.Write("020200")
Sc.Delay(100)
If Sc.BytesInBuffer > 1 then
Sc.Read(&h02)
GotInput = False
else
GotInput = False
end if
end if
End if
End if
Loop Until GotInput = True
end sub


Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function

Function Hex2Dec(HexNumber)
    ' This function takes 1 argument, a string containing a hex value of any digit length
    ' and returns the decimal equivalent
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function

Function GetZipCode()
GetZipCode = 0
    Dim InputValid
    Dim PromptString
    Dim Abort
    Dim ZipCode
    Dim HexZipCode1
    Dim HexZipCode2
    Dim ThisChar

    InputValid = False
    PromptString = ""
    Do
        PromptString = PromptString & "Please enter your five digit zip code:"
    ZipCode = Sc.InputBox(PromptString, Software, Defaultzip)
        if zipcode = "" then
       Abort = Sc.MsgBox("Would you like to abort the script?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion)
        If Abort = vbYes Then
                GetZipCode = 1
                Exit Function
        end if
            end if
     If IsNumeric(ZipCode) And Len(Zipcode) = 5 and Zipcode > 1000 and Zipcode < 99951 Then
        GetZipCode = ZipCode
        InputValid = True
            PromptString = ""
    Else
            PromptString = "Invalid input!" & vbCrLf & vbCrLf
    End If
    Loop Until InputValid = True

    HexZipCode1 = ""
    HexZipCode2 = ""

    For ThisChar = 1 To 2
    HexZipCode1 = "5" & HexZipCode1 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    For ThisChar = 3 To 5
    HexZipCode2 = HexZipCode2 & "3" & Mid(ZipCode, ThisChar, 1)
    Next
    ZipCodeHex = HexZipCode1 & HexZipCode2 & "2020"

End Function

Function GetTimeZone()
GetTimeZone = 0
  Dim RetVal
  Dim GotInput
  Dim PromptString
  Dim TZT
  Dim TZ
  Dim TimeZone
  Dim DefaultTZButton
  Dim DefaultDaylightButton
  Dim DefaultMainButton
  Dim Daylight


''' Get time zone
    GotInput = False
    Do
        PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "This will detemineine the correct time on your receiver" & vbCrLf & "and will be used for guide and timer settings." & vbCrLf & "If you don't see your option click More..." & vbCrLf
        RetVal = Sc.ButtonBox(PromptString, DefaultTZButton + vbQuestion, Software, "Pacific", "Mountain", "Central", "Eastern", "More...")

        Select Case    UCase(RetVal)
        Case "1"
            TZ = &h0
            TimeZone = "Pacific"
            GotInput = True
        Case "2"
            TZ = &h2
            TimeZone = "Mountain"
            GotInput = True
         Case "3"
            TZ = &h4
            TimeZone = "Central"
            GotInput = True
         Case "4"
            TZ = &h6
            TimeZone = "Eastern"
            GotInput = True
         Case "5"
            Do
               PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "If you don't see your option click Back..." & vbCrLf
               RetVal = Sc.ButtonBox(PromptString, DefaultTZButton + vbQuestion, Software, "Atlantic", "NewFoundland", "Back...")
               Select Case    UCase(RetVal)
               Case "1"
                  TZ = &h8
                  TimeZone = "Atlantic"
                  GotInput = True
               Case "2"
                  TZ = &h9
                  TimeZone = "NewFoundland"
                  GotInput = True
               Case "3"
                  Exit Do
               End Select
            Loop Until GotInput = True
         Case "0"
            RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
            If RetVal = vbYes Then
                GetTimeZone = 1
                Exit Function
            End If
        End Select
    Loop Until GotInput = True
'Get Day light savings Time or Standard Time
    GotInput = False
    Do
        PromptString = "Please select Standard Time or Day Light Savings," & vbCrLf & vbCrLf
        PromptString = PromptString & "for the " & TimeZone & " Time Zone."
        RetVal = Sc.ButtonBox(PromptString,  DefaultDaylightButton + vbQuestion, Software, "DayLight", "Standard", "Cancel")

        Select Case UCase(RetVal)
        Case "1"
            TZT = &hA0'daylight
            TimeZone = TimeZone & "/DayLight Savings"
            GotInput = True
        Case "2"
            TZT = &h9E'standard
            TimeZone = TimeZone & "/Standard"
            GotInput = True
        Case "3", ""
            RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
            If RetVal = vbYes Then
                GetTimeZone = 1
                Exit Function
            End If
        End Select
    Loop Until GotInput = True

    TimeZoneHex = Hex(TZT + TZ)

End Function

Function GetExpireDate()
GetExpireDate = 0
    Dim InputValid
    Dim PromptString
    Dim Abort


    InputValid = False
    PromptString = ""
    Do
        PromptString = "Please enter the expiry date in HEX format with NO spaces between the two values."
        PromptString = PromptString & vbcrlf & "The chart indicates the year, followed by the month for that year."
        PromptString = PromptString & vbcrlf & "           Ja  Fe  Ma  Ap  Ma  Ju  Jl  Au  Se  Oc  No  De"
        PromptString = PromptString & vbcrlf & "2003 - 84  85  86  87  88  89  8A  8B  8C  8D  8E  8F"
        PromptString = PromptString & vbcrlf & "2004 - 90  91  92  93  94  95  96  97  98  99  9A  9B"
        PromptString = PromptString & vbcrlf & "Days:"
        PromptString = PromptString & vbcrlf & "1st = 01" & vbtab & vbtab & "2nd = 02" & vbtab & "3rd = 03" & vbtab & vbtab & "4th = 04" & vbtab & vbtab & "5th = 05" & vbtab & vbtab & "6th = 06"
        PromptString = PromptString & vbcrlf & "7th = 07" & vbtab & vbtab & "8th = 08" & vbtab & vbtab & "9th = 09" & vbtab & vbtab & "10th = 0A" & vbtab  & "11th = 0B" & vbtab & "12th = 0C"
        PromptString = PromptString & vbcrlf & "13th = 0D" & vbtab  & "14th = 0E" & vbtab  & "15th = 0F" & vbtab & "16th = 10" & vbtab  & "17th = 11" & vbtab  & "18th = 12"
        PromptString = PromptString & vbcrlf & "19th = 13" & vbtab  & "20th = 14" & vbtab  & "21st = 15" & vbtab  & "22nd = 16" & vbtab & "23rd = 17" & vbtab & "24th = 18"
        PromptString = PromptString & vbcrlf & "25th = 19" & vbtab  & "26th = 1A" & vbtab  & "27th = 1B" & vbtab & "28th = 1C" & vbtab & "29th = 1D" & vbtab  & "30th = 1E"
        PromptString = PromptString & vbcrlf & "31st = 1F"
        PromptString = PromptString & vbcrlf & "If no expiry is required use FF00"

    Expire = Sc.InputBox(PromptString, Software, DefaultExpire)
        if Expire = "" then
       Abort = Sc.MsgBox("Would you like to abort the script?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion)
        If Abort = vbYes Then
                GetExpireDate = 1
                Exit Function
        end if
            end if
Loop Until GotInput = True

End Function

Function ExtractCardInfo()
'This Routine Extracts the Cards 12 byte key and EEprom Xor Keys

    Dim XByte(15)

Call WDTMR()

Sc.Write("06C20724C08800")
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
        XByte(0) = Sc.GetByte(0)
        XByte(1) = Sc.GetByte(1)
        XByte(2) = Sc.GetByte(2)
        XByte(3) = Sc.GetByte(3)
        XByte(4) = Sc.GetByte(4)
        XByte(5) = Sc.GetByte(5)
        XByte(6) = Sc.GetByte(6)
        XByte(7) = Sc.GetByte(7)

Sc.Write("06C20726588800")
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
        XByte(8) = Sc.GetByte(0)
        XByte(9) = Sc.GetByte(1)
        XByte(10) = Sc.GetByte(2)
        XByte(11) = Sc.GetByte(3)
        XByte(12) = Sc.GetByte(4)
        XByte(13) = Sc.GetByte(5)
        XByte(14) = Sc.GetByte(6)
        XByte(15) = Sc.GetByte(7)

Sc.Write("06C20B2AE48C00")
Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)
        Key12Byte(0) = Sc.GetByte(&h0)
        Key12Byte(1) = Sc.GetByte(&h01)
        Key12Byte(2) = Sc.GetByte(&h02)
        Key12Byte(3) = Sc.GetByte(&h03)
        Key12Byte(4) = Sc.GetByte(&h04)
        Key12Byte(5) = Sc.GetByte(&h05)
        Key12Byte(6) = Sc.GetByte(&h06)
        Key12Byte(7) = Sc.GetByte(&h07)
        Key12Byte(8) = Sc.GetByte(&h08)
        Key12Byte(9) = Sc.GetByte(&h09)
        Key12Byte(10) = Sc.GetByte(&h0A)
        Key12Byte(11) = Sc.GetByte(&h0B)

        XORedByte(0) = HexString(XByte(0) XOR XByte(8), 2)
        XORedByte(1) = HexString(XByte(1) XOR XByte(9), 2)
        XORedByte(2) = HexString(XByte(2) XOR XByte(10), 2)
        XORedByte(3) = HexString(XByte(3) XOR XByte(11), 2)
        XORedByte(4) = HexString(XByte(4) XOR XByte(12), 2)
        XORedByte(5) = HexString(XByte(5) XOR XByte(13), 2)
        XORedByte(6) = HexString(XByte(6) XOR XByte(14), 2)
        XORedByte(7) = HexString(XByte(7) XOR XByte(15), 2)

End function

Sub GetFile()
    Dim FileName
    Dim FileSize

    FileName = Fs.FileOpenDialog(FileFilter, "Please select a valid HU Eprom (*.bin) file", "Default.bin")
    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            InFile = Fs.FileOpen(FileName, fsoOpenRead)
        End If
    End If

    FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_END)
    'Sc.Print "The file size is " & FileSize & vbCr

    if FileSize <> "8192" then
    Sc.MsgBox("This file is NOT a valid HU bin file" & vbcr & "or the bin file you are trying to open" & vbcr & "is being used by another program")
    HUBinFile = False
    exit sub
    else
    HUBinFile = True
    end if

end sub

Function setuploader()

    Wx.BaudRate = 115200
    Wx.ResetBaudRate = 115200
    Wx.Parity = 0                    ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
    Wx.StopBits = 0                  ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
    Wx.DTRControl = 0                ' Initial state of DTR  0 = off, 1 = on
    Wx.RTSControl = 1                ' Initial state of RTS  0 = off, 1 = on
    Wx.ResetDelay = 0                ' In microseconds
    Wx.ByteDelay = 0                 ' In microseconds
    Wx.RxByteTimeout = 800           ' In milliseconds
    Wx.ResetMode = 2                 ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
    Wx.ResetLine = 1                 ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
    Wx.ByteConvention = 1            ' 0 = Inverse, 1 = Direct
    Wx.FlushEchoByte = 0             ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted
    Wx.FlushBeforeWrite = 0          ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes
    Wx.IgnoreTimeouts = 0            ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
    Wx.ResetAfterTimeout = 0         ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout  - Not used if "IgnoreTimeouts=0"
    Wx.LogTransactions = 0           ' 0 = Don't log transactions, 1 = log transactions
    Wx.DisplayUSW = 0                ' Display USW after script complete 0 = no, 1 = yes
    Wx.DisplayFuse = 0               ' Display Fuse after script complete 0 = no, 1 = yes

End function

Function checkversion()

    If Sc.Version < 5.0 Then
        ErrorString = "You need version 5.1 or greater of WinExplorer to run this script"
        Sc.MsgBox ErrorString, vbCritical,software & " " & softwarever
        Err.Raise 1050, , ErrorString
        checkversion=1
        End If
End Function

Function checkloader()
dim temp
temp = mid(Wx.Commport,1,4)
checkloader=0
    Sc.Write ("90")    ' Get Unlooper Version
    Sc.Delay(100)
    If Sc.BytesInBuffer > 1 then
    Sc.Read (04)
    RetValue = Sc.GetByte(0)
    Else
        Call Sc.msgbox("No Loader Detected On " & Temp & vbcr & vbcr & "This means your loader is not powered on, connected or configured properly in winxplorer." & vbcr & "Please check your setup and try again." ,vbCritical,Software & " " & SoftwareVer)
            checkloader=1
        end if

End function




Function ReadInfo()
Sc.Print "Reading Info"& vbCr
'This function taken from ATRDump by Testies
    Dim CAMIDHex
    Dim CAMIDDec
    Dim USWHex
    Dim USWDec
    Dim DSWHex
    Dim DSWDec
    Dim GuideHex
    Dim GuideDec
    Dim TimeHex
    Dim TimeDec
    Dim RatingHex
    Dim RatingDec
    Dim SpendingLimitHex
    Dim SpendingLimitDec
    Dim infobox
    Dim actyear
    Dim actmonth
    Dim ActDateHex
    Dim ActDateDec
    Dim PPVLimitHex
    Dim PPVLimitDec
    Dim SpentHex
    Dim SpentDec
    Dim Fuse
    Dim IRDHex
    Dim IRDDec


   if ReceiveATR() = 0 Then
   Call Sc.Msgbox ("Error, Card has returned a partial ATR or NO Atr!")
   Exit Function                                      ' receive the atr
    End if


    ' 0B = 11 bytes to follow - Fixedwas 0A
    ' 1A = 38400 baud P3 Programmer Mode
    ' 0E 10 = set watchdog for unlooper timeout
    ' C4 = send next 5 bytes to card
    ' 48 2A 00 00 80 = Ins2A Send more data instruction
    ' BF = Read 64 bytes from card
    ' 00 = execute above instructions
    Sc.Write("0B 1A 0E10 C4 48 2A 00 00 80 BF 00")
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
       RetValue = Sc.GetByte(&h01)
       Sc.Read (RetValue)                             ' read the 0 - 63 bytes returned by Ins2A


    ' assign important parts of returned from Ins2A data here

    USWHex = HexString(GetByte(29), 2) & HexString(GetByte(30), 2)

    USWDec = Hex2Dec(USWHex)
        if len(USWDec) < 4 then
           USWDec = "000" & USWDec
        end if


    DSWHex = HexString(GetByte(33), 2) & HexString(GetByte(34), 2)

    DSWDec = Hex2Dec(DSWHex)
        if len(DSWDec) < 4 then
           DSWDec = "000" & DSWDec
        end if

    RatingHex = HexString(GetByte(11), 2)
    RatingDec = Hex2Dec(RatingHex)
        if len(RatingDec) = 1 then
            RatingDec = "0" & RatingDec
        end if


    SpendingLimitHex = HexString(GetByte(12), 2) & HexString(GetByte(13), 2)
    SpendingLimitDec = "$" & int(Hex2Dec(SpendingLimitHex)/100)

    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    if ActDateHex = "0000" then
        ActDateDec = "Not Active"
    else
    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    ActYear = 2000 + left(((GetByte(14)-95) / 12 * 100),1)
    ActMonth = round((right(int((((GetByte(14) - 95)/12))*100),2)/100)*12)
    ActDateDec = ActMonth & "." & GetByte(15) & "." & ActYear

    end if

    Fuse = HexString(GetByte(1), 2) & hexstring(GetByte(1) xor &hFF,2)

    IRDHex = Hexstring(GetByte(21) xor GetByte(25),2) & Hexstring(GetByte(22) xor GetByte(26),2) & Hexstring(GetByte(23) xor GetByte(27),2) & Hexstring(GetByte(24) xor GetByte(28),2)
        if len(IRDHex) <= 4 then
            IRDHex = "0000" & IRDHex
        end if

    IRDDec = Hex2Dec(IRDHex)
        if IRDDec <= 1 then
            IRDDec = "0000000" & IRDDec
        end if

    ' 02 = 2 bytes to follow
    ' BF = read next 64 bytes from card
    ' 00 = execute above

    Sc.Write("02BF00")
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)                        ' read 64 - 127 more bytes of 131 returned from Ins2A

    PPVLimitHex = HexString(Sc.GetByte(23), 2) & HexString(Sc.GetByte(24), 2)
    PPVLimitDec = "$" & int(Hex2Dec(PPVLimitHex)/100)
    SpentHex = HexString(Sc.GetByte(21), 2) & HexString(Sc.GetByte(22), 2)
    SpentDec = "$" & int(Hex2Dec(SpentHex)/100)


    Sc.Write("028200")
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)                        ' read the final 3 bytes 128 - 130 of Ins2A

    ' 08 = 8 bytes to follow
    ' C4 = send next 5 bytes to card
    ' 48 58 00 00 17 = Ins58 Send Card Info Command
    ' 9B = Read 28 bytes from card
    ' 00 = Execute above
    Sc.Write("08C448580000179B00")
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)                        ' read bytes 0 - 25 bytes returned by Ins58

    CAMIDHex = HexString(GetByte(2), 2) & HexString(GetByte(3), 2) & HexString(GetByte(4), 2) & HexString(GetByte(5), 2)
    CAMIDDec = Hex2Dec(CAMIDHex) & "x"

    ' assign important pieces of information from Ins58 command
    GuideHex = HexString(Sc.GetByte(13), 2)
    GuideDec = Hex2Dec(GuideHex)
        if GuideDec = 0 then
            GuideDec = "00"
        end if
    TimeHex = HexString(Sc.GetByte(11), 2)
    TimeDec = Hex2Dec(TimeHex)


    ' Print all info here

    infobox = "ATR  : " & ATR & vbCrLf & vbcrlf
    infobox = infobox & "Card Information"  & vbtab & vbtab & "Hex" & vbtab & vbtab &"Decimal" & vbCr
    infobox = infobox & "------------------------------------------------------------------------------------" & vbCr
    infobox = infobox & "Card ID(CAM)" & vbtab & vbtab & CAMIDHex & vbtab & CAMIDDec & vbCr
    infobox = infobox & "IRD ID"  & vbtab & vbtab & vbtab & IRDHex & vbtab & IRDDec & vbCr
    infobox = infobox & "Fuse Byte"  & vbtab & vbtab & Fuse & vbtab & vbtab & Hex2Dec(Fuse) & vbCr
    infobox = infobox & "Guide Byte"  & vbtab & vbtab & GuideHex & vbtab & vbtab & GuideDec & vbCr
    infobox = infobox & "Time Zone"  & vbtab & vbtab & TimeHex & vbtab & vbtab & Hex2Dec(TimeHex) & vbCr
    infobox = infobox & "Rating"  & vbtab & vbtab & vbtab & RatingHex & vbtab & vbtab & RatingDec & vbCr
    infobox = infobox & "USW"  & vbtab & vbtab & vbtab & USWHex & vbtab & vbtab & USWDec & vbCr
    infobox = infobox & "DSW"  & vbtab & vbtab & vbtab & DSWHex & vbtab & vbtab & DSWDec & vbCr
    infobox = infobox & "Activation Date"  & vbtab & vbtab & ActDateHex & vbtab & vbtab & ActDateDec & vbCr
    infobox = infobox & "PPV Spending Limit"  & vbtab & vbtab & PPVLimitHex & vbtab & vbtab & PPVLimitDec & vbCr
    infobox = infobox & "Amount Purchased"  & vbtab & vbtab & SpentHex & vbtab & vbtab & SpentDec & vbCr
    infobox = infobox & "User Spending Limit"  & vbtab & vbtab & SpendingLimitHex & vbtab & vbtab & SpendingLimitDec & vbCr
    infobox = infobox & "-------------------------------------------------------------------------------" & vbCrLf
    Call Sc.msgbox (infobox)
    ReadInfo = 1
End Function


' receives ATR or returns 0 indicating inability to receive an ATR

Function ReceiveATR
Dim i
    ' 06 = 6 bytes to follow
    ' 10 = set 9600 baud ATR
    ' 0E 10 = set timeout timer
    ' 01 = RESET CARD
    ' 93 = read 20 bytes from card
    ' 00 = execute above ins
    Sc.Write("06100E10019300")                        ' this command receives the ATR of an HU card
    Sc.Delay(80)
    Sc.Read(&h02)                                     ' see if command was accepted
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)                        ' read the 20 bytes
ATR = ""
    For i = 0 to RetValue-1
        ATR = ATR &  HexString(Sc.GetByte(i), 2) & " "        ' 20 bytes of ATR

    Next

    If(RetValue < 20) Then
        ReceiveATR = 0
    Else
        ReceiveATR = 1
    End If

End Function





Function GetGuideByte()
GetGuideByte = 0
Dim PromptString
Dim RetVal
GotInput = False
    Do
           PromptString = ""
           PromptString = "Select Guide Byte:" & vbCrLf
           PromptString = PromptString & "" & vbCrLf
    PromptString = PromptString & "00 No Locals" &  vbtab & vbtab & "02 Atlanta, GA" & vbtab & vbtab & "41 Boston, MA" & vbCrLf
    PromptString = PromptString & "10 Chicago, IL" &  vbtab & vbtab & "40 Clevland, OH" & vbtab & vbtab & "28 Dallas, TX" & vbCrLf
    PromptString = PromptString & "60 Denver, CO" &  vbtab  & vbtab & "08 Detroit, MI" & vbtab & vbtab & "01 Houston, TX" & vbCrLf
    PromptString = PromptString & "11 Los Angeles, CA"  & vbtab & "02 Maimi, FL" & vbtab & vbtab & "28 Minneapolis, MN" & vbCrLf
    PromptString = PromptString & "28 New York, NY" &   vbtab & "01 Orlando, FL"  &  vbtab & vbtab & "60 Philadelphia, PA" & vbCrLf
    PromptString = PromptString & "08 Phoenix, AZ" &   vbtab & vbtab &  "40 Sacramento, CA" & vbtab & "28 San Francisco, CA" & vbCrLf
    PromptString = PromptString & "10 Seattle, WA" &   vbtab & vbtab & "08 St. Louis, MO" &  vbtab & vbtab & "08 Tampa, FL" & vbCrLf
    PromptString = PromptString & "12 Washington DC" &   vbtab & "28 Greenville, SC" &  vbtab  &"01 Raleigh/Durham, NC" & vbCrLf
    PromptString = PromptString & "02 Salt Lake City, UT"  & vbtab & "20 Austin, TX" &  vbtab & vbtab & "02 Baltimore, MD" & vbCrLf
    PromptString = PromptString & "01 Birmingham, AL" &   vbtab & "48 Charlotte, NC" &  vbtab & vbtab & "20 Cincinnati, OH" & vbCrLf
    PromptString = PromptString & "28 Columbus, OH"  &   vbtab & "08 Greensboro, NC" &  vbtab &  "02 Indianapolis, IN" & vbCrLf
    PromptString = PromptString & "01 Kansas City, MO" &   vbtab & "40 Memphis, TN" &  vbtab & vbtab & "01 Milwaukee, WI" & vbCrLf
    PromptString = PromptString & "10 Nashville, TN" &   vbtab & vbtab & "01 Pittsburgh, PA" &  vbtab  &"01 Portland, OR"  & vbCrLf
    PromptString = PromptString & "02 San Antonio, TX" &   vbtab & "10 San Diego, CA" &  vbtab &"20 West Palm Beach, FL"  & vbCrLf

           RetVal = Sc.InputBox(PromptString, "Software", DefaultGuide)
             if RetVal = "" then
               RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
                   If RetVal = vbYes then
                        GetGuideByte = 1
                       exit function
                   end If
             end If

             if IsHex(RetVal) and Len(RetVal) = 02 then
               Guide = RetVal
               GotInput = True
            End if
        Loop until Gotinput = True
End Function


Function GetLocalByte()
GetLocalByte = 0
Dim PromptString
Dim RetVal
GotInput = False
Do
           PromptString = "Select Your Locals Byte"
           PromptString = PromptString & "" & vbCrLf
           PromptString = PromptString & "01 Atlanta" & vbtab & vbtab & "16 Greenville**" & vbtab & vbtab & "25 Pittsburgh*" & vbCrLf
           PromptString = PromptString & "19 Austin*" & vbtab & vbtab & "08 Houston" & vbtab & vbtab & "26 Portland" & vbCrLf
           PromptString = PromptString & "1A Baltimore*" & vbtab & vbtab & "20 Indianapolis" & vbtab & vbtab & "17 Raleigh**" & vbCrLf
           PromptString = PromptString & "1B Birmingham*" & vbtab & vbtab & "21 Kansas City*" & vbtab & vbtab & "10 Sacramento" & vbCrLf
           PromptString = PromptString & "02 Boston" & vbtab & vbtab & "09 Los Angeles" & vbtab & vbtab & "18 Salt Lake" & vbCrLf
           PromptString = PromptString & "1C Charlotte" & vbtab & vbtab & "22 Memphis*" & vbtab & vbtab & "27 San Antonio*" & vbCrLf
           PromptString = PromptString & "03 Chicago" & vbtab & vbtab & "0A Miami" & vbtab & vbtab & "28 San Diego*" & vbCrLf
           PromptString = PromptString & "1D Cincinnati" & vbtab & vbtab & "23 Milwaukee" & vbtab & vbtab & "11 San Francisco" & vbCrLf
           PromptString = PromptString & "04 Cleveland" & vbtab & vbtab & "0B Minneapolis" & vbtab & vbtab & "12 Seattle" & vbCrLf
           PromptString = PromptString & "1E Columbus" & vbtab & vbtab & "24 Nashville" & vbtab & vbtab & "13 St. Louis" & vbCrLf
           PromptString = PromptString & "05 Dallas" & vbtab & vbtab & "0C New York, NY" & vbtab & "14 Tampa" & vbCrLf
           PromptString = PromptString & "06 Denver" & vbtab & vbtab & "0D Orlando" & vbtab & vbtab & "29 W Palm Beach*" & vbCrLf
           PromptString = PromptString & "07 Detroit" & vbtab & vbtab & "0E Philadelphia" & vbtab & vbtab & "15 Washington, D.C." & vbCrLf
           PromptString = PromptString & "1F Greensboro*" & vbtab & vbtab & "0F Phoenix" & vbtab & vbtab & "00 No Locals" & vbCrLf
           PromptString = PromptString & "" & vbCrLf
           PromptString = PromptString & "*Double LNB Required" & vbtab & "**Triple LNB Required" & vbCrLf
           PromptString = PromptString & "" & vbCrLf
           PromptString = PromptString & "Please allow 2 hours for your local 1-99 channels to appear in the guide." & vbCrLf
           PromptString = PromptString & "Please enter your favorite local channels code:" & vbCrLf
           PromptString = PromptString & "" & vbCrLf
           PromptString = PromptString & "88 All locals for 1st to 4th Generation DSS Receivers Only*" & vbCrLf
           PromptString = PromptString & "No sub has 88 so it's at your risk." & vbCrLf
           RetVal = Sc.InputBox(PromptString, Software, DefaultMarket)
                     if RetVal = "" then
                                   RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
                         If RetVal = vbYes then
                            GetLocalByte = 1
                         exit function
                         end If
                       end If

             if IsHex(RetVal) and Len(RetVal) = 02 then
             LocalByteHex = RetVal
             GotInput = True
            End if
        Loop until gotinput = True
End Function

Function GetFuse() 'from dsp
       ''' Get Return Fuse Byte'''

        FuseByte = "25DA"
        GetFuse = 0

End Function

Function HexToDec(HexNumber)

    ' This function takes a string as input, assuming it to be a Hexidecimal string,
    ' and converts it to a decimal number

    HexNumber=Replace(UCase(HexNumber)," ","")
    HexToDec=CLng("&H"+HexNumber)

End Function

Sub WriteCard()

Sc.Print "Writing Bin"& vbCr
    Dim EPROM
    Dim ThisByte
    Dim Address
    Dim RetValue
    Dim Location
    Dim EPROMBytes
    Dim EPROMBytes2

    Address = 8192
    Location = 0

Sc.Write("A2")

'Call WDTMR()

'call Fs.FileSeek(InFile, 20, fsoSEEK_SET)
'EPROMBytes = ""
'For ThisByte = 20 to (22) - 1
'EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
'Next
'Sc.Write("07C4812014" & EPROMBytes & "00")
'Sc.Read(&h02)
'Sc.Print "2014: " & EPROMBytes & vbcr

Call Sc.ProgressBox ("Writing EPROM memory..." & vbcr & "2000:  " & EPROMBytes, EPROM, 255, "loaderUP Writing")


call Fs.FileSeek(InFile, Location, fsoSEEK_SET)

Do

Call WDTMR()

EPROMBytes = ""
For ThisByte = Location to (Location + 16) - 1
EPROMBytes = EPROMBytes & HexString(Fs.FileGetc(InFile), 2)
Next
EPROMBytes2 = ""
For ThisByte = (Location + 16) to (Location + 32) - 1
EPROMBytes2 = EPROMBytes2 & HexString(Fs.FileGetc(InFile), 2)
Next

Sc.Write("25E29F" & HexString(Address,4) & EPROMBytes & EPROMBytes2 & "00")
Sc.Read(&h02)
Call Sc.ProgressBox ("Writing EPROM memory..." & vbcr & HexString(Address,4) & ":  " & EPROMBytes & vbcr & HexString(Address + 16,2) & ":  " & EPROMBytes2, EPROM, 255, "Processing")

EPROM = EPROM + 1
Address = Address + 32
Location = Location + 32
loop until EPROM = 255

Fs.FileClose(InFile)
Sc.Write("A0")                ' turn the LED off
Sc.Write("020200")
Sc.Delay(100)
Sc.Read(&h02)

Call Sc.ProgressBox ("", 0, 0, "")

end sub

Sub ShutdownCard()

    Sc.Write("A0")              ' Turn the LED off
    Sc.Write("020200")             ' Shutdown card
    Sc.Delay(100)
    Sc.Read(&h02)

End Sub

Function GetAtmelVersion()
    Dim I

    Sc.Write("90")
    Sc.Read(4)

    For I = 0 to 3
        GetAtmelVersion = GetAtmelVersion & Chr(Sc.GetByte(I))
    Next
End Function

Function ChipVer()

    ChipVer = 1

    sc.write("90")
    delay(80)

    if sc.read(4) <> 4 then
        ChipVer = 0
        Exit Function
    end if

    if getbyte(0) <> &h55 then ChipVer = 0
    if getbyte(1) <> &h4c then ChipVer = 0
    if getbyte(2) <> &h34 then ChipVer = 0
    if getbyte(3) <> &h53 then ChipVer = 0

End Function



SUB UTILMENU()
    Dim ErrorString
    Dim MenuPrompt
    Dim Choice
    Dim PromptString
    Dim RetVal
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Password
Sc.Print "You are now in the Card Utilities Area"& vbCr

 MenuPrompt = "                                 DreamMaker3m !! !! "  & vbCrLf & vbCrLf
    MenuPrompt = MenuPrompt & "                   Please select what options you want to use                        " & vbCrLf

    Choice = Sc.ButtonBox(MenuPrompt, 1, " Card Utilities", "Read BIN", "Write BIN", "Unloop", "Check Alt-EE","Fix Alt-EE")

Select Case Choice

Case "1" 'Read the BIN from the card
    Call GetFileName()
    GlitchMenu = "Choose which glitch you would like to use."
    GlitchToUse = Sc.ButtonBox(GlitchMenu, 1, Software & " " & Softwarever, "4C", "48", "2E")
    Call LoadBootStrap()
    Call ReadCard()

Case "2" 'Write a BIN to the card
     if(GetATR = False) then
        call CardIsLooped()
     else
        HUBinfile = False
        Call GetFile()
        If HUBinFile = True then
        GlitchMenu = "Choose which glitch you would like to use."
        GlitchToUse = Sc.ButtonBox(GlitchMenu, 1, Software & " " & Softwarever, "4C", "48", "2E")
        Call LoadBootStrap()
        Call WriteCard()
        else
        end if
     end if

Case "3"    'The unlooping part
RetVal = 3
     call IsCardPresent()
     if(GetATR = True) then
         RetVal=Sc.ButtonBox("This card appears to have a good ATR"& VbCr &"Unloop anyway",  vbDefaultButton2 + vbQuestion, "THEHAMMER", "Yes", "No")
         if RetVal = 1 then RetVal = 3
      End if

     if RetVal = 3 then

       HUBinfile = False
    if(BootCard2())= 1 then
       sc.print VbCr & "Select a good eeprom bin to write to the card" & VbCr
       Call GetFile()

       If HUBinFile = True then
            Call WriteCard()
            call ShowAtr()
          else
            Fs.FileClose(InFile)
          end if

         end if
       end if

Case "4"
        Call LoadBootStrapEE()
        Call ReadAEE()

Case "5"
        Call LoadBootStrapEE()
        Call FixAEE()
    'exit sub

End Select

End Sub



Function GetATR ()
    Dim temp
    Call Sc.ProgressBox(0,0,0,0)
    Sc.Write("06100E10019300")
    Sc.Delay(500)
    Sc.Read(&h02)
    temp = Sc.GetByte(&h01)
    Sc.Read (temp)
    if(temp <> 20) then
        GetATR = False
    else
        GetATR = True
    end if
End Function

'This is the MAIN part of the unlooping

''''''''''''''''''''''''''''''Unlooping
'Bootcard for unlooping
'
Function BootCard2()
Call Card_Reset()
    Dim d0,D1,D2,D3,D4,D5,D6,D7,D8,d9
    Dim cnt,b, RetVal, boot, kk,katr
    Dim atrlock,cter, glcnt, mtries,kp

    RANDOMIZE TIMER

    atrlock=0
    cter=0
    glcnt=0
    mtries = 0
    d0 = 0


DO
  katr=0
  mtries = mtries + 1
    if mtries = 5000 then
       call RndGr()
       mtries = 0
    end if

    boot = 0
'==============================================
        'vcc + last 2 glitch 4 bootloader
        D2 = INT(RND * &h04) + &h30      ' 48 -  52
        D3 = INT(RND * &h03) + &h08      '  8 -  11
        D4 = INT(RND * &h10) + &h86      '134 - 150
        D9 = INT(RND * &h02) + &h35e     '862 - 864
        '==========================================
        ' Atr glich point search range

       if atrlock = 0 then
        D7 = INT(RND * &h04) + &h1d   ' 29 -  33
        D8 = INT(RND * &h04) + &h38   ' 56 -  60
        D1 = INT(RND * &h5e) + &ha0   '165 - 191
        D5 = INT(RND * &h02) + &h25d  '605 - 607
        D6 = INT(RND * &h07) + &h36   ' 54 -  61

    end if

    call ProgUpdate(kp,atrlock)


    sc.write("A1")
    delay(10)

    if Chk4Card() = 0 then
        BootCard2=0
        Exit Function
    end if

    delay(30)

    sc.write("B0" & HexString(D1,02))
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")

    Sc.Read(&h02)

    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    if cnt = 1 then sc.read(1)
    end if

    if cter > 75 then
        glcnt = glcnt + 1
        if glcnt = 24 then
          glcnt = 0
          call RndGr()
        end if
        cter = 0
        atrlock = 0
    end if

    if cnt > 0 then
       kp=kp+1
       if kp >33 then kp = 33
        sc.print "============================================"&VbCr&"ATR"&VbCr
         for b = 0 to 10
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         end if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
            if kk = &h38 then
               sc.print "38 "
               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &hb0 then
                         sc.print "B0" & VbCr & "Attempting to install bootloader "
                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit for
                       end if
                    end if
              end if
         end if

      sc.print HexString(kk,2) &" "
      next
      sc.print VbCr &"============================================"&VbCr
      'sc.print VbCr & cter & VbCr

    if katr = 1 then
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
       else
          cnt = 0
       end if

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)

          for b = 0 to 8
            Sc.Write("028000")
                        if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            end if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                cnt = 0
                if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         sc.print VbCr & "Bootloader installed and active!" & VbCr
                         sc.print "After " & d0 & " tries to activate bootloader" &VbCr
                         exit for
                      end if
                    end if
                 end if
             else
                exit for
          end if

         next

        if boot = 1 then
           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           BootCard2=1
           Exit Function
         end if
       end if
     end if
   else
    kp=kp-1
    if kp<1 then kp=1
   end if
loop

End Function
'End of the MAIN unlooping code


'Show ATR function from The Hammer
Function ShowAtr()

    Dim cnt,tmp,b,Msg

    Msg="Unlooping "
    tmp=""

    sc.write("0610010e109300")

    if Sc.Read(&h02) > 1 then
        cnt = sc.getbyte(1)
    else
        cnt = 0
    end if
    tmp="Card Successfully Entered "+VbCr+"ATR Returned:"+VbCr
    if cnt > 0 then
        cnt = sc.read(cnt)

    for b = 0 to cnt -1
      tmp=tmp & HexString(sc.getbyte(b),2) & " "
    next
      sc.print VbCr & tmp & VbCr
      cnt  = Sc.ButtonBox(tmp, 0, Msg, "Ok")
    else
    tmp=""
    tmp=tmp+"Card did not return an ATR"+VbCr+"Try to unloop the card again"+VbCr
    tmp=tmp+"This happens sometimes when the card"+VbCr
    tmp=tmp+"doesn't take the eeprom write"
    cnt = Sc.ButtonBox(tmp, 0,Msg , "Ok")

    end if

End Function

Sub Card_Reset()
    Dim RetVal
    Sc.Write("A0")     ' Turn the LED off if it is on
    Sc.Write("020200") ' Power down the card
    Sc.Delay(1000)     ' Wait about 1 second
    Call Sc.Reset()    ' Power up the card
    RetVal=Sc.Flush()  ' Flush the receive buffer
End Sub


Sub RndGr
    Dim g1,g2,g3,g4,g5,g6
    Dim dly,v
RANDOMIZE TIMER
 ' sc.print VbCr & "Random gliching the card to whip it into shape" & VbCr

  for v = 1 to 800
    g1 = INT(RND * &hFF)
    g2 = INT(RND * &hFF)
    g3 = INT(RND * &hFF)
    g4 = INT(RND * &hFF)
    g5 = INT(RND * &hFF)
    g6 = INT(RND * &h4F) + &h80
    dly= INT(RND * &h200)
    sc.write("B0" & HexString(g6,2))
    sc.write("111f0120" & HexString(dly,4) & "0c" & HexString(g1,2) & "0c" & HexString(g2,2) & "0a" & "0c" & HexString(g3,2) & "0c" & HexString(g4,2) & "0c" & HexString(g5,2) & "00")
    sc.read(2)
  next
End Sub

'Code to update the window showing unlooping status
Sub ProgUpdate(pg,atrlock)
    Dim i
    Dim Msg
    Msg="CHecking for ATR"
    if atrlock = 1 then
      Msg=Msg+VbCr+VbCr+"Accessing Card."
    else
      Msg=Msg+VbCr+VbCr+"Glitching."
    end if
    Call Sc.ProgressBox(Msg,pg,33,"v 4.0")
End Sub


Function Chk4Card()
    Dim tmp
    sc.write("80")
    sc.delay(10)
  if sc.read(1) = 1 then
    tmp=sc.getbyte(0)
    If tmp = &h0 then
        Chk4Card=0
        sc.write("A0")
        Call Sc.ProgressBox(0,0,0,0)
        sc.MsgBox("Card Removed Unlooping ended prematurely")
    else
        Chk4Card=1
    end if
  end if
End Function

Sub FixAEE()
    dim    i
    dim msg

    msg = ""
    Sc.Write("A2")
    Call WDTMR()

    Sc.Write("06C0FF0EFF8400")
    Sc.Read(2)
    Sc.Read(4)
    For i=0 To &H03&
       SFBbuf(i)=Sc.GetByte(i)
       msg = msg & HexString(Sc.GetByte(i),2) & " "
    Next
    Sc.Read(1)
    Call ShutdownCard()
    if AnalyseSFB = TRUE Then
        msg = "The Repair of Alt-EE Was Successful (" & msg & ")"
        Call Sc.MsgBox(msg,vbExclamation,"Alt-EE Repair Kit Results")
    Else
        msg = "WARNING The Repair of Alt-EE FAILED (" & msg & ")"
        Call Sc.MsgBox(msg,vbCritical,"Alt-EE Repair Kit Results")
    End If

End Sub

Sub LoadBootStrapEE()

    Dim RetValue
    Dim GotInput
    Dim DAC4C
    Dim Counter
    Dim Attempts

    Counter = 0
    Attempts = 1
    DAC4C = &h85

    Call IsCardPresent()

    Do
        Sc.Write("A1")
        GotInput = False

        If Counter = 12 Then
            Counter = 0
        End If

        If Counter = 1 Then
            DAC4C = &h85
        End If

        If Counter = 4 Then
            DAC4C = &h82
        End If

        If Counter = 8 Then
            DAC4C = &h80
        End If

        If Counter = 11 Then
            DAC4C = &h71
        End If

        Call Sc.ProgressBox ("Glitching...               Attempts:        " & Attempts & vbcr & "                                 DAC4C:        " & HexString(DAC4C,2), 1, 999, "UnLooper/Loader")

        Sc.Write("06100E10019300")
        Sc.Delay(80)
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))
        'INS 4C
        Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
        Sc.Delay(80)
        If Sc.BytesInBuffer > 0 Then
            Sc.Read(&h02)
                RetValue = Sc.GetByte(&h01)
                Sc.Read (RetValue)
        End If

    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF523FFD2284E1727B0772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")

        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1

    Loop Until GotInput = True

' send the bootloader
    Sc.Write("42FF22BE72FF14E1E2B0025E52729201522022FFAB005F5D100601B5CAF672AA6472F36D72F36FF71011F76013C5AA0060AB2000C35D2006F5F72011F721118EFB8700")

    Sc.Read(&h02)
    Sc.Write("3DFAF72211F723118EFB87F70013C5AA2020AB0060C35D0406F5526A9201C5AA0060E1C35D0406F70098C5F76013AA2000F70013E1C35D2406F18C010000")
    Sc.Read(&h02)

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub

Function AnalyseSFB()
    Dim i
    dim GoodSFB(4)

    AnalyseSFB=False
    '14 01 24 20
    GoodSFB(0)=&H14&
    GoodSFB(1)=&H01&
    GoodSFB(2)=&H24&
    GoodSFB(3)=&H20&


    For i=0 To &03&
        If GoodSFB(i) <> SFBbuf(i) Then
            Exit Function
        End If
    Next
    AnalyseSFB=True
End Function

Sub ReadAEE()
    dim    i
    dim msg

    msg = "Your Cards Alt-EE Contents Are:" & VbCr
    Sc.Write("A2")
    Call WDTMR()

    Sc.Write("06C0000EFFA400")
    Sc.Read(2)
    Sc.Read(&h20)
    For i=0 To &H1F&
       AEEbuf(i)=Sc.GetByte(i)
       msg = msg & HexString(Sc.GetByte(i),2) & " "
       If i = &h0f&    Then
            msg = msg & VbCr
       End If
    Next

    msg = msg & VbCr & VbCr

    Sc.Read(4)
    For i=0 To &H03&
       SFBbuf(i)=Sc.GetByte(i)
       msg = msg & HexString(Sc.GetByte(i),2) & " "
    Next
    Sc.Read(1)
    Call ShutdownCard()

    if (AnalyseAEE = True) AND (AnalyseSFB = TRUE) Then
        msg = msg & VbCr & VbCr & "The Alt-EE Contents Are Valid"
        Call Sc.MsgBox(msg,vbExclamation,"Alt-EE Repair Kit Results")
    Else
        msg = msg & VbCr & VbCr & "WARNING: The Alt-EE Contents Are Invalid!"
        Call Sc.MsgBox(msg,vbCritical,"Alt-EE Repair Kit Results")
    End If

End Sub

Function AnalyseAEE()
    Dim i
    Dim GoodAEE(32)

    AnalyseAEE=False
    '00 00 00 00  AA 00 00 00  00 00 00 00  00 F3 00 F3
    'FF FF FF FF  FF FF FF FF  FF FF FF FF  FF FF FF FF
    For i=0 To &H0F&
        GoodAEE(i)=&H00&
        GoodAEE(i+&H10&)=&HFF&
    Next
    GoodAEE(&H04&)=&HAA&
    GoodAEE(&H0D&)=&HF3&
    GoodAEE(&H0F&)=&HF3&


    For i=0 To &H1F&
        If GoodAEE(i) <> AEEbuf(i) Then
            Exit Function
        End If
    Next
    AnalyseAEE=True
End Function