''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ResponseGlitcher.xvb - Created 2009-10-21
'
' for use with ND13-type atmel flash, _modified with Ins0D glitches_
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' history:
'   2009-10-21b added HideGlitchRst
'   2009-10-21 thread post on dcm
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit     ' any used variables must be explicitly declared


Sub Main()
    Dim TestCmd
    Dim TestCmdPacket
    Dim TestResponseLen
    Dim i
    Dim j
    Dim Delay
    Dim GlitchVcc
    Dim FirstDelay
    Dim LastDelay
    Dim FirstGlitchVcc
    Dim LastGlitchVcc
    Dim ExpectedResponse
    Dim ExpectedResponseLen
    Dim HideGlitchRst


' set if comm is displayed or not
    Sc.Verbose = True

' read atmel version
    Sc.Write("90")
    Sc.Read(4)


' reset card and set IFS
    ResetAndIFS


' TestCmd is the command to send to card and time how long it takes for a response
' checksum will automatically be added to end of TestCmd
    TestCmd = "21 C1 01 80"


    TestCmdPacket = "60" & HexString(GetPacketLen(TestCmd)/2,2) & TestCmd & DoCheckSum(TestCmd)


    ExpectedResponse = Array( &h12, &hE1, &h01, &h80, &h72 )
    ExpectedResponseLen = 5


    FirstDelay = 1
    LastDelay = 1110
    FirstGlitchVcc = 95
    LastGlitchVcc = 85


'HideGlitchRst = 1 prints '-' if response after glitch starts with FF (it's probably a RST)
    HideGlitchRst = 1

' Sc.Verbose = false to hide comm. with card
    Sc.Verbose = false


' loop through all delays from FirstDelay to LastDelay
    For Delay = FirstDelay To LastDelay
        Sc.Print VbCr & "Delay: " & Delay & VbCr

' for each delay, loop through all glitchvcc values from FirstGlitchVcc to LastGlitchVcc (step -1 - descending)
        For GlitchVcc = FirstGlitchVcc To LastGlitchVcc Step -1

            Sc.Write("B0 " & HexString(GlitchVcc,2))


            Sc.Write( HexString(GetPacketLen(TestCmdPacket)/2+7,2) & TestCmdPacket & "20" & HexString(Delay, 4) & "0D 01 84 00" )
            TestResponseLen = RxResponse


            If TestResponseLen > 0 Then

                If Sc.GetByte(0) <> ExpectedResponse(0) Then
                    If ( Sc.GetByte(0) <> &hFF ) Or ( HideGlitchRst=0 ) Then
                        Sc.Print VbCr & "GlitchVcc: " & GlitchVcc & "  Delay: " & Delay & VbCr
                        Sc.Print "Bad response:"
                        For i = 0 To TestResponseLen-1
                            Sc.Print " " & HexString(Sc.GetByte(i),2)
                        Next
                        Sc.Print VbCr
                    ElseIf HideGlitchRst=1 Then
                        Sc.Print "-"
                    End If
                    If ResetAndIFS <> 1 Then
                        Exit Sub
                    End If
                ElseIf TestResponseLen <> ExpectedResponseLen Then
                    Sc.Print VbCr & "GlitchVcc: " & GlitchVcc & "  Delay: " & Delay & VbCr
                    Sc.Print "Strange response:"
                    For i = 0 To TestResponseLen-1
                        Sc.Print " " & HexString(Sc.GetByte(i),2)
                    Next
                    Sc.Print VbCr
                    If ResetAndIFS <> 1 Then
                        Exit Sub
                    End If
                Else
                    For i = 1 To ExpectedResponseLen-1
                        If Sc.GetByte(i) <> ExpectedResponse(i) Then
                            Sc.Print VbCr & "GlitchVcc: " & GlitchVcc & "  Delay: " & Delay & VbCr
                            Sc.Print "Strange response:"
                            For j = 0 To TestResponseLen-1
                                Sc.Print " " & HexString(Sc.GetByte(j),2)
                            Next
                            Sc.Print VbCr
                            If ResetAndIFS <> 1 Then
                                Exit Sub
                            End If
                            Exit For
                        End If
                    Next
                End If
            Else
                If ResetAndIFS <> 1 Then
                    Exit Sub
                End If
            End If

        Next
    Next

    Sc.Print VbCr

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Function ResetandIFS
    ResetandIFS=1

' reset card and receive ATR
    Sc.Write("08 10 01 03 9A 15 0E 20 00")
    If RxResponse <> &h1B Then
        Sc.Print VbCr & "Bad ATR" & VbCr
        ResetandIFS=0
    End If


' set IFS
    If SendPacket("21 C1 01 80", 5) <> 5 Then
        Sc.Print VbCr & "Bad IFS response" & VbCr
        ResetandIFS=0
    End If

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SendPacket - send Packet to card, receive ResponseLen bytes
' return value: # of received bytes
Function SendPacket( Packet, ResponseLen )
    Dim PacketLen
    Dim PacketCS

    PacketLen = GetPacketLen(Packet) / 2

    PacketCS = DoCheckSum(Packet)

    If ResponseLen > 0 Then
        Sc.Write( HexString(PacketLen+5,2) & "60" & HexString(PacketLen,2) & Packet & PacketCS & HexString(&h7F+ResponseLen,2) & "00" )
    Else
        Sc.Write( HexString(PacketLen+4,2) & "60" & HexString(PacketLen,2) & Packet & PacketCS & "00" )
    End If

    SendPacket = RxResponse

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SendPacketPreCS - send Packet to card, receive ResponseLen bytes
' return value: # of received bytes
' Packet must already have checksum(LRC)
Function SendPacketPreCS( Packet, ResponseLen )
    Dim PacketLen
    Dim PacketCS

    PacketLen = GetPacketLen(Packet) / 2

    If ResponseLen > 0 Then
        Sc.Write( HexString(PacketLen+4,2) & "60" & HexString(PacketLen-1,2) & Packet & HexString(&h7F+ResponseLen,2) & "00" )
    Else
        Sc.Write( HexString(PacketLen+3,2) & "60" & HexString(PacketLen-1,2) & Packet & "00" )
    End If

    SendPacketPreCS = RxResponse

End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' RxResponse - receive response from loader (2 bytes, plus data)
' return value: # of bytes received
Function RxResponse
    Sc.Read(2)
    RxResponse = Sc.GetByte(1)
    If( Sc.GetByte(1) > 0 ) Then
        Sc.Read(Sc.GetByte(1))
    End If
End Function
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' the rest of this file is helper functions
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
'
' DoCheckSum(Packet) - calculate checksum for Packet
' Hex2Dec(HexNumber) - takes a string with a hex value, returns decimal value
' HexString(Number,Length) - convert Number to a string containing Length-digit hex value
' GetPacketLen(Packet) - returns length (in characters) of Packet
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DoCheckSum(Packet) - calculate checksum for Packet
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function DoCheckSum (Packet)
 Dim Temp
 Dim Length
 Dim PK
 Dim CheckSum
 Dim i

 PK=""

 Length = Len(Packet)           'get packet length with spaces

 for i = 1 to Length
    Temp = Mid(Packet, i, 1)
    if Temp <> " " then         'remove all spaces in packet
        PK = PK + Temp
    End if
 next

 Length = Len(PK)               'get packet length without spaces

 CheckSum = 0

 for i = 0 to Length
     i=i+1                      'Simulate Step 2 in VB scripting
     Temp = Mid(PK, i, 2)
     CheckSum = CheckSum XOR Hex2Dec(Temp)  'Calc Checksum
 next

 DoCheckSum = HexString(CheckSum, 2) 'convert checksum to a hex strimg and return it to caller

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Hex2Dec(HexNumber) - takes a string with a hex value, returns decimal value
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function Hex2Dec(HexNumber)
    ' This function takes 1 argument, a string containing a hex value of any digit length
    ' and returns the decimal equivalent
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' HexString(Number,Length) - convert Number to a string containing Length-digit hex value
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetPacketLen(Packet) - returns length (in characters) of Packet
' note: returned value = length in bytes * 2
'
' ripped from ROM102_ND13_A0FF-INTERCEPT-autoVCC_20_Smart.xvb
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function GetPacketLen(Packet)
 Dim Length
 Dim Temp
 Dim PK
 Dim i

 PK = ""

 Length = Len(Packet)                   'get packet length with spaces

 for i = 1 to Length
    Temp = Mid(Packet, i, 1)
    if Temp <> " " then                 'remove all spaces in packet
        PK = PK + Temp
    End if
 next

 GetPacketLen = Len(PK)                 'return packet length without spaces

End Function