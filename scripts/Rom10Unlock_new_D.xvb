' Dish rom 10 any rev, Streamlocked And Dealerlocked! Modded by DrSagan
'
' Scroll down through the script and read all the text in green, there are additional clues.
'
' Run the VccAnalyzer and scroll down through the script and input those VCC's into either the
' Unlock_Dish() or Unlock_Bev() settings.  The VccAnalyzer is set to start at a rather
' high vcc setting so it may take a while to generate a result.
'
' Special thanks to SlickVguy for the VccAnalyzer and all the other help through the years.
'
' Use Newd11 or Newd13
'
' Set pot to 1k ohms
'
' This script automatically sets up your winex settings, just set config to unlooper
'**************************************************************************************
Option Explicit
Dim Shell
Set Shell = CreateObject("WScript.Shell")

    Dim MainMenu
    Dim ResetCounter
    Dim Bytes
    dim bytes2
    Dim BR2(5)
    Dim VCCStart
    Dim VCCLimit
    Dim VCC
    Dim DelayEnd
    Dim DelayStart
    Dim GlitchType
    Dim TryCnt
    DIM TryLimit
    DIM TRYCNT2
    DIM RT
    DIM TestMode
    Dim logo
    TRYCNT2=1

WinExConfig()

Sub Main()

    sc.verbose = true
    'ATR
    Sc.Write("08 0E 03 10 01 01 03 9A 00")
    Sc.Read(02)
    Bytes = Sc.Getbyte(1)
        If Bytes < 1 then
            Call Sc.MsgBox("--- No ATR, check card insertion ---")
                Exit Sub
        End If

        If Bytes < 25 then
            Call Sc.MsgBox("--- Invalid ATR ---")
                Exit Sub
        End If

        If Bytes > 2 then
            Sc.Read(27)
        End If
    sc.verbose = False

    Do

    MainMenu        = Sc.ButtonBox("", vbDefaultButton2, "Rom10 Unlock", "Unlock Dish", "Unlock Bev", "VCC Analyzer")

    Select Case MainMenu
        Case 0
            Exit Sub
        Case 1
            Unlock_Dish()
        Case 2
            Unlock_Bev()
        Case 3
            VCC_Analyzer()
    End Select

    Loop

End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sub Unlock_Dish()
' These are the variables you can change for any dish rev rom 10

VCCStart = &h18     'Enter your VCC Ceiling Here from the VCCAnalyzer in this script!
VCCLimit = &h15     'Enter your VCC Floor here from VCCAnalyzer in this script
DelayStart=&h0C0D   'If you keep getting false "cam is open" responses at or near &h0C3F
DelayEnd = &h0C3F   'try lowering DelayStart to &h0BF0 and DelayEnd to &h0C30
TryCnt =   300      'Number of tries per delay FROM 5-50000
TestMode = 0        'TestMode, 1 = ON, 0 = OFF

'TestMode is used to find a glitch point on Rom10 cam. once you find the
'delay and vcc settings on cam then set TestMode = 0, and open the cam.

    GlitchType=&h09
    VCC = VCCStart
    RT = DelayStart
' get atr
    sc.verbose=TRUE
    Sc.Write("07 0e 03 10 01 03 9a 00")    'reset card
    Sc.Read(02)
    Bytes = Sc.Getbyte(1)
    if Bytes > 25 then
    Sc.Read(27)
    end if

Sc.Write("12 15 AB 21 00 08 A0 CA 00 00 02 12 00 06 55 0E 03 85 00")
   Sc.Read(02)
   Bytes = Sc.Getbyte(1)
    if Bytes > 5 then
    Sc.Read(6)
    end if
print
          if TestMode = 1 then
              print " You are in testmode, cam will not open in this mode!!!" & vbcr
              print " set TestMode = 0 to open cam " & vbcr & vbcr
          end if
print " Now we will try "  & HexString(RT, 4) & " delay" & vbcr
sc.verbose=false

Do

               VCC = VCC - 1.0
               if VCC < VCCLimit then
               VCC = VCCStart
               END IF

    Sc.Write("B0" & HexString(VCC, 2))

SC.DELAY(11)

Sc.Write("61 15 F6 21 00")
Sc.Write("53 A0 CA 00 00 4D 03 4B 00 C5 10 6F 15 CC 00 CC")
Sc.Write("00 CC 00 CC 00 0C CD 32 0C 5A EA 2D 2D 0C CD 32")
Sc.Write("0C 5A EA 2D 2D B1 C4 45 F4 E1 20 14 80 8D 4C F0")
Sc.Write("AA A6 1D 0D AA 1D F4 97 65 2E 88 4E 25 0C CD 32")
Sc.Write("0C 5A EA 2D 2D B1 C4 45 F4 E1 20 14 80 05 67 21")
Sc.Write("92 00 00 00 7D 20" & HexString(RT, 4) & "09 0E 05 85 00")

   Sc.Read(02)
   Bytes = Sc.Getbyte(1)
        if Bytes > 4 then
        Sc.Read(5)
        bytes=sc.getbyte(3)
    PRINT HexString(bytes, 2)

        TryCnt2 = TryCnt2 + 1
        if trycnt2 > trycnt then
             RT = RT + 1
             TRYCNT2 = 0
            if rt > DelayEnd then
                    rt = DelayStart
                    END IF
         print
             print " now we will try "  & HexString(RT, 4) & " delay"
             print
      END IF
        if bytes = &H83 then

            print
            print
            print "*********** we hit our bug *************"& VbCr
            PRINT HEXSTRING(SC.GETBYTE(0),2) & HEXSTRING(SC.GETBYTE(1),2) & HEXSTRING(SC.GETBYTE(2),2) & HEXSTRING(SC.GETBYTE(3),2)& HEXSTRING(SC.GETBYTE(4),2)& VbCr
             Sc.Print "===========================================" & VbCr
            PRINT HexString(bytes, 2)
            print " was hit at " & HexString(RT, 4) & " delay ----VCC WAS " & HexString(VCC, 2)
            print
            SC.DELAY(2500)
if TestMode = 0 then
            sc.verbose=TRUE
            Sc.Write("0A 15 A3 21 92 00 B3 0E 03 85 00")
            SC.READ(2)
            Bytes = Sc.Getbyte(1)
            if Bytes > 4 then
                Sc.Read(5)
                bytes=sc.getbyte(3)
            END IF
            SC.DELAY(30)

            PRINT "***************************" & VBCR
            PRINT "* Rom10 CAM should be OPEN  *" & VBCR
            PRINT "*  test in Nagra to see.  *" & VBCR
            PRINT "*   if not, try again.    *" & VBCR
            PRINT "***************************" & VBCR

            exit sub
end if
        sc.verbose=false
        end if
        else
        PRINT" RESET "
        ResetCounter = ResetCounter +1
        if ResetCounter > 2 then
        ResetCounter = 0
        sc.write("02 03 00") 'freeze card
        sc.write("02 02 00") 'unfreeze card
        end if
        End if

            Sc.Write("08 0e 03 10 01 01 03 9a 00")   'reset card
            sc.read(02)
            sc.delay(5)
LOOP
End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sub Unlock_Bev()
' These are the variables you can change for rom 10 BEV A81

VCCStart = &h17     'Enter your VCC Ceiling Here from VCCAnalyzer in this script
VCCLimit = &h11     'Enter your VCC Floor here from VCCAnalyzer in this script
DelayStart=&h0D00   'If you keep getting false "cam is open" responses at or near &h0D1F
DelayEnd = &h0D1F   'try lowering DelayStart to &h0CF0 and DelayEnd to &h0D10
TryCnt =   300      'Number of tries per delay FROM 5-50000
TestMode = 0        'TestMode, 1 = ON, 0 = OFF

'TestMode is used to find a glitch point on A81 cam. once you find the
'delay and vcc settings on cam then set TestMode = 0, and open the cam.

    GlitchType=&h09
    VCC = VCCStart
    RT = DelayStart
' get atr
    sc.verbose=TRUE
    Sc.Write("07 0e 03 10 01 03 9a 00")    'reset card
    Sc.Read(02)
    Bytes = Sc.Getbyte(1)
    if Bytes > 25 then
    Sc.Read(27)
    end if

Sc.Write("12 15 AB 21 00 08 A0 CA 00 00 02 12 00 06 55 0E 03 85 00")
   Sc.Read(02)
   Bytes = Sc.Getbyte(1)
    if Bytes > 5 then
    Sc.Read(6)
    end if
print
          if TestMode = 1 then
              print " You are in testmode, cam will not open in this mode!!!" & vbcr
              print " set TestMode = 0 to open cam " & vbcr & vbcr
          end if
print " Now we will try "  & HexString(RT, 4) & " delay" & vbcr
sc.verbose=false

Do

               VCC = VCC - .5
               if VCC < VCCLimit then
               VCC = VCCStart
               END IF

    Sc.Write("B0" & HexString(VCC, 2))

    SC.DELAY(10)

    Sc.Write("48 03 15 E0")
    Sc.Write("21 00 3D A0 CA 00 00 37 03 35 08 01 10 31 15 00")
    Sc.Write("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00")
    Sc.Write("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00")
    Sc.Write("00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05")
    Sc.Write("4F 0E 03 85 00")
    Sc.Read(02)
    Bytes = Sc.Getbyte(1)
    if Bytes > 5 then
    Sc.Read(6)
    end if

SC.DELAY(35)

Sc.Write("6A 15 FF 21 00")
Sc.Write("5CA0CA0000560354080C108405CC00CC")
Sc.Write("00CC00CC000CCD320C5AEA2D2D0CCD32")
Sc.Write("0C5AEA2D2DB1C445F4E12014808D4CF0")
Sc.Write("AAA61D0DAA1DF497652E884E250CCD32")
Sc.Write("0C0CCD320C5AEA2D2DA9CD65B74832C8")
Sc.Write("EFFFFFFFFFA9CD65B74832C8EFF3 20" & HexString(RT, 4) & "09 0E 05 85 00")

   Sc.Read(02)
   Bytes = Sc.Getbyte(1)
        if Bytes > 4 then
        Sc.Read(5)
        bytes=sc.getbyte(3)
    PRINT HexString(bytes, 2)

        TryCnt2 = TryCnt2 + 1
        if trycnt2 > trycnt then
             RT = RT + 1
             TRYCNT2 = 0
                if rt > DelayEnd then
                rt = DelayStart
                END IF
             print
             print " now we will try "  & HexString(RT, 4) & " delay"
             print
        END IF
        if bytes = &H83 then
            print
            print
            print "*********** we hit our bug *************"& VbCr
            PRINT HEXSTRING(SC.GETBYTE(0),2) & HEXSTRING(SC.GETBYTE(1),2) & HEXSTRING(SC.GETBYTE(2),2) & HEXSTRING(SC.GETBYTE(3),2)& HEXSTRING(SC.GETBYTE(4),2)& VbCr
             Sc.Print "===========================================" & VbCr
            PRINT HexString(bytes, 2)
            print " was hit at " & HexString(RT, 4) & " delay ----VCC WAS " & HexString(VCC, 2)
            print
            SC.DELAY(2500)
                if TestMode = 0 then
            sc.verbose=TRUE
            Sc.Write("12 15 AB 21 00 08 A0 CA 00 00 02 C0 00 06 87 0E 03 85 00")
            SC.READ(2)
            Bytes = Sc.Getbyte(1)
            if Bytes > 5 then
                Sc.Read(6)
                bytes=sc.getbyte(3)
            END IF
            sc.delay(150)
            Sc.Write("0A 15 A3 21 98 00 B9 0E 03 85 00")
            SC.READ(2)
            Bytes = Sc.Getbyte(1)
            if Bytes > 5 then
                Sc.Read(6)
                bytes=sc.getbyte(3)
            END IF
            sc.delay(150)
            Sc.Write("0A 15 A3 21 92 00 B3 0E 04 85 00")
            SC.READ(2)
            Bytes = Sc.Getbyte(1)
            if Bytes > 4 then
                Sc.Read(5)
                bytes=sc.getbyte(3)
            END IF
            SC.DELAY(30)

            PRINT "***************************" & VBCR
            PRINT "* A81 CAM should be OPEN  *" & VBCR
            PRINT "*  test in Nagra to see.  *" & VBCR
            PRINT "*   if not, try again.    *" & VBCR
            PRINT "***************************" & VBCR
            exit sub
end if
            sc.verbose=false
        end if
       else
       PRINT" RESET "
       End if
            Sc.Write("08 0e 03 10 01 01 03 9a 00")   'reset card
            sc.read(02)
            sc.delay(5)
LOOP
End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sub Vcc_Analyzer()
    Call Sc.MsgBox("--- If you get ALL +++'s or ---'s change Max/Min in Sub VCCAnalyzer() ---")
    Const VAVCCTestMax  = &hA0          '<--- Set this to the MAXIMUM VCC to test the card with.
    Const VAVCCTestMin  = &h04          '<--- Set this to the MINIMUM VCC to test the card with.
    Const VATryLimit    = 50            '<--- Set this to the NUMBER of times to glitch each VCC.
    Const VADelay       = &h0D00        '<--- Set this to the DELAY to use for each glitch.
    Const VAFFTgtPct    = .6            '<--- Set this to the FF TARGET PERCENTAGE, i.e. the "sweet spot".
    Const VAVCCSpread   = 6             '<--- Set this to the SPREAD you want between VCCCeiling and VCCFloor.

    Dim VAVCCCeiling,VAVCCFloor
    Dim VAVCC
    DIM VATry
    Dim VABytes
    Dim VA6FCounter, VAFFCounter
    Dim VA6FPct, VAFFPct
    Dim VAFlag
    Dim vaResetCounter

    VAFlag        = 0
    VATry         = 0

    sc.verbose = true

    'FIXUP CARD
    'Prevents those f'n 06 00 / 03 00 problems.
    sc.write("02 03 00")    'freeze card
    sc.write("02 02 00")    'unfreeze card

    'ATR
    Sc.Write("07 0e 03 10 01 03 9a 00")
    Sc.Read(02)
    VABytes = Sc.Getbyte(1)
    if VABytes > 25 then
        Sc.Read(25)
    end if

    'CMD12
    Sc.Write("12 15 AB 21 00 08 A0 CA 00 00 02 12 00 06 55 0E 03 8B 00")
    Sc.Read(02)
    VABytes = Sc.Getbyte(1)
    if VABytes > 5 then
        Sc.Read(sc.bytesinbuffer)
    end if

    sc.verbose = false

    'VCC LOOP
    For VAVCC = VAVCCTestMax To VAVCCTestMin Step -1

        sc.delay(50)

        'INIT COUNTERS
        VA6FCounter = 0
        VAFFCounter = 0

        'SET GLITCH VCC
        Sc.Write("B0" & HexString(VAVCC, 2))
        sc.print
        sc.print "VCC " & HexString(VAVCC, 2) & ": "

        'TRY LOOP
        For VATry = 1 to VATryLimit

            sc.delay(20)

            'SEND CMD03
            Sc.Write("61 15 F6 21 00")
            Sc.Write("53 A0 CA 00 00 4D 03 4B 00 C5 10 6F 15 CC 00 CC")
            Sc.Write("00 CC 00 CC 00 0C CD 32 0C 5A EA 2D 2D 0C CD 32")
            Sc.Write("0C 5A EA 2D 2D B1 C4 45 F4 E1 20 14 80 8D 4C F0")
            Sc.Write("AA A6 1D 0D AA 1D F4 97 65 2E 88 4E 25 0C CD 32")
            Sc.Write("0C 5A EA 2D 2D B1 C4 45 F4 E1 20 14 80 05 67 21")
            Sc.Write("92 00 00 00 7D 20" & HexString(VADelay, 4) & "09 0E 05 85 00")

            'GET CMD03 RESPONSE
            Sc.Read(02)
            VABytes = Sc.Getbyte(1)
            If VABytes > 4 Then
                Sc.Read(5)
                VABytes = sc.getbyte(3)

                'DISPLAY CMD03 RESPONSE
                Select Case VABytes
                    Case &h6F
                        sc.print "++"
                        VA6FCounter = VA6FCounter+1
                    Case &hFF
                        sc.print "--"
                        VAFFCounter = VAFFCounter+1
                    Case &h83       sc.print "!!"
                    Case Else       sc.print "??"
                End Select
            Else
                sc.print "XX"
            End If


            'RESET CARD
            Sc.Write("08 0e 03 10 01 01 03 9a 00")
            sc.read(02)

        Next
        sc.print " " & HexString(vaDelay,4) & "/" & HexString(vaVCC, 2)
        VA6FPct = VA6FCounter/VATryLimit
        VAFFPct = VAFFCounter/VATryLimit
        sc.print "   6F = " & FormatPercent(VA6FPct,0,-1) & "   FF = " & FormatPercent(VAFFPct,0,-1)

       If vaFFPct >= vaFFTgtPct And vaFlag = 0 Then
            vaFlag = 1
            vaVCCCeiling = vaVCC + 4
            vaVCCFloor = vaVCC - 2
        End If

        If vaFFPct >= .98 Then
            Exit For
        End If

    Next

    sc.print
    sc.print
    sc.print "VCC Ceiling: " & HexString(VAVCCCeiling,2) & vbcr
    sc.print "VCC Floor..: " & HexString(VAVCCFloor,2) & vbcr

End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function

'================================================================================================================
Function WinExConfig()
sc.print "________________Setting up WinExplorer_________________" & VbCr
Wx.BaudRate = 115200
Wx.ResetBaudRate = 115200
Wx.Parity = 0 ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
Wx.StopBits = 0 ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
Wx.DTRControl = 0 ' Initial state of DTR 0 = off, 1 = on
Wx.RTSControl = 1 ' Initial state of RTS 0 = off, 1 = on
Wx.ResetDelay = 100 ' In microseconds
Wx.ByteDelay = 10 ' In microseconds
Wx.RxByteTimeout = 500 ' In milliseconds
Wx.ResetMode = 2 ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
Wx.ResetLine = 1 ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
Wx.ByteConvention = 1 ' 0 = Inverse, 1 = Direct
Wx.FlushEchoByte = 0 ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted.
Wx.FlushBeforeWrite = 1 ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes.
Wx.IgnoreTimeouts = 1 ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
Wx.ResetAfterTimeout = 0 ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout - Not used if "IgnoreTimeouts=0"
Wx.LogTransactions = 0 ' 0 = Don't log transactions, 1 = log transactions
Wx.DisplayUSW = 0 ' Display USW after script complete 0 = no, 1 = yes
Wx.DisplayFuse = 0 ' Display Fuse after script complete 0 = no, 1 = yes
End function

'================================================================================================================