'                            StarGlitchDF Ver3.4.1
'
' 3-28-03 - Updated to clean residual code from 2b00-2ccf (code used by alt-ee clean)
'                             Modified UL4S/ROM
'             Cleaner|Reader|Writer|Unlooper|3M Writer|Hex Writer
'                               by Stars2002
' =======================================================================================
' Unlooper now uses DacFinder to establish Dac Settings and automatically updates these
' settings on successful bootstraps.
' Please use Valid, clean Bin with good ZKT Tables as your "Default.bin" starting point.
' Set your Local Info below or in the .ini file.
' =======================================================================================
' Cleaner will clean to current USW or apply updates to USW 700 or USW 800/DSW 6.
' The script has 2 methods to read/write cards. The 4C Glitch that is safer to use
' for Subbed Cards, and the ROM Reader/Unlooper that "plays" with timing and dac settings
' to optimize the boot process for locked and looped cards.
' Remember, Glitching is Hardware, Card and Timing dependent. Feel free to adjust settings.
' ---------------------------------------------------------------------------------------
' 3Ms are available as self contained or Loaded Extreme Hex Files.
' Not Supported: Encrypted Hex or Activation files (Tier statements).
' ======================================= History =======================================
' StarGlitchDF DacFinder Series
' Ver 3.4 Changes:
' Change 3M's to master 3M Library
' Converted the perl "hex2xvb" to VBScript and added.
' Added another glitch type. (4 different types for the bootstrap)
' Optimized a few settings.
' Minor improvements to readout and program flow.
' Remove auto_unlock. No longer needed.
' Simplify the menus some.
' Ver 3.3 Changes:
' Added Alt EE fix to the Clean Function.
' Modified Glitch to load faster on locked and Fuse 3M's
' Changed printout format.
' Updated Custom and HuFix 3M's
' Ver 3.2 Changes:
' 1st StarGlitch DacFinder version.
' Now uses arrays and .dac files to improve performance.
' Successful Dac settings are auto-saved in your selected .dac file.
' Atmel Version now reported on startup.
' ============================================
' StarGlitchPro Series
' Ver 3.1 Changes:
'  * Fix bug in Fuse Byte
'  * Change delays for better 4C boot on 4B cards
' Ver 3.0 Changes:
'  * Updated 3M's 12-16.
'  * Added Option to read User Variables from .ini file. Allows multiple profiles to be
'    easily setup.
'  * Optimize Custom Timeshifte Repair Station settings.
'  * Added 4B card option. Glitch ranges can vary for these.
'  * Setup optional glitches in User Variables.
'  * Added auto_unlock to User settings. auto_unlock allows dacset to rotate after excess
'    glitch attempts (200)
' Ver 2.6b : Bug Fix for 2.6
' Ver 2.6 Changes: Added ability to write Extreme Hex files directly to card.
'   Change Glitch range, Glitch delay and loopdelay to min/max settings in script.
'   Seperate Write Hex routine and menu.
' Ver 2.5 Changes: Improved 4C Read capabilities. (Auto-Adjusts Glitch Delay) Will often
'   read locked cards without corruption!
'   Optional bootloader glitches suggested by Vorlon001 - Thanks!
'   Timer re-written to report based on actual working script execution.
'   Added Check2000 routine option in script settings. (Thanks Canard!)
'   Updated 3M's
' Ver 2.4 Changes: Update 3M's after 11-25 hash.
'   Added another 3M slot.
'   ReadBoot deleted: now uses unloopboot. (parameter for read/write)
' Ver 2.3 Changes: Changed the 3m subroutines for easier patching of converted hex files.
'   Updated 3m's to current.
' Ver 2.2 Changes:
'   Added P52's excellent 3M to the choices. THANKS, P52 !
'   Changed Loop Delay to a variable and now proggy changes it automatically.
' Ver 2.1 Changes:
'   Updated 3M to defeat 11-14 3M Hashes (Boy, was Dave busy or what? LOL)
'   Changed Filename select so that you can pick BIN to write BEFORE unlooping.
'   Added CheckCard (with verbose) routine for more initial diagnostic info.
'   Increased 4C Glitch range on Advanced 4C Glitch (70 - 95). Re-wrote to use For-next loop.
'   Changed 4C Glitch delays for faster glitch (No difference on my loader)
'   Fixed bug with ZPCode not being assigned by ConvertZip sub.
'   Fixed bug with auto-rotate in SmartDac.
'   Changed default to lock the ATR related DAC's after ATRlock.
' =======================================================================================
' *********       Thanks to no1b4me for UL4S, and Dexter for Winexplorer.     ***********
' Thanks AOL6945, RAM9999, Nerg333, SEMU, Anonymous, Vorlon001, Extreme_TV, TRS,
' and the many others who have contributed code to the freeware hobby!
' Parts of this script were borrowed from: SEMU, DSSTech, UL4S, RS_Unlooper and Snakebite.
' ( Mostly UL4S) Thanks to all !
' Winexplorer Note: From the docs: "When the script ends, any open files will
' remain open until you close WinExplorer." This means if you abort an operation and a
' File was opened, you'll have to close winexplorer to free up the filename.
' =======================================================================================
' ATR : 3F 7F 13 25 03 38 B0 04 FF FF 4A 50 00 00 29 48 55 55 00 00
Option Explicit
    Const dss_DefaultButton1 = 0
    Const dss_DefaultButton2 = 256
    Const dss_DefaultButton3 = 512
    Const fsoError = -1
    Const fsoOpenRead = 0
    Const fsoOpenWrite = 1
    Const fsoOpenReadWrite = 2
    Const ForReading = 1, ForWriting = 2, ForAppending = 8
    Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0
    Const fsoSEEK_SET = 0
    Const fsoSEEK_CUR = 1
    Const fsoSEEK_End = 2
    Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"
    Const HexFilter = "Hex Files (*.hex)|*.hex"
    Const IniFilter = "StarGlitch Profile (*.ini)|*.ini"
    Const DacFilter = "Dac Files (*.dac)|*.dac"
    Const Ins = &h08
    Const InsParam1 = &h00
    Const InsParam2 = &h00
    Const InsLen = &h34
    Const Software="StarGlitch DF v3.4"
    Dim OutFile, InFile, HUBinFile, XORedByte(31), Key12byte(11)
    Dim D0,D1,D2,D3,D4,D5,D6,D7,D8,D9
    Dim ScriptStart, ScriptEnd, Choice
    Dim DAC, DAC4C, Delaye, Delay5C, glttl,Attempts
    Dim GlType, GlRot, CardSel, chglch, glchs, Glrngchoice, gldly
    Dim MenuPrompt, FileName, Read, ATR, Redo, dacset, dacmsg, atrlock, LoopFlag
    Dim loopdelay, minloopdelay, maxloopdelay, looppref, autorot, addusw, randac
    Dim RetVal, RetVal2, PPV1, PPV2, PPVrepeat1, PPVrepeat2, BootActive
    Dim ZipCode, ZPtemp, ZPtempx, ZPtemp1, ZPtemp2, ZPtemp3, ZPtemp4, ZPtemp5, ZPCode
    Dim local, GUIDEbyte, GUIDEbyte2, TZone, rating, FuseBytes, PPVDollar, OptionByte
    Dim SpendingLimitHex, Spend_Limit, SpendingLimitDec
    Dim Default_ZipCode, Default_Local, Default_GuideByte, Default_TimeZone, Default_Rating
    Dim Default_FuseByte, Default_PPVDollar, Default_OptionByte, Default_SpendLimit, New_SpendLimit
    Dim Prompt_Ini, dly4c,dly4cmin,dly4cmax, Dac4cmax, Dac4cmin, chk2000
    Dim fso, ts, x, regEx, buf, f, d, mfile, m, ary3m()
    Dim ThisStr, Tail, ByteCnt, BitCnt, Addr, sData, addscript
    Dim MaxDacs, GenFlag, Ucycles, Uloop, dacFields, DacCycle, DacCnt, idxField, DacFileName
    Dim D1Min, D1Max, i, boot, resp, respboot, gltypecnt, gltypemax

    Setuploader()  'Set up winexplorer for unlooper settings
' ############################    User Settings  ##############################

Prompt_Ini        =   0      ' Prompt for .ini file:
                             ' 0 - Use settings below.
                             ' 1 - You will be prompted for the .ini file.
If Prompt_Ini < 1 Then
    sc.print "Using settings in main program" & VbCr
' ##############################################################################
' ########  Copy Below Settings to your .ini file if Prompt_Ini = 1   ##########
' ********            StarGlitch DacFinder User Settings              **********

mfile             =   "StarGlitch.3m" ' 3M Library File. Complete Path
DacFileName       =   "RS.dac" ' Default Dac File to prompt for
d1Min             =   165 ' DacFinder Cycles thru this range for D1 to find
d1Max             =   210 ' valid Dac Sets for your setup. D1 is the most important.
' ***************        Default Local Area Settings        *******************
Default_ZipCode   =   "32806"
Default_Local     =   "0D"
Default_GuideByte =   "01"
Default_TimeZone  =   "A6"
Default_Rating    =   "06"
Default_FuseByte  =   "25DA"
Default_SpendLimit =  "1300" ' 4 digit Decimal Dollar Amount (set for P52)
chk2000           =    0     ' 1 or 0 : 1 to check 2000 Data after unlooping

'****************        Default PPV Settings        ***************************
Default_PPVDollar  =  "150"
Default_OptionByte =  "6B"

' ***************        Default Glitch Settings      **************************
GlType            =    1     ' (1-4)Glitch Type: Affects Boot portion of unlooper. Default=1
GlRot             =    1     ' (1 or 0) Rotate Glitch Types: Default = 0
GlTypeMax         =    15    ' Number of cycles to use each Glitch Type during GLRotate
minloopdelay      =   20     ' Play with these values for 4C and ROM glitch timing
maxloopdelay      =   40     ' default - min 50 - max 100
loopdelay         =   maxloopdelay ' Some loaders need slower delays. Try changing min/max
dly4cmin          =   30     ' 4C glitch delay range ; gldly = dly4cmin to dly4cmax
dly4cmax          =   50     ' Uses 0C XX: Glitch Vcc, delay XX cycles, Glitch Vcc
Dac4cmax          =   &h9F   ' 4C Glitch Range (Hex)
Dac4cmin          =   &h80   '
MaxDacs           =   30     ' Dac Finder makes this many starting Dac Sets
Ucycles           =    4     ' Number of Unlooping Glitch attempts with each Dac Set
'
'
' *******************         End User Settings            **********************
'
'
' ###############################################################################
End If

' **************************************************************************
Sub Main()

Dim ErrorString
Dim MenuPrompt
Dim Choice
Dim PromptString
Dim RetValue
Dim GotInput
Dim ThisChar
Dim Version
Dim Password
Dim Cchoice
Dim D0
Dim D1
Dim D2
Dim D3
Dim D4
Dim D5
Dim D6
Dim D7
Dim D8
Dim D9
Dim PChoice
Dim logo, msg
' On Error Resume Next
Sc.Verbose = 0 ' Set to 1 for display of card responses
gldly = 80     ' Start point for Main unlooper delay in Do-Loop
glttl = 0
d0 = 0

If Sc.Version < 4.5 Then
    ErrorString = "You need version 4.5 or greater of WinExplorer to run this script"
    Sc.MsgBox ErrorString, vbCritical
    Err.Raise 1050, , ErrorString
End If

if ChipVer <> 1 then
    sc.MsgBox("You need UL4S to run this script." & VbCr & "Flash your chip with the UL4S code")
    Exit Sub
 End If

Set fso = CreateObject("Scripting.FileSystemObject")
If not (fso.FileExists(mfile)) Then
    msg = mfile & " doesn't exist." & VbCr & "*** Please Edit Your User settings! ***"
    MsgBox(msg)
    Exit Sub
End If
logo = "logo.jpg"
Call Sc.PictureBox(logo,4,0)
Sc.ClearOutputWindow
sc.print VbCr&"<<<<<<<<   Atmel Code: "& GetAtmelVersion()&"   >>>>>>>>>>"&VbCr&VbCr
Call Card_Reset()
Call IsCardPresent()

Call CheckCard()
'   If GetAtr() > 0 Then
'    MenuPrompt = "ATR : " & ATR
'    Call Sc.Msgbox (MenuPrompt, VbInformation, "Your Card Has a Good ATR !")
'   End if

If prompt_Ini = 1 Then
Call Setup()
End If

Include(mfile)   'Load Master 3M file Names to memory
Include3m(mfile) 'Load Master 3M file to memory

Do
    MenuPrompt = dacmsg & "Read/Write 4C'" & VbTab & VbTab & "Use this If you want to save your Bin first." & vbCr
    MenuPrompt = MenuPrompt & "Clean/Hex/3M" & VbTab & VbTab & "Clean Card or Write Hex or 3M." & vbCr
    MenuPrompt = MenuPrompt & "Read Lokt Card" & VbTab & VbTab & "Use Rom Glitch (Save) to access locked or looped card." & vbCr
    MenuPrompt = MenuPrompt & "Unloop/Write" & VbTab & VbTab & "Use Rom Glitch (Write) to access locked or looped card." & vbCr & VbTab & VbTab & VbTab & "(Includes DacFinder)" & VbCr & VbCr
    MenuPrompt = MenuPrompt & VbTab & VbTab & VbTab & m & " 3Ms now available in 3M Library." & vbCr
    Choice = Sc.ButtonBox(MenuPrompt, VbInformation, "StarGlitch: Select operation or click X to exit-->", "Card Info", "Read/Write 4C", "Clean/Hex/3M", "Read LoktCard", "Unloop/Write")

Select Case Choice
Case "0"
  Exit Sub

Case "1" ' Cardinfo
    If Chk4Card Then
        If(GetATR = False) then
          Call OopsLooped()
        Else
          Call ReadInfo()
        End If
    End If

Case "2" ' Read/Write 4C
'  If(GetATR = False) then
'       Call OopsLooped()
'  Else
      MenuPrompt = "Select Operation for Standard 4C Glitch:" & vbCrLf
      Cchoice = Sc.ButtonBox(MenuPrompt, VbInformation, "StarGlitch: Select operation or click X to exit-->", "Read 4C", "Write 4C", "Exit")
      Select Case Cchoice
        Case "0"
        Case "1" ' Read4c

          Call GetSaveFile()
            If (FileName <> "") Then
              Sc.Write("A1")
              Call LoadBootStrap()
              Call ReadCard()
              Call ShutDownCard()
            End If
        Case "2" ' Write4c
          Call GetWriteFile() ' File to write
            If (HUBinFile) and (FileName <> "") Then
              Sc.Write("A1")
              Call LoadBootStrap()
              If HUBinFile Then
              CAll WriteCard(32)
              End If
              Call ShutDownCard()
            End If
        Case "3"

      End Select
'  End If

Case "3" ' Clean/Write Hex
      MenuPrompt = Chr(34) & "Hex2Library" & Chr(34) &  " will convert and add a selected .hex file to the 3M Library." & VbCr
      MenuPrompt = MenuPrompt & VbCr & "Select Operation :" & vbCrLf
      Cchoice = Sc.ButtonBox(MenuPrompt, VbQuestion, "StarGlitch: Select operation or click X to exit-->", "Clean Card", "Write Hex", "3M Library", "Hex2Library", "Exit")
      Select Case Cchoice
        Case "0"
          Call ShutDownCard()
        Case "1" ' Clean
         if(GetATR = False) then
             Call OopsLooped()
         Else
             Sc.Write("A1")
             Call LoadBootStrap()
             Sc.Write("A1")
             Call CleanCard()
             Call FixAltEE()
             Call ShutDownCard()
         End If

        Case "2" ' Write Hex
            Call WriteHex()
            Call ShutDownCard()
        Case "3" ' Apply 3M
            Call Install3m()
            Call ShutDownCard()
        Case "4" ' Add Hex to Library
            Call ReadHex()
            Include(mfile)   'Load Master 3M file Names to memory
            Include3m(mfile) 'Load Master 3M file to memory
        Case "5" ' Exit
            Call ShutDownCard()
        End Select
Case "4" ' Read Lokt
    glttl = 1
    chglch =1
      Call SetDacFile()
      If DacFileName = "" Then Exit Sub
      Call GetDacArray() ' Sets DacSet(i) to each Dac Set
      If i < 1 Then Exit Sub
      glttl = 1
      chglch =1
      d = 0
      GetNextDac(d)  ' Get and cycle to next set in the series
      Call UnloopBootCard("Read")
      Sc.Write("A0")
Call ShutDownCard()

Case "5" ' Unloop/Write
    Randomize Timer
    MenuPrompt = "Select:" & VbTab & VbTab & "Select Existing Dac Profile" & VbCr
    MenuPrompt = MenuPrompt & "DacFinder:" & VbTab & "Generate a new Dac Profile" & VbCr
    MenuPrompt = MenuPrompt & "Your card is looped or you wouldn't be here, Right?" & VbCr
    MenuPrompt = MenuPrompt & "DacFinder will glitch your card numerous times,looking for responses." & VbCr
    MenuPrompt = MenuPrompt & "You should be able to unloop it afterwards." & VbCr
    CChoice = Sc.ButtonBox(MenuPrompt, VbQuestion, "StarGlitch: Card is Looped - Click X to exit-->", "Select", "Dac Finder")
    If CChoice = 0 Then Exit Sub

    If CChoice = 1 Then
        Call SetDacFile()
        Call GetDacArray() ' Sets DacSet(i) to each Dac Set
        If i < 1 Then Exit Sub
            glttl = 1
            chglch =1
            d = 0
            GetNextDac(d)  ' Get and cycle to next set in the series
            Call UnloopBootCard("Write")
            Sc.Write("A0")
        If chk2000 Then
          Call Check2000()
        End If
    Call ShutDownCard()
    End If
    If CChoice = 2 Then
        DacFileName = ""
        DacFileName = Fs.FileSaveDialog(DacFilter, "Please select a name for this Dac(*.dac) File", "MyLoader.dac")
        If DacFileName <> "" Then
            OutFile = Fs.FileCreate(DacFileName)
            Fs.FileClose(OutFile)
            Call GenDac()
            sc.print "New Dac Set Generated sucessfully as " & DacFileName & " with " &MaxDacs& " entries" & VbCr
        End If
     End If
'
'    Call SelLoader()
'    glttl = 1
'    chglch =1
'    If dacset > 0 Then
'        Call UnloopBootCard("Write")
'        Sc.Write("A0")
'    End If
'Call ShutDownCard()
'If chk2000 Then
'  Call Check2000()
'  Call ShutDownCard()
'End If

Case Else
    MenuPrompt = "Invalid Input!" & vbCrLf
'    Exit Sub
End Select

Loop While True = True
End Sub ' End Sub Main()
' ****************************** End Main Sub **************************************

Function setuploader()
sc.print "Setting up for unlooper." & VbCr
    Wx.BaudRate = 115200
    Wx.ResetBaudRate = 115200
    Wx.Parity = 0                    ' 0 = None, 1 = Odd, 2 = Even, 3 = Mark, 4 = Space
    Wx.StopBits = 0                  ' 0 = 1 stop bit, 1 = 1.5 stop bits, 2 = 2 stop bits
    Wx.DTRControl = 0                ' Initial state of DTR  0 = off, 1 = on
    Wx.RTSControl = 1                ' Initial state of RTS  0 = off, 1 = on
    Wx.ResetDelay = 0                ' In microseconds
    Wx.ByteDelay = 0                 ' In microseconds
    Wx.RxByteTimeout = 200           ' In milliseconds
    Wx.ResetMode = 2                 ' 0 = No Resets, 1 = ISO Reset (Expect a ATR), 2 = Device Reset (No ATR)
    Wx.ResetLine = 1                 ' 0 = Toggle RTS for Reset, 1 = Toggle DTR for Reset
    Wx.ByteConvention = 1            ' 0 = Inverse, 1 = Direct
    Wx.FlushEchoByte = 0             ' 0 = no flush, 1 = flush - A Phoenix interface will echo each byte transmitted.
    Wx.FlushBeforeWrite = 0          ' 0 = no flush, 1 = flush - Flush the receive buffer before each write to strip off Null bytes.
    Wx.IgnoreTimeouts = 1            ' 0 = Abort script on a receive timeout, 1 = Ignore all receive timeouts
    Wx.ResetAfterTimeout = 0         ' 0 = Don't reset after a timeout, 1 = do a reset after a timeout  - Not used if "IgnoreTimeouts=0"
    Wx.LogTransactions = 0           ' 0 = Don't log transactions, 1 = log transactions
    Wx.DisplayUSW = 0                ' Display USW after script complete 0 = no, 1 = yes
    Wx.DisplayFuse = 0               ' Display Fuse after script complete 0 = no, 1 = yes

End function



Sub LoadBootStrap()

    Dim RetValue
    Dim GotInput
    Dim Counter
    Dim Attempts
    Dim OldDelay
    dly4c = dly4cmin
    Counter = 0
    Attempts = 1
    OldDelay = loopdelay
'    DAC4C = &h95

    Call IsCardPresent()
Sc.Write("A1")
ScriptStart = Now
Sc.Print "----------------------------------------------------------------" & vbCr
Sc.Print "Start: " & ScriptStart & vbCr     'main screen
Sc.Print "----------------------------------------------------------------" & vbCr
    Do

    For DAC4C = Dac4cmax to Dac4cmin step -1

        If dly4c > dly4cmax Then
          dly4c = dly4cmin
        Else
          dly4c = dly4c + 1
        End If
        Sc.Write("A1")
        GotInput = False
        If loopdelay > maxloopdelay Then
          loopdelay = minloopdelay
        End If
        Call Sc.ProgressBox ("Please be patient while Glitching...     Attempts:        " & Attempts & vbcr & "                                                           DAC4C:        " & HexString(DAC4C,2), 1, 999, "StarGlitch")

        Sc.Write("06100E10019300") 'was Sc.Write("06100E10019300")
        Sc.Delay(80) ' was 80
        Sc.Read(&h02)
            RetValue = Sc.GetByte(&h01)
            Sc.Read (RetValue)

        Sc.Write("B0")
        Sc.Write(HexString(DAC4C,2))
       'INS 48
'        Sc.Write("0B 15 C4 48 48 FF 56 B9 70 C9 08 00")
        Sc.Write("0C 11 15 C4 48 48 FF 56 B9 70 C9 08 00")
        'Sc.Write("0C " & dly4c & " 15 C4 48 48 FF 56 B9 70 C9 08 00")
       'INS 2E
'       Sc.Write("0B 15 C4 48 2E FF 56 B9 70 C9 08 00")
        'INS 4C
'       Sc.Write("0B 15 C4 48 4C FF 56 B9 70 C9 08 00")
'        Sc.Write("0915C448" & HexString(Ins,2) & HexString(InsParam1,2) & HexString(InsParam2,2) & HexString(InsLen,2) & "8000")
'       5C glitch
'        Sc.Write("121AC4485C0000048020003F09830B" & HexString(Delay5C,2) & HexString(Delay,2) & "8100")

        Sc.Delay(loopdelay) ' was 80
        If sc.BytesInBuffer > 0 then
            Sc.Read(&h02)
        else
            Call Sc.ProgressBox ("", 0, 0, "")
            Call OopsLooped()
            Sc.Write("A0")
            Exit Sub
        end if

        RetValue = Sc.GetByte(&h01)
        Sc.Read (RetValue)
    Sc.Write("B0 80")
        Sc.Write("38F00000000069FFFFFFFF523FFD2284E172400772FF14C5E2AB0100C3DA07F88C010000000000000000000000000000000000200011098000")
        Sc.Read(&h02)

        If Sc.GetByte(&h0) = &h38 Then
            If Sc.GetByte(&h01) = &h01 Then
                Sc.Read(&h01)
                If Sc.GetByte(&h0) = &h84 Then
                    GotInput = True
                    Exit For
                Else
                    GotInput = False
                End If
            End If
        End If

        Counter = Counter + 1
        Attempts = Attempts + 1
    Next
    loopdelay = loopdelay + 5
    sc.print "Trying Loop Delay: " & loopdelay & VbTab & " 4C Delay: " & dly4c & VbCr
    Loop Until GotInput = True

    Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800718753F07D307D807C5E2AB0060C3DA07F8726015D404E700D57640070DD3078ECEFB70012ADA07F700C49E2A00FA00")
    Sc.Read(&h02)
    Sc.Print "----------------------------------------------------------------" & vbCr
    Sc.Print Software & " Bootstrap Loaded using 4C Glitch Dac value : " & Hexstring(DAC4C,2) & VbTab & " 4C Delay: " & dly4c & VbCr
    Sc.Print "----------------------------------------------------------------" & vbCr
    Call Sc.ProgressBox ("", 0, 0, "")
    ScriptEnd = Now
    loopdelay = OldDelay
  Sc.Write("A0")
  BootActive = 1
End Sub

Sub OopsLooped1()
    Dim ErrorString
    Sc.Write("A0")              ' Turn the LED off
    Sc.Write("020200")          ' Shutdown card
    BootActive = 0
    ErrorString = "Card is not returning a valid HU ATR." &VbCr & "The card may not be fully Inserted" & VbCr &"or the card contacts may be dirty." & VbCr & "If everything is ok then the card is looped"&VbCr& "and you must Unloop the card first !"
    Sc.MsgBox ErrorString, vbCritical
End Sub

Sub GetSaveFile()
Fs.FileClose(InFile)
Fs.FileClose(OutFile)
    FileName = Fs.FileSaveDialog(FileFilter, "              Please select a name to save the new bin file as...", "Default.bin")
    If FileName <> "" Then
        OutFile = Fs.FileCreate(FileName)
        HUBinFile = True
    Else
         BootActive = 0
         Sc.Write("A0")              'turn the LED off
         Sc.Write("020200")          'shut down card
         Sc.Delay(100)
         Sc.Read(&h02)
         HUBinFile = False
    End If
End Sub

Sub GetWriteFile()
Fs.FileClose(InFile)
Fs.FileClose(OutFile)
    Dim FileSize
    FileName = Fs.FileOpEndialog(FileFilter, "    Please select a valid HU Eprom (*.bin) file to write to the card", "Default.bin")

    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else

            InFile = Fs.FileOpen(FileName, fsoOpenRead)
        End If
    End If

    FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_End)

    If FileSize <> "8192" Then
        Sc.MsgBox("This file is NOT a valid HU bin file" & vbcr & "or the bin file you are trying to open" & vbcr & "is being used by another program")
        HUBinFile = False
        FileName = ""
        Call ShutDownCard()
        Exit Sub
    Else
        HUBinFile = True
    End If
End Sub ' End Getfile

Sub WDTMR()
    Dim RetValue
    'Sc.Write("05150E208000")'SET WDTMR
    Sc.Write("05150E108000")
    Sc.Delay(80)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read(RetValue)
End sub

Sub IsCardPresent()
    Dim RetValue
    Dim GotInput


Do
  Sc.Write("A0")                ' turn the LED off
  Sc.Write("80")                'Is card present?
  Sc.Delay(100)
  If Sc.BytesInBuffer > 0 then
  Sc.Read(&h01)
  RetValue = Sc.GetByte(0)
  end if

  If RetValue = &h0 then
    Call Sc.ProgressBox ("No Card Detected!" & VbCr & "Please insert your card.....", 1, 999, "StarGlitch")
    GotInput = False
  Else
    If RetValue = &hFF then
      GotInput = True
    else
      If RetValue <> &h0 or RetValue <> &hFF then
      Sc.Write("A0")                ' turn the LED off
      Sc.Write("020200")            ' Shutdown card
      BootActive = 0
      Sc.Delay(100)
        If Sc.BytesInBuffer > 1 then
        Sc.Read(&h02)
        GotInput = False
        else
        GotInput = False
        end if
      end if
    End if
  End if
Loop Until GotInput = True
Call Sc.ProgressBox ("", 0, 0, "")
end sub

Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetValue
    Dim CurLen
    RetValue=Hex(Number)
    CurLen=Len(RetValue)
    If CurLen<Length Then
        RetValue=String(Length-CurLen,"0") & RetValue
    End If
    HexString=RetValue
End Function

Function Hex2Dec(HexNumber)
    ' This function takes 1 argument, a string containing a hex value of any digit length
    ' and returns the decimal equivalent
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function

Function GetATROld()
verbose = 0
    Dim temp
    Call Sc.ProgressBox(0,0,0,0)
    Sc.Write("06100E10019300")
    Sc.Delay(100)
    Sc.Read(&h02)
    temp = Sc.GetByte(&h01)
    Sc.Read (temp)
    if(temp <> 20) then
        GetATR = False
    else
        GetATR = True
    End if
End Function

Sub RndGr()
Dim g1,g2,g3,g4,g5,g6
Dim dly,v
Randomize TIMER
sc.verbose = 0
sc.print "~~~Scrambling~~~"
  for v = 1 to 800
    g1 = INT(RND * &hFF)
    g2 = INT(RND * &hFF)
    g3 = INT(RND * &hFF)
    g4 = INT(RND * &hFF)
    g5 = INT(RND * &hFF)
    g6 = INT(RND * &h4F) + &h80
    dly= INT(RND * &h200)
    sc.write("B0" & HexString(g6,2))
    sc.write("111f0120" & HexString(dly,4) & "0c" & HexString(g1,2) & "0c" & HexString(g2,2) & "0a" & "0c" & HexString(g3,2) & "0c" & HexString(g4,2) & "0c" & HexString(g5,2) & "00")
    sc.read(2)
  next
End Sub

Sub OopsLooped()
Sc.MsgBox("Card is not returning a valid HU ATR." &VbCr & "The card may not be fully Inserted" & VbCr &" or the card contacts may be dirty." & VbCr & "If everything is ok then the card is looped"&VbCr& "You must Unloop the card before using this option ")

End Sub

Sub ProgUpdate(pg,atrlock)
    Dim mtries
    Dim i
    Dim Msg
    Dim ElapTime
    Msg="Elapsed Time: " + FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) + " min." & VbCr & "Glitching for ATR..." & VbCr
    if atrlock = 1 Then
      Msg="Elapsed Time: " + FormatNumber((CDbl(Now) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) + " min." & VbCr & "ATR Locked!  Locking D1,5,6,7,8" & "  Trying for Bootstrap..."
      Msg=Msg+VbCr & ATR
    End if
    Call Sc.ProgressBox(Msg,pg,33,"StarGlitch")

End Sub

Function Chk4Card()
    Dim tmp
    sc.write("80")
    sc.delay(50)
  if sc.read(1) = 1 then
    tmp=sc.getbyte(0)
    If tmp = &h0 then
        Chk4Card=0
        sc.write("A0")
        Call Sc.ProgressBox(0,0,0,0)
        sc.print "Card Removed. Please Insert Card!" & VbCr
    else
        Chk4Card=1
    End if
  End if
End Function

Function ChipVer()
    ChipVer = 1
    sc.write("90")
    delay(80)
    if sc.read(4) <> 4 then
        ChipVer = 0
        Exit Function
     End if
    if getbyte(0) <> &h55 then ChipVer = 0
    if getbyte(1) <> &h4c then ChipVer = 0
    if getbyte(2) <> &h34 then ChipVer = 0
    if getbyte(3) <> &h53 then ChipVer = 0
End Function

Function GetAtmelVersion()
    Dim I
    Sc.Write("90")
    Sc.Read(4)
    For I = 0 to 3
        GetAtmelVersion = GetAtmelVersion & Chr(Sc.GetByte(I))
    Next
End Function

Function HexToDec(HexNumber)
    ' This function takes a string as input, assuming it to be a Hexidecimal string,
    ' and converts it to a decimal number.
    HexNumber=Replace(UCase(HexNumber)," ","")
    HexToDec=CLng("&H"+HexNumber)
End Function

Sub Card_Reset()
    Dim RetValue
    Sc.Write("A0")     ' Turn the LED off if it is on
    Sc.Write("020200") ' Power down the card
    BootActive = 0
    Sc.Delay(300)     ' Wait about 1 second
    Call Sc.Reset()    ' Power up the card
    RetValue=Sc.Flush()  ' Flush the receive buffer
End Sub

Function ReadInfo()

    Dim CAMIDHex
    Dim CAMIDDec
    Dim USWHex
    Dim USWDec
    Dim DSWHex
    Dim DSWDec
    Dim GuideHex
    Dim GuideDec
    Dim TimeHex
    Dim TimeDec
    Dim RatingHex
    Dim RatingDec
    Dim infobox
    Dim actyear
    Dim actmonth
    Dim ActDateHex
    Dim ActDateDec
    Dim PPVLimitHex
    Dim PPVLimitDec
    Dim SpentHex
    Dim SpentDec
    Dim Fuse
    Dim IRDHex
    Dim IRDDec
    Dim RetValue

   if GetAtr() = 0 Then
   Call Sc.Msgbox ("Error, Card has returned a partial ATR or NO Atr!")
   Exit Function
    End if

    Sc.Write("0B 1A 0E10 C4 48 2A 00 00 80 BF 00")
    Sc.Delay(100)
    Sc.Read(&h02)
       RetValue = Sc.GetByte(&h01)
       Sc.Read (RetValue)

    USWHex = HexString(GetByte(29), 2) & HexString(GetByte(30), 2)

    USWDec = Hex2Dec(USWHex)
        if len(USWDec) < 4 then
           USWDec = "000" & USWDec
        end if

    DSWHex = HexString(GetByte(33), 2) & HexString(GetByte(34), 2)

    DSWDec = Hex2Dec(DSWHex)
        if len(DSWDec) < 4 then
           DSWDec = "000" & DSWDec
        end if

    RatingHex = HexString(GetByte(11), 2)
    RatingDec = Hex2Dec(RatingHex)
        if len(RatingDec) = 1 then
            RatingDec = "0" & RatingDec
        end if

    SpendingLimitHex = HexString(GetByte(12), 2) & HexString(GetByte(13), 2)

'     sc.print VbCr & "Spending Limit Hex " & SpendingLimitHex & VbCr
    SpendingLimitDec = "$" & int(Hex2Dec(SpendingLimitHex)/100)
    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    if ActDateHex = "0000" then
        ActDateDec = "Not Active"
    else
    ActDateHex = HexString(GetByte(14), 2) & HexString(GetByte(15), 2)
    ActYear = 2000 + left(((GetByte(14) - 95) / 12 * 100),1)
    ActMonth = round((right(int((((GetByte(14) - 95)/12))*100),2)/100)*12)
    ActDateDec = ActMonth & "." & GetByte(15) & "." & ActYear
    end if
    Fuse = HexString(GetByte(1), 2) & hexstring(GetByte(1) xor &hFF,2)
    IRDHex = Hexstring(GetByte(21) xor GetByte(25),2) & Hexstring(GetByte(22) xor GetByte(26),2) & Hexstring(GetByte(23) xor GetByte(27),2) & Hexstring(GetByte(24) xor GetByte(28),2)
        if len(IRDHex) <= 4 then
            IRDHex = "0000" & IRDHex
        end if
    IRDDec = Hex2Dec(IRDHex)
        if IRDDec <= 1 then
            IRDDec = "0000000" & IRDDec
        end if

    Sc.Write("02BF00")
    Sc.Delay(100)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)
    PPVLimitHex = HexString(Sc.GetByte(23), 2) & HexString(Sc.GetByte(24), 2)
    PPVLimitDec = "$" & int(Hex2Dec(PPVLimitHex)/100)
    SpentHex = HexString(Sc.GetByte(21), 2) & HexString(Sc.GetByte(22), 2)
    SpentDec = "$" & int(Hex2Dec(SpentHex)/100)
    Sc.Write("028200")
    Sc.Delay(100)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)
    Sc.Write("08C448580000179B00")
    Sc.Delay(100)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)
    CAMIDHex = HexString(GetByte(2), 2) & HexString(GetByte(3), 2) & HexString(GetByte(4), 2) & HexString(GetByte(5), 2)
    CAMIDDec = Hex2Dec(CAMIDHex) & "x"
    GuideHex = HexString(Sc.GetByte(13), 2)
    GuideDec = Hex2Dec(GuideHex)
        if GuideDec = 0 then
            GuideDec = "00"
        end if
    TimeHex = HexString(Sc.GetByte(11), 2)
    TimeDec = Hex2Dec(TimeHex)

    ' Print all info here
    infobox = "ATR  : " & ATR & vbCrLf & vbcrlf
    infobox = infobox & "Card Information"  & vbtab & vbtab & "Hex" & vbtab & vbtab &"Decimal" & vbCr
    infobox = infobox & "------------------------------------------------------------------------------------" & vbCr
    infobox = infobox & "Card ID(CAM)" & vbtab & vbtab & CAMIDHex & vbtab & CAMIDDec & vbCr
    infobox = infobox & "IRD ID"  & vbtab & vbtab & vbtab & IRDHex & vbtab & IRDDec & vbCr
    infobox = infobox & "Fuse Byte" & vbtab & vbtab & vbtab & Fuse & vbtab & vbtab & Hex2Dec(Fuse) & vbCr
    infobox = infobox & "Guide Byte"  & vbtab & vbtab & GuideHex & vbtab & vbtab & GuideDec & vbCr
    infobox = infobox & "Time Zone"  & vbtab & vbtab & TimeHex & vbtab & vbtab & Hex2Dec(TimeHex) & vbCr
    infobox = infobox & "Rating"  & vbtab & vbtab & vbtab & RatingHex & vbtab & vbtab & RatingDec & vbCr
    infobox = infobox & "USW"  & vbtab & vbtab & vbtab & USWHex & vbtab & vbtab & USWDec & vbCr
    infobox = infobox & "DSW"  & vbtab & vbtab & vbtab & DSWHex & vbtab & vbtab & DSWDec & vbCr
    infobox = infobox & "Activation Date"  & vbtab & vbtab & ActDateHex & vbtab & vbtab & ActDateDec & vbCr
    infobox = infobox & "PPV Spending Limit"  & vbtab & vbtab & PPVLimitHex & vbtab & vbtab & PPVLimitDec & vbCr
    infobox = infobox & "Amount Purchased"  & vbtab & vbtab & SpentHex & vbtab & vbtab & SpentDec & vbCr
    infobox = infobox & "User Spending Limit"  & vbtab & vbtab & SpendingLimitHex & vbtab & vbtab & SpendingLimitDec & vbCr
    infobox = infobox & "-------------------------------------------------------------------------------" & vbCrLf
    Call Sc.msgbox (infobox)
    ReadInfo = 1
End Function

'Function ReceiveATR()
Function GetATR()
Dim i
Dim RetValue

    Sc.Write("06100E10019300")                        ' this command receives the ATR of an HU card
    Sc.Delay(100)
    If sc.BytesInBuffer > 0 then
        Sc.Read(&h02)
    else
        Call Sc.ProgressBox ("", 0, 0, "")
        Call OopsLooped()
        Exit Function
    end if
'    Sc.Read(&h02)                                     ' see if command was accepted
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)                                 ' read the 20 bytes
ATR = ""
    For i = 0 to RetValue -1
        ' sc.delay(20)
        ATR = ATR &  HexString(Sc.GetByte(i), 2) & " " ' 20 bytes of ATR
    Next
    If(RetValue < 20) Then
        GetATR = 0
    Else
        GetATR = 1
    End If
End Function

Sub ReadCard()
    Dim EEPROM
    Dim TByte
    Dim Address

    EEPROM = 0
    Address = 8192   ' For EEPROM Read
    'Address = 49152 ' For ROM Read

    Sc.Write("A2")

    Call ExtractCardInfo()
    Call WriteViaLoader("24A4","00000000","E")    ' Clear IRD
    Call WriteViaLoader("2460","00000000","E")    ' Clear IRD

    For EEPROM = 0 to 128    ' 128 for EEPROM, 256 for ROM
        Sc.Write("06C23F" & HexString(Address,4) & "BF00")
        Sc.Delay(50)
        Sc.Read(&h02)
        Sc.Read (&h40)

        Call Sc.ProgressBox ("Reading EEPROM Memory...", EEPROM, 128, "StarGlitch") ' For EEPROM Read
        'Call Sc.ProgressBox ("Reading ROM Memory...", EEPROM, 256, "StarGlitch") ' For ROM Read
Do

Call WDTMR()

Sc.Write("06C23F" & HexString(Address,4) & "BF00")
'Sc.Delay(100)
Sc.Read(&h02)
        'RetValue = Sc.GetByte(&h01)
        Sc.Read (&h40)
Call Sc.ProgressBox ("Reading EPROM memory...", EEPROM, 128, "StarGlitch") ' For EPROM Read
'Call Sc.ProgressBox ("Reading ROM memory...", EEPROM, 256, "StarGlitch") ' For ROM read
EEPROM = EEPROM + 1
Address = Address + 64
TByte = ""
For TByte = 0 to 63
            call Fs.FilePutc(OutFile, Sc.GetByte(TByte))
            next
loop until EEPROM = 128 ' For EPROM Read
'loop until EEPROM = 256 ' For ROM read
Fs.FileClose(OutFile)
Next
Call Sc.ProgressBox ("", 0, 0, "")
sc.msgbox ("File saved as " & FileName)
sc.print "Read Sucessful!" & VbCr & "File saved as " & FileName & VbCr
End Sub

Sub WriteCard(Chunk)

    Dim EEPROM
    Dim TByte
    Dim Address
    Dim EEPROMBytes
    Dim Multiplier

    Address = 8192

    If Chunk = 64 Then
        Multiplier = 128
    Else
        Multiplier = 256
    End If

    Sc.Write("A1")

    Call Fs.FileSeek(InFile, 0, fsoSEEK_SET)

    Call WDTMR()

    For EEPROM = 1 to Multiplier
        EEPROMBytes = ""
        For TByte = 1 to Chunk
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
        Next

        If Chunk = 64 Then
            Sc.Write("49C2BF" & HexString(Address,4) & "FF" & EEPROMBytes & "0EFF8000")

            Sc.Read(&h03)
        Else
            Sc.Write("28E29F" & HexString(Address,4) & EEPROMBytes & "0EFF8000")

            Sc.Read(&h03)
        End If

'        Call Sc.ProgressBox ("Writing EEPROM Memory...", EEPROM, Multiplier, "  Writing to card...")
        Call Sc.ProgressBox ("Writing EEPROM memory..." & vbcr & HexString(Address,4) & ":  " & vbtab & EEPROMBytes , EEPROM, 255, "StarGlitch")
        Address = Address + Chunk
    Next

    Fs.FileClose(InFile)
    Sc.Print VbCr & "File Written to Card :   " & FileName & VbCr
    Call Card_Reset()

    Call Sc.ProgressBox ("", 0, 0, "")

End Sub

Sub WriteViaLoader(address,data,options)

    ' Write up to 32 bytes at a time

    Dim dLen
    Dim tlen
    Dim parm1
    Dim parm2
    Dim i,t
    Dim datalen
    Dim addresslow
    Dim tmp
    Dim Xored
    Dim datarray(31)
    Dim datalength

    dLen = Len(data)
    dLen = dLen / 2
    tLen = Len(data)
    tLen = tlen + 16
    tLen = tlen / 2
    tLen = HexString(tlen,2)
    parm1 = Hex(dLen + &hC2)
    parm2 = Hex(dLen + &h7F)

    If Ucase(options) = "E" Then

        'Convert and Split up data String to an array

        t = 0
        For i = 1 To Len(data) Step 2
            tmp = Mid(data, i, 2)
            datarray(t) = (HexToDec(tmp))
            t = (t + 1)
        Next

        addresslow = HexToDec(Mid(address, 3, 2))     'Get lower byte for offset
        addresslow = (addresslow And &h7)             'Strip bits for offset 0-7

        If UBound(datarray) > 32 Then
            Exit Sub
        End If

        datalength = (Len(data) / 2)

        'Encrypt
        t = 0
        For i = addresslow To datalength + addresslow - 1
                Xored = Xored & HexString(datarray(t) Xor HexToDec(XoredByte(i)), 2)
            t = (t + 1)
        Next

        data = Xored
    End if
    Sc.Print address & VbTab & data & VbCr
    Sc.Write(tLen & " " & parm1 & " " & parm2 & " " & address & " " & data & " " & "0EFF8000")
    Sc.Read(&h03)

End Sub

Sub ExtractCardInfo()

    Dim RetValue
    Dim XByte(15)

    Call WDTMR()
    Sc.Write("06C20724C08800")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    XByte(0) = Sc.GetByte(0)
    XByte(1) = Sc.GetByte(1)
    XByte(2) = Sc.GetByte(2)
    XByte(3) = Sc.GetByte(3)
    XByte(4) = Sc.GetByte(4)
    XByte(5) = Sc.GetByte(5)
    XByte(6) = Sc.GetByte(6)
    XByte(7) = Sc.GetByte(7)

    Sc.Write("06C20726588800")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    XByte(8) = Sc.GetByte(0)
    XByte(9) = Sc.GetByte(1)
    XByte(10) = Sc.GetByte(2)
    XByte(11) = Sc.GetByte(3)
    XByte(12) = Sc.GetByte(4)
    XByte(13) = Sc.GetByte(5)
    XByte(14) = Sc.GetByte(6)
    XByte(15) = Sc.GetByte(7)

    Sc.Write("06C20B2AE48C00")
    Sc.Read(&h02)
        RetValue = Sc.GetByte(&h01)
        Sc.Read(RetValue)

    Key12Byte(0)  = Sc.GetByte(&h0)
    Key12Byte(1)  = Sc.GetByte(&h01)
    Key12Byte(2)  = Sc.GetByte(&h02)
    Key12Byte(3)  = Sc.GetByte(&h03)
    Key12Byte(4)  = Sc.GetByte(&h04)
    Key12Byte(5)  = Sc.GetByte(&h05)
    Key12Byte(6)  = Sc.GetByte(&h06)
    Key12Byte(7)  = Sc.GetByte(&h07)
    Key12Byte(8)  = Sc.GetByte(&h08)
    Key12Byte(9)  = Sc.GetByte(&h09)
    Key12Byte(10) = Sc.GetByte(&h0A)
    Key12Byte(11) = Sc.GetByte(&h0B)

    XORedByte(0)  = HexString(XByte(0) XOR XByte(8), 2)
    XORedByte(1)  = HexString(XByte(1) XOR XByte(9), 2)
    XORedByte(2)  = HexString(XByte(2) XOR XByte(10), 2)
    XORedByte(3)  = HexString(XByte(3) XOR XByte(11), 2)
    XORedByte(4)  = HexString(XByte(4) XOR XByte(12), 2)
    XORedByte(5)  = HexString(XByte(5) XOR XByte(13), 2)
    XORedByte(6)  = HexString(XByte(6) XOR XByte(14), 2)
    XORedByte(7)  = HexString(XByte(7) XOR XByte(15), 2)
    XoredByte(8)  = XoredByte(0)
    XoredByte(9)  = XoredByte(1)
    XoredByte(10) = XoredByte(2)
    XoredByte(11) = XoredByte(3)
    XoredByte(12) = XoredByte(4)
    XoredByte(13) = XoredByte(5)
    XoredByte(14) = XoredByte(6)
    XoredByte(15) = XoredByte(7)
    XoredByte(16) = XoredByte(0)
    XoredByte(17) = XoredByte(1)
    XoredByte(18) = XoredByte(2)
    XoredByte(19) = XoredByte(3)
    XoredByte(20) = XoredByte(4)
    XoredByte(21) = XoredByte(5)
    XoredByte(22) = XoredByte(6)
    XoredByte(23) = XoredByte(7)
    XoredByte(24) = XoredByte(0)
    XoredByte(25) = XoredByte(1)
    XoredByte(26) = XoredByte(2)
    XoredByte(27) = XoredByte(3)
    XoredByte(28) = XoredByte(4)
    XoredByte(29) = XoredByte(5)
    XoredByte(30) = XoredByte(6)
    XoredByte(31) = XoredByte(7)

End Sub

Sub FFTheCard()
Dim FFsel
Dim FFmsg
      FFmsg = "Would you like to FF the Card?" & vbCrLf
      FFmsg = FFmsg & "Some say FFing the Card may Unloop the Card faster..." & vbCrLf
      FFsel=Sc.ButtonBox(FFmsg,  vbDefaultButton2 + vbQuestion, "                  FFing Option", "Yes", "No")
      If FFsel = 1 then
    Dim RetValue
    Dim I
    Sc.Write("A1")
    Sc.Write("B0 80")
    For I = &hA0 To &hD0
        Call Sc.ProgressBox("FFing The Card", I-&h9F, &h30, "                                  FF The Card")
        Sc.Write("0a 01 20 04 94 09 20 00 " + Hex(I) + " 09 00")'
        Sc.Read(2)
        RetValue = Sc.GetByte(1)
        Sc.Delay (100)
    Next
    Call Sc.ProgressBox("",0,80,"")
    Else
    End If
Sc.Write("A0")
End Sub

' ************************************************* Unlooper
Function UnloopBootCard(Action)
Dim Progcnt
Dim OldDelay

'If not Action = "Clean" Then
'    MenuPrompt = dacmsg & "We are now ready to boot the card using the advanced methods." & vbCr & VbCr
'    MenuPrompt = MenuPrompt & "If you are reading a Subbed Card, I recommend you exit and read it using" & vbCrLf
'    MenuPrompt = MenuPrompt & "' Read/Write 4C ' first ! Press 'OK' to Continue or Exit to return to main menu." & vbCrLf
'    Choice = Sc.ButtonBox(MenuPrompt, VbInformation, "StarGlitch: Ready for Advanced Boot", "OK", "Exit")
'
'    Select Case Choice
'    Case "0"
'      Exit Function
'
'    Case "1"
'    Call FFTheCard()
'    Sc.Reset
'    Case "2"
'      Call ShutDownCard()
'      Exit Function
'
'    Case Else
'        MenuPrompt = "Invalid Input!" & vbCrLf
'    End Select
    ' **************************************************************

    If Action = "Write" Then
    Call GetWriteFile()
    Else
    Call GetSaveFile()
    End If
    If (FileName = "") Then
      sc.print "No Filename" & VbCr
      Exit Function
    End If
'End If
    Dim cnt,b, RetValue, kk,katr
    Dim cter, glcnt, mtries,kp
    Dim glsin ' For ATR Lock

    Dim respcnt, bestcnt, thisdac, prefdac, prefdacmsg, preflock, dacmax, BootSel ' Smart Dac Stuff

   RANDOMIZE TIMER

    atrlock=0
    cter=0
    glcnt=0
    mtries = 0
    sc.verbose = 0
    daccnt = 0
    prefdac = 0
    respcnt = 0
    bestcnt = 0
' Sc.Print dacmsg & VbCr & "D1-D9 values: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & VbCr
' Sc.Print "================================================================" & VbCr

bestcnt = 0
respcnt = 0
d0      = 0
uloop = 0
loopdelay = minloopdelay
thisdac = dacset
prefdacmsg = "No Preference"
OldDelay = loopdelay
' Call RndGr()
Sc.Write("A1")
ScriptStart = Now
Sc.Print "----------------------------------------------------------------" & vbCr
Sc.Print "Start: " & ScriptStart & vbCr     'main screen
Sc.Print "----------------------------------------------------------------" & vbCr

sc.print "ATR Lock" & VbTab & "GlitchType" & VbTab & "# Glitches" & VbTab & "Loopdelay" & VbTab & "Dac#" & VbTab & "D1 - D9" & VbCr
sc.print "--------" & VbTab & "--------" & VbTab & "--------" & VbTab & "---------" & VbTab & "----" & VbTab & "-------" & VbCr

Do

gldly = INT(RND * 100) + 80
' gldly = 80
If loopdelay > maxloopdelay Then
  loopdelay = minloopdelay
End If
If atrlock > 0 Then  ' We have ATR lock
  glsin = "+"
Else
  glsin = "."
End If
katr=0
mtries = mtries + 1
'  Sc.ClearOutputWindow
' Sc.Print glsin
daccnt = daccnt + 1

    boot = 0
    call ProgUpdate(kp,atrlock)
    sc.verbose = 0
    delay(loopdelay)
    if Chk4Card() = 0 then
        Boot=0
        ' Exit Function
    End if
    delay(loopdelay)
    sc.write("B0" & HexString(D1,02))
    glttl = glttl + 1
    Sc.Write("020200")
    BootActive = 0
    Sc.Delay(loopdelay)
    Sc.Read(&h02)
    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")
    Sc.Read(&h02)
    cter=cter+1
    cnt=0
    Sc.Write("028000")

    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)

    if cnt = 1 then sc.read(1)

    End if

    if cter > 75 then
        glcnt = glcnt + 1
        cter = 0
        atrlock = 0
    End if

    if cnt > 0 then
       kp=kp+1
        respcnt = respcnt + 1 ' smart dac counter
        If kp = 1 Then
'        Sc.Print VbCr & "Good, We are getting card responses...." & VbCr & "Glitching"
        End If
       if kp >33 then kp = 33
         for b = 0 to 10      ' 11 cycles
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
         else
            cnt = 0
         End if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
'            sc.print VbCr & "kk is " & kk & VbCr ' Debug
            if kk = &h38 Then
               Sc.Write("028000")
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                   Sc.Read(cnt)
                      if(sc.getbyte(0)) = &hb0 then
                         chglch = chglch + 1
                         d0=d0+1
                         looppref = 1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         ' Sc.Print VbCr & "ATR Locked with D1-D9 values: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & VbTab & "Glitch Attempt " & glttl & VbCr
                         exit for
                       End if
                    End if
              End if
         End if
      next

    if katr = 1 then
       sc.write("B092")
       ' sc.write("B0"  & HexString(D4,02)) ' Orig
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       if Sc.Read(&h02) > 1 Then
          respcnt = respcnt + 1 ' smart dac counter
          cnt = sc.getbyte(1)
       else
          cnt = 0
       End If

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          If Sc.Read(&h02)<2 then Sc.Read(&h02)
          ' Optional 2 Glitches: Vorlon001 contribution to improve bootstrap versatility
          If GlType = 1 Then
            ' Glitch Type 1
            Sc.Write("11c060200340042005590320" & HexString(D9,04) & "0d010000") ' another option
          ElseIf GlType = 2 Then
            ' Glitch Type 2
            Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
            ' Sc.Write("11c060200" & Hexstring (D2,02) & "7042005590320" & HexString(D9,04) & "0d010000")
          ElseIf GlType = 3 Then
            ' Glitch Type 3
            Sc.Write("11c060200" & Hexstring (D2,02) & "0042001500320" & HexString(D9,04) & "0d010000")
          ElseIf GlType = 4 Then
            ' Glitch Type 4
            Sc.Write("11c0602005A7042005590320" & HexString(D9,04) & "0d010000")
          End If
          Sc.Read(&h02)
          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)
            else
                cnt = 0
            End if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                cnt = 0
                if Sc.Read(&h02) = 2 Then
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 then
                         boot=1
                         Sc.Print "----------------------------------------------------------------" & vbCr
                         sc.print Software & " Bootloader installed After " & d0 & " attempts " & dacmsg & VbCr
                         Sc.Print "Total # of glitches applied to card " & glttl & VbCr
                         Sc.Print "D1 - D9 values used: " & D1 & "," & D2 & "," & D3 & "," & D4 & "," & D5 & "," & D6 & "," & D7 & "," & D8 & "," & D9 & VbCr & "Loop Delay: " & loopdelay & VbCr & "Glitch Type " & GlType & VbCr
                         ScriptEnd = Now
                         Sc.Print "----------------------------------------------------------------" & vbCr
                         Sc.Print "End: " & ScriptEnd & vbCr     'main screen
                         Sc.Print "Elapsed time:  " + FormatNumber((CDbl(ScriptEnd) - CDbl(ScriptStart)) * 24 * 60, 2, True, True, True) & " minutes" & vbCr
                         Sc.Print "----------------------------------------------------------------" & vbCr
                         exit for
                      End if
                    End if
                 End if
             else
                exit for
          End if
         Next
         If (atrlock = 1) and (mtries > 200) Then
            GlRot = 1
            sc.print "Glitch Type: " & GlType & VbCr
         End If
         If (GlRot = 1) and (gltypecnt >= gltypemax) Then
            GlType = GlType + 1
            gltypecnt = 0
            If GlType > 4 Then GlType = 1
         End If
        if boot = 1 then

           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           boot = 1
            If Action = "Write" Then
               If (HUBinFile) and (FileName <> "") Then
                Sc.Write("A1")
                CAll WriteCard(32)
                Sc.Write("A0")
               Else
                Exit Function
               End If
            Call WriteDac()
            End If
            If Action = "Clean" Then
              Sc.Write("A1")
              Call CleanCard("short")
              Sc.Write("A0")
            End If
            If Action = "Read" Then
              Sc.Write("A1")
              Call ReadCard()
              Sc.Write("A0")
            End If
           Exit Function
         End if
       End if
     End if
   else
    kp=kp-1
    if kp<1 then kp=1
   End If

If uloop >= Ucycles Then
      d = INT(RND * (i + 1))
      GetNextDac(d)  ' Get and cycle to next set in the series
      loopdelay = loopdelay + 5
      uloop = 0
sc.print GlSin & VbTab & VbTab & Gltype & VbTab & VbTab & glttl & VbTab & VbTab & Loopdelay & VbTab & VbTab & d & VbTab & D1 & "," & D2 & "," & D3 & "," & D4 & "," & D5 & "," & D6 & "," & D7 & "," & D8 & "," & D9 & VbCr
End If
uloop = uloop + 1
gltypecnt = gltypecnt + 1
loop until boot = 1
loopdelay = OldDelay
Sc.Write("A0")
End Function
' ********************************************************************** END Unlooper

Sub AreaInfo()
Dim MsgPromp
Dim RetVal03
Dim RetVal04

RetVal03 = 0
RetVal04 = 2

ZipCode = Default_ZipCode
Spend_Limit = "$" + Mid(Default_SpendLimit,1,2) + "." + Mid(Default_SpendLimit,3,2)
local = Default_Local
GUIDEbyte = Default_GuideByte
TZone = Default_TimeZone
rating = Default_Rating
FuseBytes = Default_FuseByte

MsgPromp = "Would you Like to Use the Default Area Settings Below?" & VbCr & VbCr
MsgPromp = MsgPromp & vbtab & "Zip Code: " & vbtab & ZipCode & VbCr
MsgPromp = MsgPromp & vbtab & "Spending Limit:" & vbtab & Spend_Limit & VbCr
MsgPromp = MsgPromp & vbtab & "Local Byte: " & vbtab & local & VbCr
MsgPromp = MsgPromp & vbtab & "Guide Byte: " & vbtab & GUIDEbyte & VbCr
MsgPromp = MsgPromp & vbtab & "Time Zone: " & vbtab & TZone & VbCr
MsgPromp = MsgPromp & vbtab & "Rating: " & vbtab & vbtab & rating & VbCr
MsgPromp = MsgPromp & vbtab & "Fuse Bytes: " & vbtab & FuseBytes
RetVal04=Sc.ButtonBox( MsgPromp & VbCr &"",  vbDefaultButton2 + vbQuestion, " Use Default Area Settings?", "Yes", "No")
If RetVal04 = 2 Then ' Edit now
  ''''''''''''''''''''''''''''''''''''''''''''''''''
  Call GetZipCode()
    IF ZipCode = "none" Then
      Exit Sub
    End If
  Call ConvertZip()
  Call getlocal() ' Sets Guidebyte also
    If local = "none" Then
     Exit Sub
    End If
  Call GetTimeZone()
    If TZone = "none" Then
      Exit Sub
    End If
  Call SetRating()
    If rating = "none" Then
      Exit Sub
    End If
  Call GetFuseBytes()
    If FuseBytes = "none" Then
      Exit Sub
    End If
    If BootActive < 1 Then Call LoadBootStrap()
    Call ExtractCardInfo()
    Call ChangeAreaSettings() 'added FuseBytes
Else
  If RetVal04 = 1 Then ' Keep Default
          Call ConvertZip() ' Added
          Call LoadBootStrap()
          Call ExtractCardInfo()
          Call ChangeAreaSettings() 'added FuseBytes
  End If
End If

End Sub
''''''''''''''''''''''''''''''''''''''''''
Function GetZipCode()
    Dim InputValid1
    Dim PromptString
    Dim Abort

    InputValid1 = False
    PromptString = ""
    Do
        PromptString = PromptString & "Please enter your five digit zip code:"
    ZipCode = Sc.InputBox(PromptString, "Enter Zip Code", Default_ZipCode)

    If IsNumeric(ZipCode) And Len(Zipcode) = 5 Then 'If Zipcode is Numeric and length is equal to 5 Then
        GetZipCode = ZipCode
        InputValid1 = True
    ElseIf ZipCode = "" Then
                ZipCode = "none" 'ZipCode = Default_ZipCode
                Exit Function
        'End If
            PromptString = ""
    Else
            PromptString = "Invalid input!" & vbCrLf & vbCrLf
    End If
    Loop Until InputValid1 = True

End Function

Function ConvertZip()
Dim ZipLoop
Dim ZPcounter

ZPtemp1 = 0
ZPtemp2 = 0
ZPtemp3 = 0
ZPtemp4 = 0
ZPtemp5 = 0
ZipLoop = True
ZPcounter = 0 'reset ZPcounter to Zero every time this function called
    'Convert ZipCode to 3x3x3x3x3x
    ZPtemp = ZipCode / 10000
Do
    IF ZPcounter = 1 Then
    ZPtemp1 = ZPtempx
    ZPtemp = ZPtemp * 10
    End If
    IF ZPcounter = 2 Then
    ZPtemp2 = ZPtempx
    ZPtemp = ZPtemp * 10
    End If
    IF ZPcounter = 3 Then
    ZPtemp3 = ZPtempx
    ZPtemp = ZPtemp * 10
    End If
    IF ZPcounter = 4 Then
    ZPtemp4 = ZPtempx
    ZPtemp = ZPtemp * 10
    End If
    IF ZPcounter = 5 Then
    ZPtemp5 = ZPtempx
    ZPCode = ZPtemp1 & ZPtemp2 & ZPtemp3 & ZPtemp4 & ZPtemp5
    ZipLoop = False 'We now have our Zipcode Bytes End the Loop
    Exit Function
    End If

    If ZPtemp > 8.9999 and ZPtemp < 10 Then
    ZPtempx = 39
    ZPtemp = ZPtemp - 9

    Else If ZPtemp > 7.9999 and ZPtemp < 9 Then
    ZPtempx = 38
    ZPtemp = ZPtemp - 8

    Else If ZPtemp > 6.9999 and ZPtemp < 8 Then
    ZPtempx = 37
    ZPtemp = ZPtemp - 7

    Else If ZPtemp > 5.9999 and ZPtemp < 7 Then
    ZPtempx = 36
    ZPtemp = ZPtemp - 6

    Else If ZPtemp > 4.9999 and ZPtemp < 6 Then
    ZPtempx = 35
    ZPtemp = ZPtemp - 5

    Else If ZPtemp > 3.9999 and ZPtemp < 5 Then
    ZPtempx = 34
    ZPtemp = ZPtemp - 4

    Else If ZPtemp > 2.9999 and ZPtemp < 4 Then
    ZPtempx = 33
    ZPtemp = ZPtemp - 3

    Else If ZPtemp > 1.9999 and ZPtemp < 3 Then
    ZPtempx = 32
    ZPtemp = ZPtemp - 2

    Else If ZPtemp > 0.9999 and ZPtemp < 2 Then
    ZPtempx = 31
    ZPtemp = ZPtemp - 1

    Else If ZPtemp =< 0.9999 Then
    ZPtempx = 30
    ZPtemp = ZPtemp
    End IF
    End IF
    End IF
    End IF
    End IF
    End IF
    End IF
    End IF
    End IF
    End IF
    ZPcounter = ZPcounter + 1
    Loop Until ZipLoop = False

End Function
''''''''''''''''''''''''''''''''''''''
Function getlocal()
    Dim RetVala2
    Dim PromptString
    Dim GotInput


    'RetVal = Sc.MsgBox("Would you like to select a locals market?" & vbCrLf & "This is only useful on 5th generation or newer recievers.", vbYesNo + vbQuestion + vbDefaultButton2)

    GotInput = False

    Do
        PromptString = "Please make a selection from the following list:" & vbCrlf & vbCrlf
        PromptString = PromptString & "00: No Locals" & vbtab & vbtab & vbtab & "01: Atlanta, GA" & vbtab & vbtab & vbtab & "02: Boston, MA" & vbCrlf
        PromptString = PromptString & "03: Chicago, IL" & vbtab & vbtab & vbtab & "04: Clevland, OH" & vbtab & vbtab & "05: Dallas, TX" & vbCrlf
        PromptString = PromptString & "06: Denver, CO" & vbtab & vbtab & vbtab & "07: Detroit, MI" & vbtab & vbtab & vbtab & "08: Houston, TX" & vbCrlf
        PromptString = PromptString & "09: Los Angeles, CA" & vbtab & vbtab & "0A: Maimi, FL" & vbtab & vbtab & vbtab & "0B: Minneapolis, MN" & vbCrlf
        PromptString = PromptString & "0C: New York, NY" & vbtab & vbtab & "0D: Orlando, FL" & vbtab & vbtab & vbtab & "0E: Philadelphia, PA" & vbCrlf
        PromptString = PromptString & "0F: Phoenix, AZ" & vbtab & vbtab & vbtab & "10: Sacramento, CA" & vbtab & vbtab & "11: San Francisco, CA" & vbcrlf
        PromptString = PromptString & "12: Seattle, WA" & vbtab & vbtab & vbtab & "13: St. Louis, MO" & vbtab & vbtab & "14: Tampa, FL" & vbCrlf
        PromptString = PromptString & "15: Washington DC" & vbtab & vbtab & "16: Greenville, SC" & vbtab & vbtab & "17: Raleigh, NC" & vbCRlf
        PromptString = PromptString & "18: Salt Lake City, UT" & vbtab & vbtab & "19: Austin, TX" & vbtab & vbtab & vbtab & "1A: Baltimore, MD" & vbCrlf
        PromptString = PromptString & "1B: Birmingham, AL" & vbtab & vbtab & "1C: Charlotte, NC" & vbtab & vbtab & "1D: Cincinnati, OH" & vbCrlf
        PromptString = PromptString & "1E: Columbus, OH" & vbtab & vbtab & "1F: Greensboro, NC" & vbtab & vbtab & "20: Indianapolis, IN" & vbCrlf
        PromptString = PromptString & "21: Kansas City, MO" & vbtab & vbtab & "22: Memphis, TN" & vbtab & vbtab & "23: Milwaukee, WI" & vbCrlf
        PromptString = PromptString & "24: Nashville, TN" & vbtab & vbtab & "25: Pittsburgh, PA" & vbtab & vbtab & "26: Portland, OR" & vbCrlf
        PromptString = PromptString & "27: San Antonio, TX" & vbtab & vbtab & "28: San Diego, CA" & vbtab & vbtab & "29: West Palm Beach, FL" & vbCrlf

        RetVala2 = Sc.InputBox(PromptString, "Select Locals Market", Default_Local)

        If RetVala2 = "" then
            GotInput = True
            local = "none"
            'Sc.Print(vbCrLf & "Cancelled at Local Area selection.")
            Exit Function
        End If

        if len(RetVala2) <> 2 then 'If lenth is lessthan or greater than 2 Then...
            GotInput = false
            local = "none"
        else
          RetVala2 = UCase(RetVala2)

        Select Case left(RetVala2, 1)
           case "0", "1"
                Select Case Right(RetVala2, 1)
                  Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"
                    GotInput = true
                    getlocal = RetVala2
                    local = getlocal
                End Select
            Case "2"
                Select Case Right(RetVala2, 1)
                  Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
                    GotInput = true
                    getlocal = RetVala2
                    local = getlocal
                End Select
        End Select
        End If
    Loop until GotInput = True
If GETLOCAL = "00" Then GUIDEbyte="FB"
If GETLOCAL = "01" Then GUIDEbyte="02"
If GETLOCAL = "02" Then GUIDEbyte="41"
If GETLOCAL = "03" Then GUIDEbyte="10"
If GETLOCAL = "04" Then GUIDEbyte="40"
If GETLOCAL = "05" Then GUIDEbyte="28"
If GETLOCAL = "06" Then GUIDEbyte="60"
If GETLOCAL = "07" Then GUIDEbyte="08"
If GETLOCAL = "08" Then GUIDEbyte="01"
If GETLOCAL = "09" Then GUIDEbyte="11"
If GETLOCAL = "0A" Then GUIDEbyte="02"
If GETLOCAL = "0B" Then GUIDEbyte="28"
If GETLOCAL = "0C" Then GUIDEbyte="28"
If GETLOCAL = "0D" Then GUIDEbyte="01"
If GETLOCAL = "0E" Then GUIDEbyte="60"
If GETLOCAL = "0F" Then GUIDEbyte="08"
If GETLOCAL = "10" Then GUIDEbyte="40"
If GETLOCAL = "11" Then GUIDEbyte="28"
If GETLOCAL = "12" Then GUIDEbyte="10"
If GETLOCAL = "13" Then GUIDEbyte="08"
If GETLOCAL = "14" Then GUIDEbyte="08"
If GETLOCAL = "15" Then GUIDEbyte="12"
If GETLOCAL = "16" Then GUIDEbyte="28"
If GETLOCAL = "17" Then GUIDEbyte="01"
If GETLOCAL = "18" Then GUIDEbyte="02"
If GETLOCAL = "19" Then GUIDEbyte="20"
If GETLOCAL = "1A" Then GUIDEbyte="02"
If GETLOCAL = "1B" Then GUIDEbyte="01"
If GETLOCAL = "1C" Then GUIDEbyte="48"
If GETLOCAL = "1D" Then GUIDEbyte="20"
If GETLOCAL = "1E" Then GUIDEbyte="28"
If GETLOCAL = "1F" Then GUIDEbyte="08"
If GETLOCAL = "20" Then GUIDEbyte="02"
If GETLOCAL = "21" Then GUIDEbyte="01"
If GETLOCAL = "22" Then GUIDEbyte="40"
If GETLOCAL = "23" Then GUIDEbyte="01"
If GETLOCAL = "24" Then GUIDEbyte="10"
If GETLOCAL = "25" Then GUIDEbyte="01"
If GETLOCAL = "26" Then GUIDEbyte="01"
If GETLOCAL = "27" Then GUIDEbyte="02"
If GETLOCAL = "28" Then GUIDEbyte="10"
If GETLOCAL = "29" Then GUIDEbyte="20"


End Function
''''''''''''''''''''''''''''''''''''''
Function SetRating()
    Dim RetVal02
    Dim PromptString
    Dim GotInput1


    'RetVal = Sc.MsgBox("Would you like to select a locals market?" & vbCrLf & "This is only useful on 5th generation or newer recievers.", vbYesNo + vbQuestion + vbDefaultButton2)

    GotInput1 = False

    Do
        PromptString = "Please make a Rating Limit selection from the following list:" & vbCrlf & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "00: All Locked" & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "01: NR"         & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "02: G"          & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "04: PG"         & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "06: PG13"       & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "07: NR Content" & vbcrlf
        PromptString = PromptString & vbtab & vbtab & "09: R"          & vbCrlf
        PromptString = PromptString & vbtab & vbtab & "0B: NR Mature"  & vbCRlf
        PromptString = PromptString & vbtab & vbtab & "0D: NC17"       & vbCrlf

        RetVal02 = Sc.InputBox(PromptString, "Select Rating Limit", Default_Rating)

        If RetVal02 = "" then
            GotInput1 = True
            rating = "none"
            Exit Function
        End If

        if len(RetVal02) <> 2 then 'If lenth is less than or greater than 2 Then...
            GotInput1 = false
            rating = "none"
        else
          RetVal02 = UCase(RetVal02)

        Select Case left(RetVal02, 1)
           case "0"
                Select Case Right(RetVal02, 1)
                  Case "0", "1", "2", "4", "6", "7", "9", "B", "D"
                    GotInput1 = true
                    SetRating = RetVal02
                    rating = SetRating
                End Select
            Case "2"
                Select Case Right(RetVal02, 1)
                  Case "0", "1", "2", "4", "6", "7", "9", "B", "D"
                    GotInput1 = true
                    SetRating = RetVal02
                    rating = SetRating
                End Select
        End Select
        End If
    Loop until GotInput1 = True

End Function
''''''''''''''''''''''''''''''''''''''
Sub GetFuseBytes()
    Dim InputValid
    Dim PromptString
    Dim Fuse1
    Dim Fuse2

    PromptString = ""
    InputValid = False
    Do
        PromptString = "Please enter the fuse bytes you wish to use:" & vbCrlf & vbCrlf
        PromptString = PromptString & vbtab & "20DF: Virgin, unactivated" & vbCrlf
        PromptString = PromptString & vbtab & "25DA: Activated, married"  & vbCrlf
        FuseBytes = Sc.InputBox(PromptString, " Change Fuse Bytes", Default_FuseByte)

        If FuseBytes = "" Then
            FuseBytes = "none"
            InputValid = True
            Exit Sub
        End If
        PromptString = ""
        Fuse1 = Mid(FuseBytes,1,2)
        Fuse2 = Mid(FuseBytes,3,4)
        If HexString(Hex2Dec(Fuse1) Xor Hex2Dec(Fuse2),2) = "FF" Then
            InputValid = True
        Else
            PromptString = "Invalid Fuse Bytes!" & vbCrLf & vbCrLf
        End If
    Loop Until InputValid = True
End Sub
''''''''''''''''''''''''''''''''''''''
Function GetTimeZone()
  Dim RetVal
  Dim GotInput
  Dim PromptString
  Dim TZT
  Dim TZ
  Dim TimeZone
  'Dim TimeZone

''' Get time zone
    GotInput = False
    Do
        PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "This will determine the correct time on your receiver." & vbCrLf & "If you don't see your option click More..." & vbCrLf
        RetVal = Sc.ButtonBox(PromptString,, "Select your Time Zone", "Pacific", "Mountain", "Central", "Eastern", "More...")

        Select Case    UCase(RetVal)
        Case "1"
            TZ = &h0
            TimeZone = "Pacific"
            GotInput = True
        Case "2"
            TZ = &h2
            TimeZone = "Mountain"
            GotInput = True
         Case "3"
            TZ = &h4
            TimeZone = "Central"
            GotInput = True
         Case "4"
            TZ = &h6
            TimeZone = "Eastern"
            GotInput = True
         Case "5"
            Do
               PromptString = "Please select your time zone." & vbCrLf & vbCrLf & "If you don't see your option click Back..." & vbCrLf
               RetVal = Sc.ButtonBox(PromptString,, "Select your Time Zone", "Atlantic", "NewFoundland", "Back...")
               Select Case    UCase(RetVal)
               Case "1"
                  TZ = &h8
                  TimeZone = "Atlantic"
                  GotInput = True
               Case "2"
                  TZ = &h9
                  TimeZone = "NewFoundland"
                  GotInput = True
               Case "3"
                  Exit Do
               End Select
            Loop Until GotInput = True
         Case "0"
            'RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
            'If RetVal = vbYes Then
                'Sc.Print("Cancelled at Time Zone selection." & vbCrLF)
                GetTimeZone = vbCancel
                Exit Function
            'End If
        End Select
    Loop Until GotInput = True

    'Get Day light savings Time or Standard Time
    GotInput = False
    Do
        PromptString = "Please select Standard Time or Day Light Savings," & vbCrLf & vbCrLf
        PromptString = PromptString & "for the " & TimeZone & " Time Zone."
        RetVal = Sc.ButtonBox(PromptString,, "Select DayLight Savings or Standard Time", "DayLight", "Standard", "Cancel")

        Select Case UCase(RetVal)
        Case "1"
            TZT = &hA0
            TimeZone = TimeZone & "/DayLight Savings"
            GotInput = True
        Case "2"
            TZT = &h20
            TimeZone = TimeZone & "/Standard"
            GotInput = True
        Case "3", ""
            'RetVal = Sc.MsgBox("Would you like to abort this operation?" & vbCrLf & "(It is safe to do so at this point.)", vbYesNo + vbQuestion, "ABORT?")
           'If RetVal = vbYes Then
                'Sc.Print("Cancelled at Time Zone selection." & vbCrLF)
                GetTimeZone = vbCancel
                TZone = "none"
                Exit Function
            'End If
        End Select
    Loop Until GotInput = True

    GetTimeZone = Hex(TZT + TZ)
    TZone = Hex(TZT + TZ)

End Function

''''''''''''''''''''''''''''''''''''''

Sub ChangeAreaSettings()
Dim TZone2
Dim ZipCode2
Dim local2
Dim GUIDEbyte2
Dim rating2
Dim FuseBytes2
    TZone2 = TZone
    ZipCode2 = ZipCode
    Spend_Limit = "$" + Mid(Default_SpendLimit,1,2) + "." + Mid(Default_SpendLimit,3,2)
    local2 = local
    GUIDEbyte2 = GUIDEbyte
    rating2 = rating
    FuseBytes2 = FuseBytes

'    Call ExtractCardInfo() 'call before every WriteViaLoader function
    SpendingLimitHex = HexString(Default_SpendLimit, 4)    ' Assign Spending Limit from User settings
    Call Sc.ProgressBox ("Changing Area Settings...", 1, 1,"                 Changing Area Settings...")
    Call WriteViaLoader("2014",FuseBytes,"D")              ' set Fuse Bytes
    Call WriteViaLoader("240C","00000000","E")             ' Clear Password
    Call WriteViaLoader("2410","55" & ZPCode & "2020","E") ' Set Zipcode
    Call WriteViaLoader("2406",SpendingLimitHex,"E")       ' Spending Limit
    ' sc.print VbCr & "ZPCode is " & ZPCode &VbCr
    Call WriteViaLoader("2460","00000000" & rating,"E")    ' Clear IRD # From Location 1 and set rating
    Call WriteViaLoader("24A4","00000000","E")             ' Clear IRD # From Location 1
    Call WriteViaLoader("24E0",TZone,"E")                  ' Set Time Zone
    Call WriteViaLoader("2511",local,"E")                  ' Set Local Bytes
    Call WriteViaLoader("251F",GUIDEbyte,"E")              ' Set Guide Bytes
    Call WriteViaLoader("2690","0000000000000000","D")     ' Clear card swap key

    Call Sc.ProgressBox ("", 0, 0, "")

    sc.Print(vbCr & "Time Zone     : "& TZone2)
    sc.Print(vbCr & "Zip Code      : "& ZipCode2)
    sc.Print(vbCr & "Spending Limit: "& Spend_Limit)
    sc.Print(vbCr & "Local Byte    : "& local2)
    sc.Print(vbCr & "Guide Byte    : "& GUIDEbyte2)
    sc.Print(vbCr & "Fuse  Byte    : "& FuseBytes2)
    sc.Print(vbCr & "Rating Limit  : "& rating2)
    sc.Print(vbCr & "Area Settings Change Successfull!")
    sc.Print(vbCr & "Rating Limit Password has been Cleared!")
    sc.Print(vbCr & "Card was Unmarried from IRD and password was cleared!" & vbCr)

End Sub
''''''''''''''''''''''''''''''''''''''''''
Sub CleanCard()

'Address 201D
'- 77 for 6B Cards
'- 74 for 5B Cards
'- 75 for 4B Cards

    Dim RetVal
    MenuPrompt = "Please Select Cleaning method." & vbCrLf
    MenuPrompt = MenuPrompt & "USW 800 will not write to your 12 byte write key (2EEC-2EF7)." & vbCrLf
    MenuPrompt = MenuPrompt & "USW 800 also updates DSW to 6." & vbCrLf
    Choice = Sc.ButtonBox(MenuPrompt, VbInformation, "StarGlitch: Select operation or click X to exit-->", "No Updates", "USW 700", "USW 800")

    Select Case Choice
    Case "0"
      Exit Sub
    Case "1"
    sc.print "Cleaning to USW 000." & VbCr
      addusw = 0
    Case "2"
    sc.print "Cleaning to USW 700." & VbCr
      addusw = 7
    Case "3"
    sc.print "Cleaning to USW 800." & VbCr
      addusw = 8
    End Select

    Sc.verbose = 0

    Call ExtractCardInfo()

    Call Sc.ProgressBox ("Cleaning Main Code...", 1, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2014","20DF","D")                                ' Fuse
    Call WriteViaLoader("2406","03E80000000000000000","E")                ' Limit, Act Date, Password
    Call WriteViaLoader("2410","00000000000000000000000000010000","E")    ' Zip, PPV Act

    Call WriteViaLoader("2420","00000000000000000000000100000000","E")    ' PPV Act
    Call WriteViaLoader("2430","00000000000000000001000000000000","E")    ' Sub
    Call WriteViaLoader("2440","00000000000000010000000000000000","E")    ' Sub
    Call WriteViaLoader("2450","00000000000000000000000000000000","E")    ' Sub
    Call Sc.ProgressBox ("Cleaning Main Code...", 2, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2460","00000000","E")                            ' Ird Slot 1
    Call WriteViaLoader("2464","090000","E")                              ' Rating
    Call WriteViaLoader("24A4","00000000","E")                            ' Ird Slot 2
    Call WriteViaLoader("24E0","A601","E")                                ' Time Zone
    Call WriteViaLoader("24E6","0000","E")                                ' DSW Counter
    Call WriteViaLoader("2500","00000000000000000000000000000000","E")    ' Guide and Blackout Bits
    Call WriteViaLoader("2510","00000000000000000000000000000000","E")    ' Guide and Blackout Bits
'    Call WriteViaLoader("2501","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","E")
'    Call WriteViaLoader("2512","00000000000000000000000000","E")
    Call WriteViaLoader("2520","00000000000000000000000000000000","E")
    Call WriteViaLoader("2530","00000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Main Code...", 3, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("22F2","2210E37702270C8EE2B67610280575FC67D56A8CDCE712608EDB7E7D0029020B","D")
    Call WriteViaLoader("2312","982A30EF1D6102038CD4B5F97D40BE060375FED28CD15C40010017C5AA0060AB","D")
    Call WriteViaLoader("2332","0101C33D170FF5748028F98800603088003B327202068EE5ADF9726015882ACE","D")
    Call WriteViaLoader("2352","2A720204E700098A2ACFB34D006102EAF912088E3C96F9C5AA2AF8D024AA3F50","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 4, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2372","13248E3C96C35D080FEEF98E","D")
    Call WriteViaLoader("23B3","982A30EF70012A8E3C96C704EDD70904E0D5088827052A8ED1B0F98ED21D8E","D")
    Call WriteViaLoader("23D2","3C96F9C58E23F5F4CC2E2A0F0C8E23F5F4CC2A2E0F07223FE6D32CD32CC35D0C","D")
    Call WriteViaLoader("23F2","0FE2F99A2CD02DD32C9A2CD02ED32CF9FFFFFFFF","D")
    Call WriteViaLoader("2690","0000000000000000B3B8BDC2C7C7C7C7C7C7C7C7C7B3B3B3B3B3CCD1D1D1D1D1","D")
    Call WriteViaLoader("26B0","D1D6DB06C9DC3E1306C9DC3E2B08C9DC3E4306C9DC3E6301C9DC3E7B04C9DC3E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 5, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("26D0","7F01C9DC3E8F01C9DC3E9303C9DC3E97FFC8A0CE0D16F082AC8602C081580703","D")
    Call WriteViaLoader("26F0","0000FF40000000000000000000000000DFE1F01A00DFE1003800DF83043800D5","D")
    Call WriteViaLoader("2710","13011800D912031800D597001820D59B001820DAE50B1800D8B1812820D7AF82","D")
    Call WriteViaLoader("2730","3800385003D000289E051C00DFE1023800DABE122860D7B30328E0D6A1012860","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 6, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2750","DFE2002860D7F3822860D4110828E0D883003800DF7F00380028C50D28E0DEBA","D")
    Call WriteViaLoader("2770","0228E0D834042860D8B8082860D8DE003800D8D7043800D90B033800D93B2338","D")
    Call WriteViaLoader("2790","00D9CEF03800DAB7003860DAD0003820DAD4023860DB16043800D42A052860DB","D")
    Call WriteViaLoader("27B0","2800181022F2F01800DFF0042860DD808D28E0D9CEF03800DB4C853860DFE101","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 7, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("27D0","180028A1883C002308E12860D5E7821800D667842860DB9FD52860E002822860","D")
    Call WriteViaLoader("27F0","DBD0813800D809D29000DFE1F09000383003F000D9608628E02FC79028A02F10","D")
    Call WriteViaLoader("2810","8028A02ABF89D000DB4C8528E02F088428E0DE458C28E0DE548628E05507AA24","D")
    Call WriteViaLoader("2830","B843000EAA2650130EF9D1FEFEAAFFFD8E3F3D2DF78C2F5C8E3F5812399B3012","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 8, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2850","3AF4EB0130F9B8C8D829D82AC5AA2AF0D007AA3F481307AB00DDC35D080FEE22","D")
    Call WriteViaLoader("2870","A064AB00DDC35D100FF5C59A30AB00ED700130C33D060FF38C3039008CC2988C","D")
    Call WriteViaLoader("2890","C0EC8C3EEB8C3B068C3B348C38198C39788CC27A8C3C968C393A8CE0748C2F43","D")
    Call WriteViaLoader("28B0","8C37008CE30E8C3D128C37808C37708CE0438C3C968C3D568CD6B28C29C48C2F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 9, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("28D0","568C31818C3F378C2AC58C3B558C3B798C36EA8CC4308C33B78C2F9D8CD6F68C","D")
    Call WriteViaLoader("28F0","31038CD3438C36F58C231E8C37738C3ED08C305C8CEC9C8C37728C377220203F","D")
    Call WriteViaLoader("2910","EF00000000000000000000000000000000000000000000000000000000000000","D")
    Call WriteViaLoader("2930","000000000000000000000000005CDA5EFA8F6152EA1CFED0C6043DA97745BB98","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 10, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2950","231803ECF766BD3570C1DF224A8EA4599B94A5B8FF490C27663B80DE52CD7AE1","D")
    Call WriteViaLoader("2970","134DAAF79438C92552BC617F8016EE03DB01298401005C0A3C7D919AC5AA24B8","D")
    Call WriteViaLoader("2990","AB00EDAA2650AB00F5C35D080FEFC522A064AB00DDC35D100FF58800ED2A8800","D")
    Call WriteViaLoader("29B0","DD2C7210FD8E3EB272DD158824B02A721004E7F9C877202703757F2775EF2742","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 11, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("29D0","2A0275F727751F02731F02D3024D04020F034204024C0204F750113215D80298","D")
    Call WriteViaLoader("29F0","2A347780270DD105D50E322A8E283A3205000A77202703B50003AA0000764027","D")
    Call WriteViaLoader("2A10","0ED0039A2AB81303D40315030206B99B2A740827C370012ADA02C7D402770827","D")
    Call WriteViaLoader("2A30","07882AA72A8E2A9575F7273215F75011762027277780270DD105D50E32348E28","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 12, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2A50","3A32050003AA00007640270AD0039A341303150302059B34740827C3700134DA","D")
    Call WriteViaLoader("2A70","02CED11577082707882AB32A8E2A9598342A7D0004020389FF45757F2775DF27","D")
    Call WriteViaLoader("2A90","75BF27C4F9C59A2AAB00ED70012AC35D0C0FF38E00EDF9F76011F761118EE7AE","D")
    Call WriteViaLoader("2AB0","8CE799F76211F763118EE7AE8CE7998EDCBB8CD5537702120225FE8CC89E0000","D")
    Call WriteViaLoader("2EF8","A5A5A5A5A5A5A5A5A5A5A5A500FFFFFF7601D001F98CDE3A720504882ACE2A8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 13, 44,"StarGlitch Cleaner")
    Call WriteViaLoader("2F18","E6A0720C048824F42A8EE6A02202E377022701F9D5D08EE02F8824662E882406","D")
    Call WriteViaLoader("2F38","2C8EC5078822F22E8CD8992D00F406E0938EE0F3771026034224938CE0D47223","D")
    Call WriteViaLoader("2F58","038CC0C1062FAAFFFC2DD80628B4B4C4D50BF4D9002A0EC8322A8E2F8FC4D00E","D")
    Call WriteViaLoader("2F78","AA006043000E440E0BC3D32A3D070FE2B4B4120BF932FE5507AA24C043000EAA","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 14, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("2F98","2658130EF97DFF6002038CD9E51217021D7202078EDA993260CD5D030B10AA2A","D")
    Call WriteViaLoader("2FB8","D01D6102060FE6770160E27480D3F98EDC9977022745C5AA0064AB00EDC35D0C","D")
    Call WriteViaLoader("2FD8","0FF5AA297CAB00EDC35D100FF58829412A8800ED2C7210FD8E3EB2C5AA00EDD0","D")
    Call WriteViaLoader("2FF8","0BAA0064130BAB0064C35D0C0FEE8824F42A720C047264158CDC54F9E2880100","D")
    Call WriteViaLoader("3018","30E9D50BC5AA24F4D009AA2AE4130944000BC35D0C0FEE120B02032205E68CD0","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 15, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3038","0D225064AB00EDC35D100FF58800DD2A8800ED2C7206FD8E3EB298EE3AD42AD4","D")
    Call WriteViaLoader("3058","29C4B4F975BFCF32BEAA3073D029AA3074D02A8EC37A9E2A8C3404C358CE77C7","D")
    Call WriteViaLoader("3078","ECCFF8C358C358C358C358C358C7FBC358C358C358C358C358C358C358C358C3","D")
    Call WriteViaLoader("3098","58C358C7F5CF56C806C6A4CCC43EDCC358CF08C983C358C358C358D0EED0EE30","D")
    Call WriteViaLoader("30B8","143F20CE3F3710C6E4C358C358CEAD3BA1C9A0CEB83722C8A0C5498E311C9A2A","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 16, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("30D8","D02B70012A9A2AD02C9E2C8ED27812088ED310D517120802088E23CED0178ED3","D")
    Call WriteViaLoader("30F8","108CD25A7D87080FD200057D80080BF48A2ACE2D02020AF4CA2A270506032240","D")
    Call WriteViaLoader("3118","E68CD242320855075A0788312F2A4B012A4900298CD1B03190F0382023693280","D")
    Call WriteViaLoader("3138","CF382023632329D23810237C233D823800237CDFE1F038202369DFE1823800","D")
    Call WriteViaLoader("3159","235982386023698E311C7D82080B258ED3AE770227058ED4079E194B17388C","D")
    Call WriteViaLoader("3178","D3807D87080FE1000C7610B6032241E67D80080BED8CD36C220F8E32718824C8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 17, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3198","3088009E32720206EB4D609E060A4261244C9F2402020314D39E4D609E060C4D","D")
    Call WriteViaLoader("31B8","629F0607426124D3240001F9C5AA0063AB0090C35D0C0FF5C5AA0090AB0070C3","D")
    Call WriteViaLoader("31D8","5D0C0FF5AA2931AB0090C35D100FF58829712A8800902C7210FD8E3EB2C5AA00","D")
    Call WriteViaLoader("31F8","70D00EAA0090130EAB0090C35D100FEED72404C4D50BC5AA2EECD00EAA009043","D")
    Call WriteViaLoader("3218","000E440E0BC35D0C0FED120B0202009B726315882EEC2A720C04E78800603088","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 18, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3238","24C832720206ED1217028022038E32714261FD98622A753F291260B7B7D0048E","D")
    Call WriteViaLoader("3258","32717780FD0D88006030982A32420406ED00D4726015E700CE42170BD0178ED3","D")
    Call WriteViaLoader("3278","D54C170B420B17F97440CF22038E3271126202042D040F01F98824E63088009E","D")
    Call WriteViaLoader("3298","32720206EBF4CC9F610A057D0162021206E68824CA30EFB002DE2507B34D0062","D")
    Call WriteViaLoader("32B8","06D698619F3262224CC702072231C7020222401D1706C1720C04882EF82A8EE6","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 19, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("32D8","A03262D1FFC70658220C8E3271C5AA0060AB00DDC35D0C0FF5AA297CAB00DDC3","D")
    Call WriteViaLoader("32F8","5D100FF58829412A8800DD2C7208FD8E3EB2C5AA0060D00EAA00DD130EAB00DD","D")
    Call WriteViaLoader("3318","C35D0C0FEE72DD15882EE02A720C04E7882DE02A8E337C882E002A8E337C002B","D")
    Call WriteViaLoader("3338","C7061A22118E327188006030882AD332721106ED882E202A8E337C000E882E40","D")
    Call WriteViaLoader("3358","2A8E337C882E602A8E337C88009E308824E632720206ED12FF8824CA30EA75BF","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 20, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3378","CF89FF1422208E327188006030982A32722006EDF98824CA30EF2507F9B87260","D")
    Call WriteViaLoader("3398","BE8E3537D4BE002512BE2D5C0BEF7640CFEB0019D7D78E338D2D030BEB000EC5","D")
    Call WriteViaLoader("33B8","B5AB00DAC35D260FF812D706E722908CC38F52FF8E351F120B0239002C300100","D")
    Call WriteViaLoader("33D8","60C5AA0101AB0061C33D600FF58824E63088009E32720206EBF4CC9F6202D300","D")
    Call WriteViaLoader("33F8","088824CA30EFB002D48900AE768028F1F98CC27A5D0C06F9C5AA2951AB0100C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 21, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3418","5D100FF5882AD330EFD00BC5AA0063AB0100C33D0B0FF5C5AA0100AB0140C35D","D")
    Call WriteViaLoader("3438","100FF58829612A8801002C7204FD8E3EB2223C8E3ECBD5DB32DBC2A801002C8E","D")
    Call WriteViaLoader("3458","ECA58EECA5C59A2CD009AA014013099B2CF4EB102CAB0140D32CC35D100FE7D3","D")
    Call WriteViaLoader("3478","DB7D04DB0FD28801402C8EECA58EECA5226A8E3ECBD509C5AA0140D00BAA0148","D")
    Call WriteViaLoader("3498","130BAB0140D00BA82ADC30EF130B440009C35D080FE21209020D8EDED97701B8","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 22, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("34B8","037217C689FF49C5AA0100D00BA82DE030EF130BAB0100C35D400FECC5A82AD4","D")
    Call WriteViaLoader("34D8","30EFAB00DDC35D080FF3882AD330EFC01260B7B76CD0248800632A4B012AC53D","D")
    Call WriteViaLoader("34F8","240B059A2AAB00DDD32AC35D080FF08E0100C5AA00DDD00BAA00A0130BAB00A0","D")
    Call WriteViaLoader("3518","C35D080FEE009DD50BC5AA2EE0D00EAA2EF8130E44000BC35D0C0FEE120BF98E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 23, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3538","3ED68A288B0207882F042A8EE68E8824CA30EFD01625072D03061C8E36A17260","D")
    Call WriteViaLoader("3558","0C7202128EE4098EE41A882E802A8E36C18E36A18901212D04061E8E36A1882E","D")
    Call WriteViaLoader("3578","803088010032726006EB72600C7202128EE41A8E36BD8900FF2D070259D5E926","D")
    Call WriteViaLoader("3598","0102D9E98E36A18829812A8EC4AEC542E9EA5D060B02D9EAAA2EE015EAAB00DD","D")
    Call WriteViaLoader("35B8","C35D0C0FEA222D8E3ECB8800DD2A22608EEBEF226A8E3ECBC5AA0100AB0060C3","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 24, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("35D8","5D200FF572600C7202128EE4098EE41A8E36BD8C36907248948EED82D5DB32DB","D")
    Call WriteViaLoader("35F8","5D400B06A82DE02A00225D480B06A82A942A00185D500B06A82A942A000E5D51","D")
    Call WriteViaLoader("3618","0B06A82A832A0004A82DCF2A982A30EF8EEDA4C3129502095DB10FC4C88EEE89","D")
    Call WriteViaLoader("3638","C4129606B9D1DB5DB10FB3C5AA0088AB00DDC35D0C0FF5AA297CAB00DDC35D10","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 25, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3658","0FF58829412A8800DD2C7208FD8E3EB2C5AA0088D00EAA00DD130EAB00DDC35D","D")
    Call WriteViaLoader("3678","0C0FEE72DD15882EF82A720C04E78E351F020852028E3EA31216B38824CA30EA","D")
    Call WriteViaLoader("3698","B5882F042A8EE68EF9882E202A726004C5982A349A34AB0100700134C33D040F","D")
    Call WriteViaLoader("36B8","F38E36C4F9882E202A7260048801002C420422C59A2CAB006070012CC35D200F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 26, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("36D8","F388006030982A32722006ED7C202204E2F92D080604C58E3EA38CC3A3D002A6","D")
    Call WriteViaLoader("36F8","013DFC80351302F97D54BE06087D400902032200E68CC1C9E2D0C18ED06A7260","D")
    Call WriteViaLoader("3718","157240048826102AE7F9760112178ED06A770125058ECEFF00288ED04D882610","D")
    Call WriteViaLoader("3738","2A7701101172400C8EE4098EE41A8801002A7601120DC59A2AE170012AC35D40","D")
    Call WriteViaLoader("3758","0FF5F998C3AB8837D22A8E379BC5AA0088E1C35D080FF7F9D50BF93203AB0164","D")
    Call WriteViaLoader("3778","B81202AB016CB4F92240522DAB0100C35D3F0FF81210AB01008826902A8E379F","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 27, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3798","8C376576011014C59A2A7D5ABE0601B2AB00A4C370012A5D080FED7248948EED","D")
    Call WriteViaLoader("37B8","827D44BE020D7D56BE02088E37DA8E37DA00068E37F38E37F3F9E44425024554","D")
    Call WriteViaLoader("37D8","14D4C5AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5F9C5A8010030","D")
    Call WriteViaLoader("37F8","EE8EEDA4C35D2D0FF3AA01008EEDA4C35D400FF5C5AA00A48EEDA4C35D080FF5","D")
    Call WriteViaLoader("3818","F9D513D50B7D36BE0201F972041E8E386622368E3CA000F28EDC0A88006230EE","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 28, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3838","272004302987D78A2ACE27010776401E03223EE68E3866F9302987D78A2ACE27","D")
    Call WriteViaLoader("3858","0203223DE6D51E74801E8E3866F97201D977801E037200D98E39168E38B18838","D")
    Call WriteViaLoader("3878","912A77801E048838A12AC59A2AAB00A0C370012A5D100FF3F950E75FA407240E","D")
    Call WriteViaLoader("3898","C5A87738C1CBE7B663B3029E192FC4CF365AB16C722D1DB1BEF70038F7003AF7","D")
    Call WriteViaLoader("38B8","803DFF5207F7083D8E38D9C704FA8839012C77801E0488390A2C8E38EE8E38D9","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 29, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("38D8","F99A2AD0059A2E1305A6013DFC213070012A70012EF99A2C213270012C9A2C21","D")
    Call WriteViaLoader("38F8","3470012C9A2C213DF902622C02403402442601642D01603401422F03403C121E","D")
    Call WriteViaLoader("3918","25072704022504B2BC8826602A4B002A790029883F582E4B002E79002DF97410","D")
    Call WriteViaLoader("3938","B6F9","D")
    Call WriteViaLoader("393D","2240AB0100C35D400FF88E3ED6C5AA2688D024AA3F801324AB00A4","D")
    Call WriteViaLoader("3958","C35D080FEE8E37B3C5D509E2D002AA00881302440009C35D080FF0120902BFF9","D")
    Call WriteViaLoader("3978","8E3ED67D40BE061A8824503088009032720406EB129014910208720206880090","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 30, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3998","30E58E3A8375EFB68E3AE48E3F8872970A920A8EE7D1726A0A920A520C8E3AFC","D")
    Call WriteViaLoader("39B8","7D67080601E25208A6013DFC80358E3CA0C704F4C5AA00A02DFB0F022CFBAB00","D")
    Call WriteViaLoader("39D8","7CC35D080FEF12D988E91F30B0020488EA3F3098302A72A30A920A12D98EE89F","D")
    Call WriteViaLoader("39F8","726A0A920AC5E2D007A8015C30EE1307AB0060C35D08020D7D670802E95D050F","D")
    Call WriteViaLoader("3A18","E5D50700E4F7803DFFC5F7083DAA0060A6013DFC2130C35D070FF28839072C77","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 31, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3A38","801E048839102C8E38EE1267A6013DFC2130C5A6013DFC8035AB007CC35D080F","D")
    Call WriteViaLoader("3A58","F2982A3072A30A920A12D9D5038EE8D5726A0A920A7D0803F406C27AB0021B77","D")
    Call WriteViaLoader("3A78","021E0552018E3EA38CDCDF5208A6013DFC80358E3C96C704F4F97410B68800B0","D")
    Call WriteViaLoader("3A98","2A88003B2E7202078EDBD87D40BE06D8F7803D88390A2CF7083D8E38EEF7283D","D")
    Call WriteViaLoader("3AB8","C5AA00A0A6013DFC2130C35D070605F7243D00EDF7283D5D0F0FE68839132C8E","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 32, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3AD8","38EE12AFA6013DFC2130009C8839042C77801E0488390D2C8E38EE12D8A6013D","D")
    Call WriteViaLoader("3AF8","FC2130F9B58E3CA012D8C704F8F932117D60BE06068EFFBC2317F912BE250F2D","D")
    Call WriteViaLoader("3B18","0A061112D402038CFFB67620C1038CFF9E8CFFAE7D56BE02F58CFFA67D60BE06","D")
    Call WriteViaLoader("3B38","05882E202AF912D402058825D02AF97620C1058825502AF98825902AF97D60BE","D")
    Call WriteViaLoader("3B58","061A8E338D2D030605882E7F2CF92D040605882E4F2CF988007F2CF988264F2C","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 33, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3B78","F97D60BE061D8E338D2D030606F4CA2C2E4FF92D040606F4CA2C2E1FF9F4CA2C","D")
    Call WriteViaLoader("3B98","005FF9F4CA2C260FF98E3ED67710B82FD508D5B87708D0087216087404B80051","D")
    Call WriteViaLoader("3BB8","7640B54D880176308800A0327208068EE5B7D5A8D5A97401B88E3C74890096C5","D")
    Call WriteViaLoader("3BD8","AA24F4D00BAA00A043000BAA2AE4130BAB00A0C35D0C0FE88EDED98EDF617D17","D")
    Call WriteViaLoader("3BF8","C606037204B87708B8037402D17601B80FC5B5AB00A0AB0088C35D0A0FF50037","D")
    Call WriteViaLoader("3C18","C58801762CA6013DFC80358E3CA0A8017630EE13D89B2C70012CC35D0A0FE688","D")
    Call WriteViaLoader("3C38","01762CC59A2CAB00A0AB0088B59B2CC370012C5D0A0FED7740B7038E3D907601","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 34, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3C58","B604D5A8D5A98E3C74C5AA0088AB00A0C35D080FF598D6C398A7D6F942B5AA12","D")
    Call WriteViaLoader("3C78","B82507D0AB32C734C802057401D2D5084208ACC5AA00A0E1C35D0D0FF7F9A601","D")
    Call WriteViaLoader("3C98","3DFC21308E3CA0F9B8C8D5DBD5DCD0D87B05DC32DBAA00A81BD8AB00A8D0DAAA","D")
    Call WriteViaLoader("3CB8","00A013DAAB00A013DC251FC0AA3CF2D0DA32DB5306AA00A813DAAB00A8B0BDD0","D")
    Call WriteViaLoader("3CD8","DA32DB5305AA00A01CDAAB00A04300D8D3DB7D08DB0FB9C4B4F9BF12939242AF","D")
    Call WriteViaLoader("3CF8","E7E3B2C6B89180B4E8739EF75DFDA082F96F25177D0B55970C8022678EE06F74","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 35, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3D18","042522088EE06F8E3A838E3AE48E3F8872970A920A8EE7D1726A0A920A520A8E","D")
    Call WriteViaLoader("3D38","3AFC8839012C8E38EEC5A6013DFC80358E3C9612D88EE06FC35D080FEDF98EFA","D")
    Call WriteViaLoader("3D58","27B006F98800683088245832720406EDC5AA2688D007AA3F80430007AA006013","D")
    Call WriteViaLoader("3D78","07AB0060C35D080FE87260158826902A720804E77420D1F9882460308800ED32","D")
    Call WriteViaLoader("3D98","720406EB720407D5063206AA00A0D0045503AA00EDD0053206C35507AA00A04B","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 36, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3DB8","0005C85503AA00EDD00932043C00553F8E3E0843000512041309BDB0BDC08E3E","D")
    Call WriteViaLoader("3DD8","08BE1B05C4AB00A0C5D8F0AA00EDD002B0BFD003B4D8022580BE1403AB00EDC3","D")
    Call WriteViaLoader("3DF8","770401E7B4D3067708069ED7070498F98EFFB67D00D406F78CFF9E0012010125","D")
    Call WriteViaLoader("3E18","002008001E010124100808001A0101240602080013010125202008002D010124","D")
    Call WriteViaLoader("3E38","08040800D0010124650108002E010124682008004E0101245C04080058010124","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 37, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3E58","E0010800F3010124A40408001901012464010800FE0101240C04080041010121","D")
    Call WriteViaLoader("3E78","060408C9F400000045010124881C0800F8010120240908CA360000CA750000CA","D")
    Call WriteViaLoader("3E98","B100000044010124E80C08B8A82AD02A9A2AB302038EE68EB4F9223C8E3ECB42","D")
    Call WriteViaLoader("3EB8","04FED50E8EECA5D30E4DFD0E0FF642FE04226AD00A920AF98E3ED68CC1A47202","D")
    Call WriteViaLoader("3ED8","058CC204E2C07604D10375BFD375F7CF8CC9597601CF1B2D7F06178E298C8EC2","D")
    Call WriteViaLoader("3EF8","4C8A2F04020A882E202A72C0048EE6A0227F7D5EBE060E7D01120609D31D7D08","D")
    Call WriteViaLoader("3F18","1D060222018CC00B770212108ED0EE8EDED97608B80375BFB48CCC4E8CCC3675","D")
    Call Sc.ProgressBox ("Cleaning Main Code...", 38, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("3F38","FBB48CD59FF4CA2CCBB90603728646F9","D")
    Call WriteViaLoader("3F58","12937D04060603751F938E2856D093F9","D")
    Call WriteViaLoader("3F88","727B0252058E3FB8722902000A520FAA00A0BCF008D0028E3FB3AA00A0823FDF","D")
    Call WriteViaLoader("3FA8","C522C72306724B024B02005203A40220AA00AA1B02AB00AAAA009FCAF3F91E72","D")
    Call WriteViaLoader("3FC8","CB250299A866F0DA234B00F8F5A0ABA70005009FCAB9F95203AA00A0D002AA","D")
    Call WriteViaLoader("3FE8","AC4B0002AA3F9413022B5ABE236BAB00ACCAE6A3FD20F9","D")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 39, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("2024","000000000000000000000000","E")
    Call WriteViaLoader("2030","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2050","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2070","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2090","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 40, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("20D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("20F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2110","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2130","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 41, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("2150","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2170","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2190","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("21F0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 42, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("2210","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2230","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2250","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2270","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2290","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22B0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning PPV, Tiers...", 43, 44, "StarGlitch Cleaner")
    Call WriteViaLoader("22D0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("22F0","0000","E")
    Call WriteViaLoader("2DC0","01172F15FFFF01FF07FF504C45415345205354414E4420425900000000000000","E")
    Call WriteViaLoader("2DE0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E00","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E20","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E40","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E60","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2E80","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call WriteViaLoader("2EC0","0000000000000000000000000000000000000000000000000000000000000000","E")
    Call Sc.ProgressBox ("Cleaning Complete...Adding Updates...", 44, 44, "StarGlitch Cleaner")

    If addusw > 6 Then
      Call InstallUpdates()        ' Clean USW portion of code & force USW800 DSW 6
    End If
   ' Call ShutdownCard()
    Call Sc.ProgressBox ("", 0, 0, "")
    sc.print "Cleaning Process Complete." & VbCr
    Call AreaInfo()

End Sub

Sub InstallUpdates()
    Dim USWH
    Dim USWL
    Dim USW
    Dim Updates(8)
    Sc.Write("06C20124C88200")
    Sc.Read(&h02)
    Sc.Read(&h03)
    USWH = Sc.GetByte(0)
    USWL = Sc.GetByte(1)
    USWH = HexString(USWH Xor HexToDec(XORedByte(0)),2)
    USWL = HexString(USWL Xor HexToDec(XORedByte(1)),2)
    USW = USWH & USWL
    USW = HexToDec(USW)
    sc.print "Card's USW: " & Hex(USW) & VbCr
'    Set Activation Date (11/23/2002)
    Call WriteViaLoader("2408","8217","E")
    Call WriteViaLoader("240C","00000000","E")             ' Clear Password
    ' Add Updates (Added AltEE Updates 1-6-03)

    If USW = &h0000 OR USW = &h0001 OR addusw > 6 Then
        Call WriteViaLoader("2B00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2D80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2DA0","0000000000000000000000000000000000000000000000000000000000000000","E")
    End If

    If USW => &h0100 OR addusw > 6 Then
        sc.print "Adding USW 100" & VbCr
        Call WriteViaLoader("2CE8","7D40BE0652F7803DFFFFC5F7083DAA2CE0A6013DFC2130C35D070FF28839072C","D")
        Call WriteViaLoader("2D08","8E38EEAA2CE0A6013DFC2130","D")
    End If

    If USW => &h0200 OR addusw > 6 Then
       sc.print "Adding USW 200" & VbCr
        Call WriteViaLoader("2D14","D524C5AA24D8D002AA24C0430002AA2658430002A6013DFC80351302440024C3","D")
        Call WriteViaLoader("2D34","5D030FDF122406037404288CC1C9","D")
    End If

    If USW => &h0300 OR addusw > 6 Then
        sc.print "Adding USW 300" & VbCr
        Call WriteViaLoader("2D42","760428038CD5138C2024","D")
        Call WriteViaLoader("2CE0","21513C515063DE1E","D")
    End If

    If USW => &h0400 OR addusw > 6 Then
        sc.print "Adding USW 400" & VbCr
        Call WriteViaLoader("370E","2CE8","D")
        Call WriteViaLoader("270F","2D42","D")
        Call WriteViaLoader("2D4C","22F2008B23D50031","D")
    End If

    If USW => &h0500 OR addusw > 6 Then
        sc.print "Adding USW 500" & VbCr
        Call WriteViaLoader("2D54","2698007A271103BD2CD000102CE800642D4C00402D8C002B","D")
        Call WriteViaLoader("2D6C","2F0801323039011E315907E1393D060B3F5800103F8800773FFF00013FFF0001","D")
    End if

    If USW => &h0600 OR addusw > 6 Then
        sc.print "Adding USW 600" & VbCr
        Call WriteViaLoader("2D8C","7D08E3060342DEDD7D10E3021DD3E370042EDEDD07EAC59A2EAB002970012EC3","D")
        Call WriteViaLoader("2DAC","5704F470FF2C70FC2EC3F9","D")
        Call WriteViaLoader("2CD0","5503AA013AD0DBD524882D482ED5E3F9","D")
    End If

    If USW => &h0700 OR addusw > 6 Then
        sc.print "Adding USW 700" & VbCr
        Call WriteViaLoader("2902","2932","D")
        Call WriteViaLoader("2932","22C2B8227AB888305C43F9","D")
        Call WriteViaLoader("2CEB","00","D")
        Call WriteViaLoader("2D4A","C27A","D")
        Call WriteViaLoader("24C8","0700","E")
    End If

    If (USW => &h0800) or (addusw > 7) Then
    ' USW 800
    sc.print "Adding USW 800" & VbCr
    Call WriteViaLoader("2D16","77201E037420D28E3866","D")
    Call WriteViaLoader("2D20","F97720D2067420B775DFD28CC38F8801","D")
    Call WriteViaLoader("2D30","772C7720B7069A2C25BF9B2CD72CF9","D")
    Call WriteViaLoader("384C","8C2D16","D")
    Call WriteViaLoader("33C7","8C2D21","D")
    Call WriteViaLoader("3C37","FF8E2D2E","D")
    Call WriteViaLoader("24C8","0800","E")

    sc.print "Adding DSW 6" & VbCr
    Call WriteViaLoader("2DE0","A014EB90793ED0DDAF5F16258DB1F1D1","E")
    Call WriteViaLoader("2DF0","86D257FB40D54C9CC085B574C7A221E9","E")
    Call WriteViaLoader("2E00","3B6AA7A5A3E69FBA06663619D99A373B","E")
    Call WriteViaLoader("2E10","25A0672E34D0D75098DDFAA08320059C","E")
    Call WriteViaLoader("2E20","135033A93A589A37997B42E1C9F3E39F","E")
    Call WriteViaLoader("2E30","EA3DBF1928F7CEDC18181C85FCFB9FC0","E")
    Call WriteViaLoader("2E40","618A30F70354CED3A32E4E156C63D8F9","E")
    Call WriteViaLoader("2E50","AFB1108A151046F13A4089133B22D57F","E")
    Call WriteViaLoader("2E60","938A30D3F506A994BD0FF5AB05DE0FE9","E")
    Call WriteViaLoader("2E70","378C6DF0E35BE0A10E9678C2A161D000","E")
    Call WriteViaLoader("2E80","4314436DAE6C61EA588B35715B645AD5","E")
    Call WriteViaLoader("2E90","B93B95CB48432B9FE839CD6F6F31193B","E")
    Call WriteViaLoader("2EA0","56A8131E4D10225C796B1F1FE68448D0","E")
    Call WriteViaLoader("2EB0","06B91F85B4A48ABCFE55F427C6DEDB8A","E")
    Call WriteViaLoader("2EC0","228C0E9BA3D1CAEA5B536D191A1FDE6D","E")
    Call WriteViaLoader("2ED0","AA9FDCE3C7233C6607463628D69C2500","E")
    Call WriteViaLoader("2EE0","3AC78A87EB6EA8420DC8F077","D")
    Call WriteViaLoader("2EF8","3AC78A87EB6EA8420DC8F077","D")
    Call WriteViaLoader("2AD3","0167B0E3F472674726F97061E5","E")
    Call WriteViaLoader("2AE0","BBC137A9","E")
    Call WriteViaLoader("24E6","0006","E")
    Call WriteViaLoader("2AD0","000000","D")


    End If

End Sub

Sub WriteHex()
FileName = Fs.FileOpEndialog(HexFilter, "    Please select a .hex(*.hex) file to write to the card", "3m.hex")


    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            Call LoadBootStrap()
            Call Sc.ProgressBox ("Installing Hex.....", 12, 44, "StarGlitch")
            IncludeHex FileName
            Call Sc.ProgressBox ("Installing Hex.....", 44, 44, "StarGlitch")
            sc.delay(300)
            Call Sc.ProgressBox ("", 0, 0, "")
            sc.print "----------------------------------------" & VbCr
            sc.print "Loaded Hex Installed :" & VbCr & FileName & VbCr
        End If
    End If


End Sub

Function IncludeHex(vbsFile)
Set fso = CreateObject("Scripting.FileSystemObject")
Set ts = fso.OpenTextFile(vbsFile)
Set regEx = New RegExp
RegEx.Global = True
RegEx.Pattern = ":"

Call ExtractCardInfo()
Sc.Write("A1")
Do While Not ts.AtEndOfStream

ThisStr = ts.ReadLine
If (Left(ThisStr, 1) = ":") Then
  If not ThisStr = ":00000001FF" Then
    If Left(ThisStr, 2) = "::" Then
      Tail = "E"
    Else
      Tail = "D"
    End If
    ThisStr = ThisStr + Tail
    ThisStr = regEx.Replace (ThisStr,"")
    ByteCnt = Mid(ThisStr,1,2)
    BitCnt = Hex2Dec(ByteCnt) * 2
    Addr = Mid(ThisStr,3,4)
    If Addr <> "0000" Then
'        sc.print Addr & VbTab ' Debug Ok
        sData = Mid(ThisStr,9,BitCnt)
'        sc.print sData & VbCr ' Debug Ok
        Call WriteViaLoader(Addr,sData,Tail)
    End If
  End If
End If
loop
ts.Close
Call ShutdownCard()
End Function

Sub Include3m(vbsFile)
' Setup 3M array
Dim x
Dim mName, mysub
Dim fso, ts
m = 0
Set fso = CreateObject("Scripting.FileSystemObject")
Set ts = fso.OpenTextFile(vbsFile)
While not ts.AtEndOfStream
    ThisStr = ts.ReadLine
    If Left(ThisStr, 3) = "Sub" Then
            m=m+1
            Redim Preserve ary3m(m)
            mName = Split(ThisStr, "()")
            ary3m(m)=Mid(mName(0), 5, Len(mName(0)))
    End If
Wend
ts.Close
End Sub

Function Include(mFile)
    Dim fso, ts
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.OpenTextFile(mFile)
    buf = ts.ReadAll()
    ts.Close
    ExecuteGlobal buf
End Function

Sub Install3m()
Dim Input
MenuPrompt = "Input 3M Number to install :"
For x = 1 to m
MenuPrompt = MenuPrompt & VbCr & x & VbTab & ary3m(x)
Next
'Do
Input = InputBox(MenuPrompt, "StarGlitch: 3M Library", "Enter 3M Number")

If ary3m(Input) <> "" Then
    Call LoadBootStrap()
    Call ExtractCardInfo()
    Call Sc.ProgressBox ("Installing 3M.....", 1, 44, "StarGlitch")
    Sc.Write("A1")
    Execute ary3m(Input)
    Sc.Write("A0")
    Call Sc.ProgressBox ("Installing 3M.....", 44, 44, "StarGlitch")
    Call Sc.ProgressBox ("", 0, 0, "")
    sc.print ary3m(Input) & " 3M Installed, Enjoy!" & VbCr
End If
End Sub
' *****************************************************************

Sub ShutdownCard()
    BootActive = 0
    Sc.Write("A0")              ' Turn the LED off
    Sc.Write("020200")             ' Shutdown card
    Sc.Delay(100)
    Sc.Read(&h02)
    Fs.FileClose(Infile)
    Fs.FileClose(Outfile)
End Sub

Function CheckCard()
sc.verbose = 1
    Dim ATR
    Dim RetValue
    Dim i
    Call Sc.ProgressBox(0,0,0,0)
    Sc.Write("06100E10019300")
    Sc.Delay(500)
    Sc.Read(&h02)
    RetValue = Sc.GetByte(&h01)
    Sc.Read (RetValue)
    Sc.Print "Bytes in buffer: " & RetValue &VbCr
ATR = ""
    For i = 0 to RetValue -1
        ATR = ATR &  HexString(Sc.GetByte(i), 2) & " "        ' bytes of ATR
    Next
'Sc.Print ATR
    If RetValue = "13" Then
      Sc.Print "This is an H card with ATR: " & ATR & VbCr
    End If
    If Retvalue = "20" Then
      Sc.Print "This is an HU card with ATR: " & ATR & VbCr
    End If
    If (Retvalue <> "20")and(Retvalue <> "13")and (RetValue <> "0") Then
      Sc.Print "This is an unknown card with ATR: " & ATR & VbCr
    End If
    If (Retvalue = "0") Then
      Sc.Print "This may be a dead card, severely looped, damaged or you don't have good connections." & VbCr & "ATR: " & ATR & VbCr
    End If
sc.verbose = 0
End Function

Sub Check2000() ' Modified From Canard's to check 4 bytes at 2000 for corruption
    Dim Bytes
    Dim Address
    Dim i
    Dim NumOfBytes
    Dim Size

    Sc.Print VbCr & "*** Checking 2000 Data ... ***" & VbCr
    Address = 2000
    Size = 4
    NumOfBytes = HexToDec(Size)
    Sc.Write("A2")
    Call LoadBootStrap()
    Call ExtractCardInfo()
    Sc.Write("06 C2 " & HexString(NumOfBytes - 1,2) & Address & HexString(&h80 + NumOfBytes - 1,2) & "00")
    Sc.Delay(50)
    Sc.Read(&h02)
    NumOfBytes=Sc.Getbyte(&h01)
    Sc.Read(NumOfBytes)
    For i=0 to NumOfBytes-1
        Bytes = Bytes & HexString(Sc.Getbyte(i),2)
    Next
    if Bytes = "00000000" or Bytes = "" Then
      sc.print VbCr & Bytes & VbCr
       Sc.Print VbCr & "*** NOTE: 2000 Data on the card is '00000000' indicating some card specific bytes are messed up. ***" & VbCr
    Else
      Sc.Print VbCr & "*** NOTE: 2000 Data Check Passed! ***" & VbCr
    End If
    Sc.Write("A0")
End Sub

Sub Setup()
Dim fso, ts, x, regEx, buf
FileName = ""
FileName = Fs.FileOpEndialog(IniFilter, "Please Load your settings file", "StarGlitch.ini")
Set fso = CreateObject("Scripting.FileSystemObject")
Set ts = fso.OpenTextFile(FileName)
Do While Not ts.AtEndOfStream
buf = buf + ts.ReadLine + VbCr
loop
ts.Close
ExecuteGlobal buf
sc.print "Settings Loaded" & VbCr & VbCr
' sc.print buf
End Sub

Function DoGlitch()
  Dim cnt,b, kk,katr
  Dim cter, glcnt, mtries,kp, i
  Dim glsin
  katr=0
  mtries = mtries + 1
  boot = 0
If atrlock > 0 Then  ' We have ATR lock
  glsin = "+"
Else
  glsin = "."
End If
' *************************** ATR Lock *************************8
'A0: Led off
'A1: Led on Green
'A2: Led on Red
    sc.delay(loopdelay)
    sc.write("B0" & HexString(D1,02))
    glttl = glttl + 1
    Sc.Write("020200")
    Sc.Delay(loopdelay)
    Sc.Read(&h02)
'    sc.print "D1 Test = " & Sc.getbyte(0) & VbCr

    sc.write("0f1f0120" & HexString(D5,4) & "0c" & HexString(D7,2) & "20" & HexString(D6,4) & "0d00" & HexString(D8,2) & "0000")
    Sc.Read(&h02)
    cter=cter+1
    cnt=0
    Sc.Write("028000")
    if Sc.Read(&h02) = 2 then
         cnt = sc.getbyte(1)
    End If
    if cnt = 1 Then
      sc.read(1)
      resp = resp + 1
    End If
    if cter > 75 then
        glcnt = glcnt + 1
        cter = 0
        atrlock = 0
    End if

    if cnt > 0 then
       kp=kp+1

        If (kp = 1) Then
              sc.print ">>>>>> Logging: #" & daccnt & " " & D1 & " " & D2 & " " & D3 & " " & D4 & " " & D5 & " " & D6 & " " & D7 & " " & D8 & " " & D9 & VbCr
              If GenFlag Then
                Call WriteDac()
                DacCnt = DacCnt + 1
              End If
          resp = resp + 1
        End If
       if kp >33 then kp = 33
         for b = 0 to Ucycles
         Sc.Write("028000")

         if Sc.Read(&h02) = 2 then
            cnt = sc.getbyte(1)
            resp = resp + 1
         else
            cnt = 0
         End if

         if cnt > 0 then
            cnt = sc.read(cnt)
            kk=sc.getbyte(0)
'            sc.print VbCr & "kk is " & kk & VbCr ' Debug
            if kk = &h38 Then
               Sc.Write("028000")
               resp = resp + 1
               cnt = 0
               if Sc.Read(&h02) = 2 then
                   cnt = sc.getbyte(1)
                   resp = resp + 1
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &hb0 then
'                         sc.print "B0" ' ********************* Resp here?
                         resp = resp + 2
'                         Sc.Print D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & VbTab & d1cnt & dacmsg & VbCr
                         d0=d0+1
                         katr=1
                         cter = 0
                         glcnt = 0
                         atrlock =1
                         exit For
                       End if
                    End if
              End If
         End if
      Next
' **************************** Bootloader *******************************
    if katr = 1 Then
'      B0 XX: set voltage for glitch packet to XX
'      B0 00: set voltage to 0 volts
'      B0 FF: set voltage to 5 volts
       sc.write("B0"  & HexString(D4,02))
       sc.write("071f800d" & HexString(D3,02)& HexString(D2,02)&"0000")
       if Sc.Read(&h02) > 1 then
          cnt = sc.getbyte(1)
          respboot = respboot + 1
        else
          cnt = 0
       End If

       if cnt > 0 then
          cnt = sc.read(cnt)
          for b = 0 to cnt - 1
          next

          Sc.Write("31eeFFFFfed18d52E0FD2266E1B9E17201CF725f0772FF14C5E2AB0100C3DA07F88C0100FFFFFFFFFFFFFFFFFFFFFFFF0000")
          if Sc.Read(&h02)<2 then Sc.Read(&h02)
             Sc.Write("11c060200350042001500320" & HexString(D9,04) & "0d010000")
             Sc.Read(&h02)
             respboot = respboot + 1
          for b = 0 to 8
            Sc.Write("028000")
            if Sc.Read(&h02) = 2 then
                cnt = sc.getbyte(1)

            else
                cnt = 0
            End if

          if cnt > 0 then
             cnt = sc.read(cnt)
             kk=sc.getbyte(0)
             if kk = &h66 then
                Sc.Write("028000")
                respboot = respboot + 1
                cnt = 0
                if Sc.Read(&h02) = 2 Then
                  respboot = respboot + 1
                   cnt = sc.getbyte(1)
                   if(cnt = 0) then exit for
                      Sc.Read(cnt)
                      if(sc.getbyte(0)) = &h99 Then
                        respboot = respboot + 2
                         boot=1

                         sc.print "Bootloader installed After " & d0 & " attempts " & VbCr
                         Sc.Print "Total # of glitches applied to card " & glttl & VbCr
'                         Sc.Print "Delay used : " & loopdelay & VbCr
                         Sc.Print "D1 - D9 values used: " & D1 & ", " & D2 & ", " & D3 & ", " & D4 & ", " & D5 & ", " & D6 & ", " & D7 & ", " & D8 & ", " & D9 & VbCr

                         exit for
                      End if
                    End if
                 End if
             else
                exit for
          End if
         next

        if boot = 1 then

           Sc.Write("021500")
           Sc.Read(2)
           Sc.Write("42FF225272FF14E1E2D007E2D029E2D02A77800716753F07D307F75011E29B2A70012ADA07F78E013A00D7D307D8078ECEFBD40770012ADA07F300C6F76211F7631100")
           Sc.Read(2)
           Sc.Write("21DE8E0149F76011F76111881c931270FF1203FBF70011728512DA12FDF70011F900")
           Sc.Read(2)
           boot = 1
           sc.print "*************** Boot Enabled ***************" & VbCr
           Call GetWriteFile()
           Call WriteCard(32)
           Fs.FileClose(InFile)
           Call ShutDownCard()
           Call WriteDac()
           Exit Function
         End if
       End if
     End if
   else
    kp=kp-1
    if kp<1 then kp=1
   End if
End Function

Sub GenDac()
DacCnt = 0
GenFlag = True
sc.print "Responses:" & VbCr
d1 = d1Min
    Do
    Call Sc.ProgressBox ("Finding Dac Values...", DacCnt, MaxDacs, "StarGlitch DacFinder")
    If D1 > d1Max Then
        D1 = d1Min
    End If
    Call GetRndDac()
    sc.print "Finding Dac Set #" &DacCnt&" "& D1 & "," & D2 & "," & D3 & "," & D4 & "," & D5 & "," & D6 & "," & D7 & "," & D8 & "," & D9 & VbCr
'    sc.print DacCnt
    sc.write("A1")
    DoGlitch()    ' Use the dac set
    sc.write("A0")
    Loop until DacCnt > (MaxDacs - 1)
Call Sc.ProgressBox ("", 0, 0, "")
GenFlag = False
DacCnt = 0
End Sub

Sub GetRndDac()
'      D1 = INT(RND * 45) + 165  '165 - 210
      D2 = INT(RND * 6) + 50  ' 50 - 56
      D3 = INT(RND * 4) + 8  ' 8 - 10
      D4 = INT(RND * 8) + 88  '135 - 140
      D9 = INT(RND * 5) + 862 '862 - 867
      D5 = INT(RND * 2) + 605 ' 605 - 606
      D6 = INT(RND * 6) + 54  ' 54 - 60
      D7 = INT(RND * 1) + 29  ' 29 - 30
      D8 = INT(RND * 4) + 58  ' 58 - 62
d1 = d1 + 1
End Sub

Function WriteDac()
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set f = fso.GetFile(DacFileName)
    Set ts = f.OpenAsTextStream(ForAppending, TristateUseDefault)
    ThisStr = d1 & "," & d2 & "," & d3 & "," & d4 & "," & d5 & "," & d6 & "," & d7 & "," & d8 & "," & d9 & vbNewLine
    If Len(ThisStr) > 27 then
        ts.Write ThisStr
        i = i + 1
    End If
    ts.Close
End Function

Sub SetDacFile()
Dim FileSize
'If DacFileName = "" Then
'    DacFileName = "StarGlitch.dac"
'End If
DacFileName = Fs.FileOpEndialog(DacFilter, "    Please select a .dac(*.dac) file to use.", DacFileName)
        If Fs.FileExists(DacFileName) = 0 Then
            Exit Sub
        Else
             InFile = Fs.FileOpen(DacFileName, fsoOpenReadWrite)
             FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_End)
             sc.print "Dac File size: " & FileSize & VbCr
            If FileSize < 150 Then
                Fs.FileClose(InFile)
                Call GetDacArray()
                Sc.MsgBox ("This File only has "& (i + 1) &" Dac Sets." & VbCr & "You may want to generate a new one.")
                Exit Sub
            Else
            Fs.FileClose(InFile)
            End If
        End If
End Sub

Function GetDacArray() ' Read the whole DacArray into memory
If Fs.FileExists(DacFileName) = 0 Then
'    Sc.MsgBox("The file does not exist")
    Exit Function
End If
            Set fso = CreateObject("Scripting.FileSystemObject")
            Set f = fso.GetFile(DacFileName)
            Set ts = f.OpenAsTextStream(ForReading, TristateUseDefault)
            reDim DacSet(0)
            i=-1
            While not ts.AtEndOfStream
            ThisStr = ts.ReadLine
            If not Left(ThisStr, 1) = "'" Then
                    i=i+1
                    Redim Preserve DacSet(i)
                    DacSet(i)=ThisStr
                    dacFields = Split(DacSet(i), ",")
            End If
            Wend
            ts.Close
            GetDacArray = DacSet
            i=i
sc.print "Dac Finder reports " & (i + 1) & " Records in " & DacFileName & VbCr
End Function

Function GetNextDac(d)
randac = 1
' Get the Dac record d from the DacSet array and assign the 9 values
dacFields = Split(DacSet(d), ",", -1, 1)
For idxField = 0 To UBound(dacFields)

   D2 = dacFields(1)
   D3 = dacFields(2)
   D4 = dacFields(3)
   D9 = dacFields(8)
   If atrlock = 0 then
   D5 = dacFields(4)
   D1 = dacFields(0)
   D6 = dacFields(5)
   D7 = dacFields(6)
   D8 = dacFields(7)
   End If
Next
'sc.print VbCr & "Using Dac Set #" &d&" "& D1 & " " & D2 & " " & D3 & " " & D4 & " " & D5 & " " & D6 & " " & D7 & " " & D8 & " " & D9 & VbCr
End Function

' *********************************************** AltEE Fix - Thanks to AltEEcmdTeam!
Sub FixAltEE()
Call Sc.ProgressBox ("Cleaning AltEE...", 1, 7, "StarGlitch AltEE Repair")
' Write AltEE
Sc.Write("25E2 9F 2B10 5220AA2B78AB015FCAF85260AA2B26AB004FCAF88C00508820002A8801602C52 00")
Sc.Read(&h02)
Call WDTMR()
Call Sc.ProgressBox ("Cleaning AltEE...", 2, 7, "StarGlitch AltEE Repair")
Sc.Write("25E2 9F 2B30 20F75011F760139A2C9B2A70012A70012CCAF4F72211F723118F0014F72011F7 00")
Sc.Read(&h02)
Call WDTMR()
Call Sc.ProgressBox ("Cleaning AltEE...", 3, 7, "StarGlitch AltEE Repair")
Sc.Write("25E2 9F 2B50 21118F000BF70013B4B47230518C01008800002E70012E7D2F2D09F8F7001172 00")
Sc.Read(&h02)
Call WDTMR()
Call Sc.ProgressBox ("Cleaning AltEE...", 4, 7, "StarGlitch AltEE Repair")
Sc.Write("25E2 9F 2B70 9004DA04FDF70011F900000000AA0000000000000000F300F3FFFFFFFFFFFFFF 00")
Sc.Read(&h02)
Call WDTMR()
Call Sc.ProgressBox ("Cleaning AltEE...", 5, 7, "StarGlitch AltEE Repair")
Sc.Write("25E2 9F 2B90 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000F300F3FFFFFFFFFFFFFF 00")
Sc.Read(&h02)
Call WDTMR()
Call Sc.ProgressBox ("Cleaning AltEE...", 6, 7, "StarGlitch AltEE Repair")
' Executing
Sc.Write("05 C2 41 2B10 00")
sc.delay(500)
Sc.Read(&h02)
Call Sc.ProgressBox ("Cleaning AltEE...", 7, 7, "StarGlitch AltEE Repair")
Sc.Write("05150E108000")'SET WDTMR
Sc.Read(&h03)
Sc.delay(200)
Call Sc.ProgressBox ("", 0, 0, "")
sc.print "AltEE Restored Successfully" & VbCr
sc.delay(500)
sc.print "Cleaning residual code...." & VbCr
        Call WriteViaLoader("2B00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B10","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B30","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B50","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B70","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2B90","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BB0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BC0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BD0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BE0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2BF0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C00","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C10","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C20","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C30","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C40","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C50","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C60","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C70","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C80","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2C90","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CA0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CB0","0000000000000000000000000000000000000000000000000000000000000000","E")
        Call WriteViaLoader("2CC0","0000000000000000000000000000000000000000000000000000000000000000","E")
End Sub

Sub ReadHex()
Dim regEx, subname, subname1, subname2

FileName = Fs.FileOpEndialog(HexFilter, "    Please select a .hex(*.hex) file to convert", "3m.hex")
Set fso = CreateObject("Scripting.FileSystemObject")
subname1 = fso.GetFileName(FileName)
subname2 = Split(subname1, ".hex")
subname = subname2(0) + "()"
Set regEx = New RegExp
RegEx.Global = True
RegEx.Pattern = "-"
subname = regEx.Replace (subname,"_")
buf = "Sub " + subname + VbCr

Set ts = fso.OpenTextFile(FileName)
Set regEx = New RegExp
RegEx.Global = True
RegEx.Pattern = ":"
Do While Not ts.AtEndOfStream
ThisStr = ts.ReadLine
If (Left(ThisStr, 1) = ":") Then
  If not ThisStr = ":00000001FF" Then
    If Left(ThisStr, 2) = "::" Then
      Tail = "E"
    Else
      Tail = "D"
    End If
    ThisStr = ThisStr + Tail
    ThisStr = regEx.Replace (ThisStr,"")
    ByteCnt = Mid(ThisStr,1,2)
    BitCnt = Hex2Dec(ByteCnt) * 2
    Addr = Mid(ThisStr,3,4)
    If Addr <> "0000" Then
'        sc.print Addr & VbTab ' Debug Ok
        sData = Mid(ThisStr,9,BitCnt)
'        sc.print sData & VbCr ' Debug Ok
' Build Output string Call WriteViaLoader(Addr,sData,Tail)
buf = buf + "Call WriteViaLoader(" + Chr(34) + Addr + Chr(34) + Chr(44) + Chr(34) + sData +  Chr(34) + Chr(44) + Chr(34) + Tail + Chr(34) + ")" & VbCr
    End If
  End If
End If
loop
ts.Close
buf = buf + "End Sub" + vbNewLine + vbNewLine
sc.print buf
Call Add3m(buf)
sc.print "Hex added to StarGlitch 3M Library : Sub " & subname & VbCr
End Sub

Sub Add3m(addscript)
   Set fso = CreateObject("Scripting.FileSystemObject")
   Set f = fso.OpenTextFile(mFile, ForAppending, True)
   f.Write addscript
   f.Close
End Sub