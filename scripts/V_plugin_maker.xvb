' // #############################################################################//
' // This script will create an XVB script plug-in of a hex file or a bin file    //
' // Select either .hex or .bin and the plug-in will be created. Use cut and      //
' // paste to WordPad or a code editor and you can save it as a non-formatted     //
' // text file. You can use this in any .xvb script that uses the WriteViaLoader  //
' // format. This script uses the standard convention "Call WriteViaLoader". If   //
' // your script uses something else like "Call WriteViaLoader(32)" or similar,   //
' // simply load a copy of this .xvb into Wordpad and replace all "WriteViaLoader"//
' // with "WriteViaLoader(32)" or whatever other convention is used.              //
' // I mention this because some scripts have used "WriteViaBootstrap", etc.      //
' // #############################################################################//
Option Explicit
    Const dss_DefaultButton1 = 0
    Const dss_DefaultButton2 = 256
    Const dss_DefaultButton3 = 512
    Const fsoError = -1
    Const fsoOpenRead = 0
    Const fsoOpenWrite = 1
    Const fsoOpenReadWrite = 2
    Const fsoSEEK_SET = 0
    Const fsoSEEK_CUR = 1
    Const fsoSEEK_End = 2
    Const FileFilter = "All Eprom Files (*.bin, *.crd)|*.bin;*.crd;|Bin Files (*.bin)|*.bin|Crd Files (*.crd)|*.crd|All (*.*)|*.*"
    Const HexFilter = "Hex Files (*.hex)|*.hex"

    Const Software="Vorlon Plugin Maker"
    Dim OutFile
    Dim InFile
    Dim HUBinFile
    Dim XORedByte(31)
    Dim Key12byte(11)
    Dim Choice
    Dim ScriptStart
    Dim ScriptEnd
    Dim MenuPrompt
    Dim Read, Tail , fd
    Dim dacmsg
    Dim FileName

Sub Main()

    Dim ErrorString
    Dim MenuPrompt
    Dim Choice
    Dim PromptString
    Dim RetValue
    Dim GotInput
    Dim ThisChar
    Dim Version
    Dim Cchoice
    Sc.Verbose = 0 ' Set to 1 for display of response
Do
    MenuPrompt = dacmsg & "This script will convert a .hex or .bin file to xvb format" & vbCrLf
    MenuPrompt = MenuPrompt & "so you can encrypt it into a Winexplorer script." & vbCrLf
    MenuPrompt = MenuPrompt & "The program determines the E and D correctly for a plugin." & vbCrLf
    MenuPrompt = MenuPrompt & "Cut and paste the results into Wordpad or other non-formating" & vbCrLf
    MenuPrompt = MenuPrompt & "Text editor. It can then be cut and pasted into any .xvb script." & vbCrLf
    MenuPrompt = MenuPrompt & "THIS WILL NOT WORK WITH A HEX GENERATED BY HUDIFF, HOWEVER!" & vbCrLf
    Choice = Sc.ButtonBox(MenuPrompt, VbInformation, "Vorlon Plug-in: Select operation or click X to exit-->", "Hex Plug-in", "Bin Plug-in")

Select Case Choice
Case "0" ' Exit script
  Exit Sub

Case "1" ' Hex Plugin
Call Load3Mplugmaker()

Case "2" 'Bin Plugin
Call pluggerforbin()
End Select

Loop While True = True
End Sub ' End Sub Main()
' ************************************ End Main Sub **************************************
Function HexToDec(HexNumber)

    ' This function takes a string as input, assuming it to be a Hexidecimal string,
    ' and converts it to a decimal number.

    HexNumber=Replace(UCase(HexNumber)," ","")
    HexToDec=CLng("&H"+HexNumber)

End Function
Function Hex2Dec(HexNumber)
    ' This function takes 1 argument, a string containing a hex value of any digit length
    ' and returns the decimal equivalent
    Dim DecimalValue
    Dim DigitCount
    Dim Digit
    Dim HexDigit

    HexNumber = Replace(UCase(HexNumber), " ", "")
    DigitCount = Len(HexNumber)

    For Digit = 1 To DigitCount

        HexDigit = Mid(HexNumber, Digit, 1)
        If Asc(HexDigit) < 58 Then
            DecimalValue = HexDigit * 16 ^ (DigitCount - Digit)
        Else
            DecimalValue = (Asc(HexDigit) - 55) * 16 ^ (DigitCount - Digit)
        End If
        Hex2Dec = Hex2Dec + DecimalValue
    Next

End Function
' ########## This sub creates a plugin for a bin file that can be used in an .xvb script ######
Sub pluggerforbin() ' Makes an XVB script plug-in from a bin file

    Dim EEPROM
    Dim TByte
    Dim Address
    Dim addy
    addy = &H2000
    Dim EEPROMBytes
    Dim Multiplier
    Call GetFile()
    If Hubinfile = False then
    exit sub
    else
    end if
    Call Fs.FileSeek(InFile, 0, fsoSEEK_SET)
    EEPROMBytes = ""
    EEPROM = 0
    Address = 8192 ' For EEPROM Read
    Tail = "D"
    EEPROMBytes = ""
    sc.print VbCr
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ", 1, 44)" & VbCr
    For EEPROM = 1 to 128

sc.print "Call WriteViaLoader(" + chr(34)+ hexstring(addy,4) +CHR(34) + "," + CHR(34)
        For TByte = 0 to 15
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
        next
sc.print eeprombytes + chr(34) + "," + chr(34) + Tail + chr(34) + ")"& VBCr
        EEPROMBytes = ""

addy = addy + &H10
sc.print "Call WriteViaLoader(" + chr(34)+ hexstring(addy,4) +CHR(34) + "," + CHR(34)
        For TByte = 16 to 31
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
            next
sc.print eeprombytes + chr(34)+ "," + chr(34)+ Tail + chr(34) + ")"& VBCr
        EEPROMBytes = ""

addy = addy + &H10
sc.print "Call WriteViaLoader(" + chr(34)+ hexstring(addy,4) +CHR(34) + "," + CHR(34)
        For TByte = 32 to 47
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
            next
sc.print eeprombytes + chr(34)+ "," + chr(34)+ Tail + chr(34) + ")"& VBCr
        EEPROMBytes = ""

addy = addy + &H10
sc.print "Call WriteViaLoader(" + chr(34)+ hexstring(addy,4) +CHR(34) + "," + CHR(34)
        For TByte = 48 to 63
            EEPROMBytes = EEPROMBytes & HexString(Fs.FileGetc(InFile), 2)
            next
sc.print eeprombytes + chr(34)+ "," + chr(34)+ Tail + chr(34) + ")"& VBCr
        EEPROMBytes = ""
        addy = addy + &H10
        Address = Address + 64
        EEPROMBytes = ""

If addy = &H2500 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",10, 44)" & VbCr
else
end if
if Addy = &H2A00 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",20, 44)" & VbCr
else
end if
if addy = &H3000 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",25, 44)" & VbCr
else
end if
if addy = &H3500 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",30, 44)" & VbCr
else
end if
if addy = &H3900 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",35, 44)" & VbCr
else
end if
if addy = &H3C00 then
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",40, 44)" & VbCr
else
end if
    Next

    Fs.FileClose(InFile)

    Call Sc.ProgressBox ("", 0, 0, "")
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ",44, 44)" & VbCr

End Sub
'#### GETS BIN FILE FOR WRITING TO THE CARD ####
Sub GetFile()
    Dim FileName
    Dim FileSize

    FileName = Fs.FileOpenDialog(FileFilter, "Please select a valid HU Eprom (*.bin) file", "Default.bin")
    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            InFile = Fs.FileOpen(FileName, fsoOpenRead)
        End If
    End If

    FileSize = Fs.FileSeek(InFile, 0, fsoSEEK_END)
    'Sc.Print "The file size is " & FileSize & vbCr

    if FileSize <> "8192" then
    Sc.MsgBox("This file is NOT a valid HU bin file" & vbcr & "or the bin file you are trying to open" & vbcr & "is being used by another program")
    HUBinFile = False
    else
    HUBinFile = True
    end if
end sub
'#### NECESSARY TO CONVERT A NUMBER INTO HEX ####
Function HexString(Number,Length)
    ' This function takes 2 arguments, a number and a length.  It converts the decimal
    ' number given by the first argument to a Hexidecimal string with its length
    ' equal to the number of digits given by the second argument
    Dim RetVal
    Dim CurLen
    RetVal=Hex(Number)
    CurLen=Len(RetVal)
    If CurLen<Length Then
        RetVal=String(Length-CurLen,"0") & RetVal
    End If
    HexString=RetVal
End Function
' ########## This sub creates a plugin for a standard or ExtremeHU hex file. #############
Sub Load3Mplugmaker()' Makes an XVB script plug-in for a hex file

FileName = Fs.FileOpEndialog(HexFilter, "    Please select a .hex(*.hex) file to write to the card", "Any hex or ExtremeHU.hex file.hex")


    If FileName <> "" Then
        If Fs.FileExists(FileName) = 0 Then
            Sc.MsgBox("The file does not exist")
        Else
            Call Sc.ProgressBox ("Creating Hex.....", 12, 44, "Vorlon Plug-in Maker")
            IncludeB FileName
            Call Sc.ProgressBox ("Creating Hex.....", 44, 44, "Vorlon Plug-in Maker")
            sc.delay(300)
            Call Sc.ProgressBox ("", 0, 0, "")
        End If
    End If


End Sub

Function IncludeB(vbsFile)
Dim fso, ts, x, regEx, buf, sorryStr
Dim ThisStr, Tail, ByteCnt, BitCnt, Addr, sData
Set fso = CreateObject("Scripting.FileSystemObject")
Set ts = fso.OpenTextFile(vbsFile)
Set regEx = New RegExp
RegEx.Global = True
RegEx.Pattern = ":"
Sc.Print VbCr
sc.print "YOUR PLUG-IN FOR " & Filename & VbCr & VbCr
sc.print "Call Sc.ProgressBox (" + CHR(34) + "Installing......." + CHR(34) + ", 1, 44)" & VbCr

Do While Not ts.AtEndOfStream

ThisStr = ts.ReadLine
If not Left(ThisStr, 1) = "#" Then
  If not ThisStr = ":00000001FF" Then
    If Left(ThisStr, 2) = "::" Then
      Tail = "E"
    Else
      Tail = "D"
    End If
    ThisStr = ThisStr + Tail
    ThisStr = regEx.Replace (ThisStr,"")
    ByteCnt = Mid(ThisStr,1,2)
    BitCnt = Hex2Dec(ByteCnt) * 2
    Addr = Mid(ThisStr,3,4)
    sc.print "Call WriteViaLoader(" + chr(34)
    sc.print Addr +CHR(34) + "," + CHR(34)
    sData = Mid(ThisStr,9,BitCnt)
    sc.print sData + chr(34) + "," + chr(34) + Tail + chr(34) + ")" & VbCr
if addr =  "" then
end if
End If
End If

loop
ts.Close
Sc.Write("A0")
sc.print "Call Sc.ProgressBox (" + chr(34) + "Installing ......." + chr(34) + ", 44, 44)" & VbCr
        Fs.FileClose(fd)
End Function